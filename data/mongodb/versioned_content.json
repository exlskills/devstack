{"_id":"5817b58fe8494f31aa8ddd1b2331e430_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614877803831469362211"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Welcome to our Java Course! We will be exploring basic concepts of Java that will give you enough knowledge to create your own programs and build your own games.\n\nWhere do we begin? Let's explore what Java is.\n\nCreated and developed by James Gosling at Sun Microsystems, Java was first used in 1995 as a core component of Sun Microsystem's Java platform. Java is a high-level programming language platform that poses all the attributes below:\n\nJava is…\n\n1. Object Oriented - software uses a combination of different types of objects. Java sustains and utilizes the inheritance features of most object-based platforms.\n\n2. Platform Independent - Java code runs in the same fashion on any JVM (Java Virtual Machine). The same code will run in the same way with the same result on any JVM operating system, including Mac, Linux, Windows and other JVMs.\n\n3. Dynamic - Java executes multiple programming behaviors at runtime and doesn't need to pass back through at compile time as in static programming languages.\n\n4. Multi-threaded - a thread refers to one independent program. Multi-threading allows you to run many tasks simultaneously while sharing the same memory.\n\n5. Interpreted - Compiled Java language produces Java byte codes which are then interpreted by the JVM.\n\n6. Portable - \"Write Once, Run Anywhere\" (WORA). Once a Java program is compiled, bytecodes are produced and can be transferred, via a network, to be executed by any JVM.\n\n7. Robust - Java can handle errors and abnormalities while the program is executing. Some of the features that make this possible include capable memory management, automatic garbage collection, type checking and exception handling.\n\n8. High-level - Java programming language is readable to a human, which allows the programmer to focus on \"what\" he or she wants to achieve rather than \"how\". The JVM then converts it to machine readable language.\n\nWe will continue to explore each one of these concepts as we move through the course.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610887964"}},"updated_at":{"$date":{"$numberLong":"1537610887964"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"bf8e3a81649546bf9a80435755210d6a_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614877803831469362217"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Java, a high-level general purpose programming language, runs on over three billion devices. It is a powerful and predominant software platform. Every full implementation of the Java platform provides great features:\n\n1. Development Tools - everything you will need to compile, run, monitor, debug, and document your application. (Java compiler, Java launcher, and Javadoc)\n2. Application Programming Interface (API) - List of all the classes that are part of the Java Development Kit (JDK), including all packages, classes and interfaces along with their methods, fields and constructors. The pre-written classes equip you with a massive amount of functionality. \n3. Deployment Technologies - the JDK gives you standard mechanisms like the Java Plug-in and Web Start software for deploying your applications to end users.\n4. User Interface Toolkits - Java FX, Swing, and Java 2D can be used to build intricate Graphical User Interface (GUIs).\n5. Integration Libraries - Allows database access and possible manipulation of remote objects.\n\nThe attributes of Java described above are used in implementation to create different types of applications. Below are the four main types of applications that can be constructed using Java.\n\n1. Standalone Application - Also called desktop or window-based application. These applications need to be installed on every machine. Some examples include media player and antivirus applications.\n2. Web Application - Runs on a server and creates a dynamic page.\n3. Enterprise Application - Distributed application for businesses. Offers scalability, security, load balancing and clustering.\n4. Mobile Application - Created for a mobile device. Examples include social media apps and games.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610887975"}},"updated_at":{"$date":{"$numberLong":"1537610887975"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"2e8533c3dfdd438e8439f68dd8bc7bb6_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba61487780383146936221d"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"If you have studied Java prior to today, you may have encountered the \"Hello World!\" program, which shows a basic illustration of the program printing words on the console. Let's take a look at this program below and run it to see what happens. Feel free to alter the text enclosed by the quotation marks to change the output.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22GegbGVEhmhZZ%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22HelloWorldExample.java%22%3A%7B%22name%22%3A%22HelloWorldExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+HelloWorldExample+%7B%5Cn++%2F%2F+This+is+the+main+method%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+This+prints+Hello+World%21%5Cn++++System.out.println%28%5C%22Hello+World%21%5C%22%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThis program is comprised of two primary features:\n\n1. Class Definition - the keyword `class` begins the class definition for a `class` named name. The code for each class goes between the opening and closing braces. The class name format is UpperCamelCase, meaning the first letter of every word is capitalized and there are no spaces between the words. \n2. Main Method - Every application must contain a class that has been declared the main method with signature `public static void main(String[] args)`. We will dive further into declaring methods, and terms such as `public`, `static` and `void` as we move further along. For now, remember how to declare a main method.\n\nSpecial Note: A vital aspect of syntax to keep in mind as we move forward is that every statement must end in a semi-colon (;), as you see above in our Hello World example.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610887998"}},"updated_at":{"$date":{"$numberLong":"1537610887998"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"f6c1df94fd5a4f8a999789e7b303189e_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614887803831469362222"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"What sets Java apart from other programming languages is the creation of the Java bytecode file by the Java compiler. In other languages, you write the source code, which is then converted into a low-level program. The Java compiler takes each class in the source file and converts them into Java bytecode files. The file extension for Java bytecode is \".class\" to ensure that no matter what the operating system is, the Java bytecode is readable and run-able on any Java Virtual Machine (JVM), anywhere.\n\nIn other words, the Java compiler transforms the code you write into a readable version for the JVM to run and execute on your computer to accomplish exactly what you intended. It is an essential tool and will take you further into your Java learning and capabilities.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888005"}},"updated_at":{"$date":{"$numberLong":"1537610888005"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"bc84024d13dd49569b29a0b057f7caca_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614887803831469362227"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"In addition to the Java compiler, the Java interpreter is another important part of Java programming. The Java interpreter decodes and executes every statement of bytecode for the Java Virtual Machine and is part of the machine itself. Each platform, for example, a Mac, has its own interpreter that functions to interpret bytecode so that it's compatible with a Mac.\n\nThis is what makes Java special; compared to other programs that rely solely on a compiler OR an interpreter, Java has BOTH. Instead of merely compiling raw machine language and executing it on one type of machine, Java bytecode plus the Java interpreter allows your code to run on different types of machine architectures. Java is an intermediary language that achieves platform independence.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888014"}},"updated_at":{"$date":{"$numberLong":"1537610888014"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"39398b0a4ece4cf88d0c1d2483ee68f5_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba61488780383146936222d"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Imports are the next building block of Java programming that is essential to master in order to write advanced programs. Java gives you the advantage of pre-built classes and methods that can perform many functions such as reading a content file or comparing different dates. The classes are organized into packages that must be imported into your project in order to be used. Let's look at two ways to import a class.\n\nBelow is an example of a method you can use to import a class called `ArrayLists`.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22glxgclfTSmgb%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ImportExample.java%22%3A%7B%22name%22%3A%22ImportExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cn%2F%2F+imports%5Cnimport+java.util.ArrayList%3B%5Cn%5Cnpublic+class+ImportExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+This+will+be+explained+in+Unit+7%5Cn++++ArrayList%5Cu003cString%5Cu003e+exampleVariable+%3D+new+ArrayList%5Cu003cString%5Cu003e%28%29%3B%5Cn++++exampleVariable.add%28%5C%22Hello%5C%22%29%3B%5Cn++++exampleVariable.add%28%5C%22World%21%5C%22%29%3B%5Cn++++%2F%2F+This+prints+exampleVariable%5Cn++++System.out.println%28exampleVariable%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nTake note of the fact that the IMPORT statement is located at the very beginning of this example. In words, it says: \"in the package `java.util` there is a class called `ArrayList` and we want to use it in our program\".\n\nA second method to import classes is using the '\\*' symbol. For example, to import ALL the classes in the `java.util` package, we would write `import java.util.*`\n\nNotice that the `java.lang` package is auto-imported for you so that later in the course, when you begin using `String` and `Math` classes, you do not need to import them.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888027"}},"updated_at":{"$date":{"$numberLong":"1537610888027"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"8be7ac60ea5b461cbff0ea60cb5ba018_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614887803831469362233"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Source code is a group of text listing commands, likely with comments, that can be compiled and executed by a machine but written and read by a human. Source code is what allows computer programmers to specify, read, and write the code that governs the actions of a Java Virtual Machine (JVM). As we discussed before, in order for the JVM to run a Java program, the Java compiler compiles the Java source code into Java bytecode, which is then interpreted by the Java Virtual Machine and converted into machine language.\n\nThe source code file has file extension \".java\". This is the file that is converted into the Java bytecode file, also called the class file. Everything that you physically code is \"source code\". Thanks to Java source code, you will not have to deal with bytecode files or machine language files, as those files will be created automatically by Java from your source code when you compile and run your program.\n\nNote: Every public class file that you write must be in a separate \".java\" file, where the file name matches your class name.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888035"}},"updated_at":{"$date":{"$numberLong":"1537610888035"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"28a78ff882f247009f991fce04095806_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614887803831469362239"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Although you do not have to directly edit, build, or prepare class files manually in Java, we will still take a look at what the class file is and what it does. In its simplest definition, a class file contains the Java bytecode and has a \".class\" extension. This file is what the Java Virtual Machine (JVM) interprets and converts into machine code. The class file is used by the JVM and not meant for your specific operating system.\n\nEvery time you run a Java program, the Java compiler creates a .class file from the Java source code file. The Java Virtual Machine then loads the .class file and executes the main method, which is the entry point for the Java application. This is one of the reasons why it is absolutely necessary to have a main method for classes where you have executable code. However, don't worry about making this mistake - another benefit of Java is the security protocols in place that verify each Java class file after loading and rejects class files that disobey the restrictions of the Java programming language.\n\nEven though you could edit the .class file directly with text editors, it is not recommended because changes in the file will generate errors when you run the program.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888043"}},"updated_at":{"$date":{"$numberLong":"1537610888043"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"a90fc791387b4002a88714e5053affbe_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614887803831469362249"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"In Java, there are keywords that are reserved for the use of Java functions or other uses that cannot be identifiers like variables, classes and function names. When a reserved word is used as a variable, we will get an error or some other unexpected result. Examples of reserved words are shown below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22MFhAGUxavAkA%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ReservedWordsExample.java%22%3A%7B%22name%22%3A%22ReservedWordsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ReservedWordsExample+%7B%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++String+exampleVariable+%3D+%5C%22George%5C%22%3B%5Cn++++%2F%2F+This+prints+Hello+World%21+and+exampleVariable%5Cn++++System.out.println%28%5C%22Hello+World%21%5C%22%29%3B%5Cn++++System.out.println%28exampleVariable%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nIn our example above, we see that the reserved words are in a different color than the rest of the line. These are words that have a specific meaning to the system. For example, `class` means that a definition of \"class\" immediately follows. We must use reserved words only for their intended purpose; we cannot use \"class\" for any other purpose than defining class.\n\nPlease notice that the Java reserved word must be written in the exact same way as Java states, including the case of the word. For this reason, even though it is not recommended, we could technically name a variable \"Class\" because the 'C' is capitalized so it is not our reserved word `class`.\n\nThe following are more examples of reserved words that we will learn how to use as we progress through the course.\n\n`abstract`, `if`, `private`, `this`, `double`, `implements`, `throw`, `boolean`, `else`, `import`, `public`, `throws`, `break`, `return`, `byte`, `extends`, `int`, `short`, `true`, `false`, `case`, `interface`, `static`, `try`, `catch`, `final`, `long`, `void`.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888070"}},"updated_at":{"$date":{"$numberLong":"1537610888070"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"2a81d6eb393e4c5a99f10b08e3bff305_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba61488780383146936224f"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"A \"comment\" is a message written to a human reader of the program. A comment is denoted by `//` at the beginning of the line. Those two characters (//) and everything that follows on the one line are disregarded by the Java compiler. Please take a look at the example below showing the use of comments.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22AhJjLbjYnZkc%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22CommentsExample.java%22%3A%7B%22name%22%3A%22CommentsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+CommentsExample+%7B%5Cn++%2F%2A+Comment+Block%5Cn%5Cn++You+can+write+as+much+as+you+want+inside+the+comment+block%5Cn%5Cn++%2A%2F%5Cn++%2F%2F+this+is+another+example+of+a+comment%5Cn%5Cn++public+static+void+main+%28String%5B%5D+args%29%7B%5Cn++++%2F%2F+this+will+not+print+because+it+is+a+comment%5Cn++++%2F%2F+System.out.println%28%5C%22Hello%21%5C%22%29%3B%5Cn++++System.out.println%28%5C%22Hello+World%21%5C%22%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nIn the example above, some comments span for more than one line. To get the Java compiler to ignore multiple lines, we use `/*` at the beginning of the comment and `*/` at the end of the numerous lines of comments. When using this method to add a lengthy comment, make sure there are no characters between '/' and '\\*'. The `/*` and `*/` can start and stop anywhere on a line. Everything between the pair is a comment ignored by the compiler.\n\nIn addition to marking an actual comment in this way, we can also use the comment functionality for debugging. If we run into a situation where the program has a syntax error, one way to search for the root of the error is to remove some of the code from being compiled by turning it into a comment. If the modified program works as expected, the error must be in the section of code that was made into a comment. From there, we can decrease the amount of code in the comments until we pinpoint the error. Please remember this useful and important method for debugging long lines of code.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888087"}},"updated_at":{"$date":{"$numberLong":"1537610888087"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"51704983ba144614aa9482c557d18d05_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614887803831469362255"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Everything that a program accomplishes is outlined between the first brace and the final brace of the class. The line `public static void main (String[] args)` show where the program starts running. Please take a look at the code below that shows a class with a main method.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22KRuOVrdFMXKe%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ClassExample.java%22%3A%7B%22name%22%3A%22ClassExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn+%5Cn+public+class+ClassExample+%7B+%5Cn++%2F%2F+This+creates+new+String+named+exampleVariable+%5Cn++private+static+String+exampleVariable%3B+%5Cn%5Cn++%2F%2F+This+is+the+constructor+for+the+class+%5Cn++%2F%2F+that+takes+in+one+parameter+%5Cn++public+ClassExample%28String+exampleVariable%29%7B+%5Cn++++this.exampleVariable+%3D+exampleVariable%3B+%5Cn++%7D+%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B+%5Cn++++%2F%2F+This+will+be+explained+in+Unit+8+%5Cn++++ClassExample+classexample+%3D+new+ClassExample%28%5C%22Hello+World%21%5C%22%29%3B+%5Cn++++%2F%2F+This+prints+the+String+stored+in+exampleVariable+%5Cn++++System.out.println%28exampleVariable%29%3B+%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe class `ClassExample` is an example of a class declaration. The area between the braces is called the class body and provides all the code information within a certain class.\n\nPlease remember that if you are planning to run the class, the main method must exist and be declared exactly the same as it is show above. The class is separated into three different sections:\n\n1. Fields: contains variables that are declared or declared and initialized with a value\n2. Constructors: initialize the objects of a particular class. We will dive deeper into this concept when we examine and discuss objects \n3. Methods: sets of code that are referred to by name and called upon at any point in the program.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888107"}},"updated_at":{"$date":{"$numberLong":"1537610888107"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"fe9360b1c1684fc284040a933f3ddeb3_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba61488780383146936225b"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"In Java, the \"Fields\" section of a class is used to house variables and to declare and initialize them to a value, if needed. A Java field is a variable inside a class. For instance, in the class below, we see four different variables:\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22ilyzZvNBHXyb%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22FieldsExample.java%22%3A%7B%22name%22%3A%22FieldsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+FieldsExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+5%3B%5Cn++public+static+int+exampleVariableTwo+%3D+10%3B%5Cn++public+int+exampleVariableThree%3B%5Cn++private+int+exampleVariableFour%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+this+prints+exampleVariableOne+and+exampleVariableTwo%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThere are multiple ways to declare a variable. We can either declare it or declare and initialize it with an initial value. Here are some examples:\n\n1. `dataType variableName;`<br>\n\n We declared a variable and its data type but put nothing in the variable\n\n2. `dataType variableName = initialValue;`<br>\n\n We declared a variable, its data type, and put an initial value into memory. The initial value must be of the correct data type.\n\n3. `dataType variableNameOne, variableNameTwo;`<br>\n\n We declared two variables, both of the same data type, but put nothing in either variable. We can do this with more than two variables.\n\n4. `dataType variableNameOne = initialValueOne, variableNameTwo = initialValueTwo;`<br>\n\n We declare two variables, both of the same data type, and put an initial value in each variable. Again, we can do this for more than two variables as long as we follow the same format.\n\nYou get to pick the name for each variable in the program. Various things in a program are given names. A name chosen by a programmer is called an \"identifier\". For example, in the code above, `exampleVariableOne` is an identifier.\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888123"}},"updated_at":{"$date":{"$numberLong":"1537610888123"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"27a007ce1a0f4ec89bb157b332a45265_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614887803831469362261"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"We mentioned constructors when we discussed declaring classes and we will visit this topic again later. For now, let's discuss what a constructor is and what it does. If a class is a description of a possible object, then the constructor is what functions to create the object of the class.\n\nConstructors are often used with values called parameters that are stored in the data portion of the object that is created. Take a look at the program below. `String parameterOne` is the parameter of the constructor. The name of the constructor has to match the name of the class.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22YbjkyXrRMJwD%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ConstructorsExample.java%22%3A%7B%22name%22%3A%22ConstructorsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ConstructorsExample+%7B%5Cn++private+String+exampleVariable%3B%5Cn%5Cn++%2F%2F+this+is+the+Default+constructor+of+the+class%5Cn++%2F%2F+that+has+no+parameters%5Cn++public+ConstructorsExample%28%29%7B%5Cn++%7D%5Cn%5Cn++%2F%2F+this+is+the+constructor+of+the+class%5Cn++%2F%2F+that+takes+in+one+parameter%5Cn++public+ConstructorsExample%28String+parameterOne%29+%7B%5Cn++++%2F%2F+this+prints+exampleVariable%5Cn++++System.out.println%28parameterOne%29%3B%5Cn++%7D%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+this+will+be+explained+in+Unit+8%5Cn++++ConstructorsExample+constructorsExample+%3D+new+ConstructorsExample%28%5C%22Hello+World%21%5C%22%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nEach class has at least one constructor. In the case that the programmer does not write a constructor definition, Java will produce a default constructor for that class. The default constructor will only perform the following basics: allocate memory and initialize instance variables. If we want more to happen when an object is created, we can include one or more constructors in the class definition. When declaring a constructor, remember that a constructor does not have any return type, not even `void`, so the header of the constructor should look something like this: `public ClassName()`.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888132"}},"updated_at":{"$date":{"$numberLong":"1537610888132"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"b722cc24ac7941e58e2a7541b5faf95d_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614887803831469362267"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Methods are another section of the class we will explore. In addition to the main method in the class, more methods that have other functions can exist in the project.\n\nMethods are constructed out of statements which are placed between brackets like these \"{ }\" as shown below:\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22pekvknePeSGW%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22MethodExample.java%22%3A%7B%22name%22%3A%22MethodExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+MethodExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+5%3B%5Cn++public+static+int+exampleVariableTwo+%3D+10%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+this+prints+the+sum+of+exampleVariableOne+and+exampleVariableTwo%5Cn++++System.out.println%28add%28exampleVariableOne%2C+exampleVariableTwo%29%29%3B%5Cn++%7D%5Cn%5Cn++%2F%2F+this+method+takes+in+two+parameters+and%5Cn++%2F%2F+returns+the+sum+of+the+two+parameters%5Cn++public+static+int+add%28int+parameterOne%2C+int+parameterTwo%29+%7B%5Cn++++return+parameterOne+%2B+parameterTwo%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nWe can identify a method name because it is always followed by parentheses, which may also enclose parameters. The general form of the method header will be similar to what you see below:\n\n{visibility}{returnType}{functionName}(type parameterName)\n\nThe items that must be written in a method header are \"returnType\", \"functionName\" and \"parameterName\", because \"visibility\" has a default value. In the above example, the return type `void` signifies that the method does not return anything, which is why we do not see a statement that says `return`. As we see in the method above, a return value can be printed so that it appears on the console. This ensures that we are not only calling the result, but we are also able to view it and check it to make sure the program is running correctly. When we need more than one parameter, they are written one after the other, separated by commas.\n\nAn extremely important attribute of parameters to keep in mind is that all parameters are just copies of the original value or address. Regardless of what we do to the parameter inside the method, the original value will not change. The only way to change it is to assign the original value in the original parameter to something else. To explain using our example, changing the value of `parameterOne` does not affect the value of `exampleVariableOne`.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888145"}},"updated_at":{"$date":{"$numberLong":"1537610888145"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"7517e2ea7d634feb9a29ed89381103c9_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba61488780383146936226d"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"A new Java programmer must master the concept of \"indentation\" in Java. Indentation is used to make our code readable to other users, easier to edit, display how the braces match up and show the logic of the program in an organized fashion. Please look at the example below to see how indentation of the if-else statement makes it easy to see what is happening. Keep in mind, we will cover if-else statements later in the course.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22KoWLfPPmAdxu%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22IndentationExample.java%22%3A%7B%22name%22%3A%22IndentationExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+IndentationExample+%7B%5Cn%5Cn++%2F%2F+standard+indenting+increases+by+2+spaces+as+shown+below%5Cn++%2F%2F+braces+are+used+even+when+optional%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+neat+indenting%3A%5Cn++++%2F%2F+if-else+will+be+explained+in+Unit+5%5Cn++++if+%28true%29+%7B%5Cn++++++System.out.println%28%5C%22True%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22False%5C%22%29%3B%5Cn++++%7D%5Cn%5Cn++++%2F%2F+no+indenting%3A%5Cn++++if%28true%29++++++++++System.out.println%28%5C%22True%5C%22%29%3B%5Cn++++else++++System.out.println%28%5C%22False%5C%22%29%3B%5Cn%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe goal of indentation is to show the logic of our program. Keeping indentation consistent throughout a program is essential. For statements inside a left and right brace, increase the indenting by two spaces. When another pair of braces is nested inside those braces, increase the indentation by another two spaces. It is a good idea to line up the braces vertically. Keep in mind that the function of indentation is to make the program more readable and understandable, which saves an immense amount of time when editing or refining your code.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888155"}},"updated_at":{"$date":{"$numberLong":"1537610888155"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"ccba3e67d0af48b6b96ebb386977e8b8_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614887803831469362273"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"When you begin writing your own Java programs, there are some naming conventions that are strongly suggested. These naming conventions make it easier to understand what the program does, gives information about the identifiers and helps you understand the code. Please take a look at the code below for some examples of naming conventions for identifiers.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22ZCHvRtbMggAR%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22NamingConventionsExample.java%22%3A%7B%22name%22%3A%22NamingConventionsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cn%2F%2F+class+names+are+written+in+UpperCamelCase%5Cn%2F%2F+class+names+are+usually+nouns+or+noun+phrases.%5Cnpublic+class+NamingConventionsExample+%7B%5Cn%5Cn++%2F%2F+constant+names+are+written+with+all+upper+case%5Cn++%2F%2F+letters+with+words+separated+by+underscores%5Cn++public+static+final+int+EXAMPLE_VARIABLE_ONE+%3D+10%3B%5Cn++%2F%2F+non-constant+field+names+are+written+with+lowerCamelCase%5Cn++%2F%2F+variable+names+must+be+specific+and+meaningful%5Cn++public+static+int+exampleVariableTwo+%3D+5%3B%5Cn++%2F%2F+names+like+%5C%22string1%2C+myarray1%2C+no_1%5C%22+are+not+acceptable%5Cn++%2F%2F+as+variable+names+because+they+are+are+not+specific%5Cn++%2F%2F+and+can+cause+confusion+like+the+variable+below%3A%5Cn++public+static+String+string+%3D+%5C%22String%5C%22%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+local+variable+names+are+written+in+lowerCamelCase%5Cn++++int+exampleVariableThree+%3D+15%3B%5Cn++++printGreeting%28%5C%22Hello+World%21%5C%22%29%3B%5Cn++%7D%5Cn%5Cn++%2F%2F+method+names+are+written+in+lowerCamelCase%5Cn++%2F%2F+method+names+are+usually+verbs+or+verb+phrase%5Cn++%2F%2F+parameters+names+are+written+in+lowerCamelCase%5Cn++public+static+void+printGreeting%28String+parameterOne%29%7B%5Cn++++System.out.println%28parameterOne%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nLet's review three common naming conventions of which examples can be found in the code. Moving forward, let us remember and implement the following naming conventions.\n\n1. lowerCamelCase:<br>\n\n     Name is formed with multiple words that are joined together as a single word, with the first letter of each of the multiple words (except the first one) capitalized. Used for method names, non-constant field names, and parameter names.\n\n2. UpperCamelCase:<br>\n\n     Name is formed of multiple words that are joined together as a single word, with the first letter of each of the multiple words capitalized. Used for class names.\n\n3. CONSTANT\\_CASE:<br>\n\n     Name is formed with every letter of each word in uppercase letters, with words separated by underscores. Only used for constants. (We will learn about constants later in the course.)\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888162"}},"updated_at":{"$date":{"$numberLong":"1537610888162"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"6c55fdd8302a4f18b49337fa758fd078_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614887803831469362279"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"In Java, access control tells the program how much access a variable, class or method is given. Access control is important because it affects visibility based on different access control types. You may have noticed in prior topics the use of words such as `public` and `private`, which are examples of access control types. Take a look at the examples below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22WgYRGraUHvqh%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22AccessControlExample.java%22%3A%7B%22name%22%3A%22AccessControlExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+AccessControlExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+This+will+be+explained+in+Unit+8%5Cn++++AccessControlTest+accessControlTest+%3D+new+AccessControlTest%28%29%3B%5Cn++++System.out.println%28accessControlTest.exampleVariableOne%29%3B%5Cn++++System.out.println%28accessControlTest.exampleVariableTwo%29%3B%5Cn++++%2F%2F+accessControlTest.exampleVariableThree+will+cause+an+error+because%5Cn++++%2F%2F+exampleVariableThree+is+private%5Cn++%7D%5Cn%7D%22%7D%2C%22AccessControlTest.java%22%3A%7B%22name%22%3A%22AccessControlTest.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+AccessControlTest+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+5%3B%5Cn++public+static+int+exampleVariableTwo+%3D+10%3B%5Cn++private+static+int+exampleVariableThree+%3D+100%3B%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nWhen a variable's or method's access is not specified `public` or `private`, it will have default visibility. Default visibility is packaged private; it is visible to all classes in the same package. It is best to declare members `public` if that is the true intent. If an instance variable is declared `private`, it can only be used by the methods of that class. In the preceding example, `AccessControlTest` has its own `private` variable that is not accessible by the main method of the `AccessControlExample` class.\n\nAccess control allows other users to use your program without ever accessing, altering, or even knowing that the private variables or methods exist.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888180"}},"updated_at":{"$date":{"$numberLong":"1537610888180"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"c7b8c4efb69c42219f2860f3558f6135_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba61488780383146936227f"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Let's examine the print method, which is essential when you want to print text on the console. This method sends anything inside the parenthesis to the output stream, which is why the characters appear on the console. Please study the examples below to see two different ways of printing on the console.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22DkvrnLbfOrJS%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22PrintOutputExample.java%22%3A%7B%22name%22%3A%22PrintOutputExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+PrintOutputExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+this+prints+Hello%21%2C+Hello+World%21+on+the+same+line%5Cn++++%2F%2F+and+Hello+Friends%21+on+a+different+line%5Cn++++System.out.print%28%5C%22Hello%21%5C%22%29%3B%5Cn++++System.out.println%28%5C%22Hello+World%21%5C%22%29%3B%5Cn++++System.out.println%28%5C%22Hello+Friends%21%5C%22%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\n`System.out.print()` prints one line on the console and `System.out.println()` prints on the console followed by a new line. The \"System\" part of the statement accesses all of the methods and classes associated with the `System` class, which is automatically imported. The \"out\" part of the statement accesses all of the methods and classes related to output. The \"print\" or \"println\" is a method contained inside `System.out`. The statement we want to print out on the console must be enclosed by double quotation marks.\n\nPrinting on the console is another method to debug your source code as we are able to check the value of a variable to see if it works as intended.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888197"}},"updated_at":{"$date":{"$numberLong":"1537610888197"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"b17ff28d5c204c259d4ed8499472c228_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614887803831469362284"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"There are three types of errors that programmers frequently encounter. Let's examine the first one, runtime error or runtime exceptions, by looking at the example below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22jxrhTDOKLHJo%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22RunTimeErrorExample.java%22%3A%7B%22name%22%3A%22RunTimeErrorExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+RunTimeErrorExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+5%3B%5Cn++public+static+int+exampleVariableTwo+%3D+exampleVariableOne%2F0%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+this+creates+an+error+because+numbers+cannot+be+divided+by+zero%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nWhen we run the code above, an error occurs and nothing is printed out onto the console. Runtime errors happen after the code is compiled and when the program runs the code. Because these errors cause the program to crash, they are hard to track down. In these cases, using comments to group off parts of the source code to narrow down the location of the error is a useful approach.\n\nIn the example above, we encounter a runtime error because the program is unable to divide by zero. In these types of errors, the program reaches something illegal, something it is unable to understand, or if it's unable to find the code.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888204"}},"updated_at":{"$date":{"$numberLong":"1537610888204"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"8604d7d7f3f74568aa03498a4568090e_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614887803831469362289"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The second of the common errors we will examine is a logic error. Please see below for an example.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22jPLOZATSFljL%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22LogicErrorExample.java%22%3A%7B%22name%22%3A%22LogicErrorExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+LogicErrorExample+%7B%5Cn++public+static+int+exampleVariableOne+%3D+5%3B%5Cn++public+static+int+exampleVariableTwo+%3D+10%3B%5Cn++public+static+int+exampleVariableThree+%3D+exampleVariableTwo+%2A+exampleVariableOne%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+this+prints+the+wrong+number+because+the+symbol+%27%2A%27+is+used+instead+of+the%5Cn++++%2F%2F+%27%2F%27%5Cn++++System.out.println%28%5C%2210+divided+by+5+is+%5C%22+%2B+exampleVariableThree%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe program prints an unexpected value because one of the signs is incorrect in the code. We are looking for the output of 2 but instead see 50 because the multiplication sign is used instead of the division sign. This may seem like a small and avoidable error, but could be missed and difficult to find when dealing with thousands of lines of code and receiving an incorrect output.\n\nLogic errors occur after the program compiles and runs. It can be indicative of a design flaw in the program. Here are some logic errors you may run into: multiplying instead of dividing, adding instead of subtracting and vice versa, or displaying the wrong message. If the program runs and compiles, but the output is incorrect or unexpected, it is a sure sign you have a logic error. Printing different variables and validating their values is one useful way to troubleshoot and solve logic errors.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888211"}},"updated_at":{"$date":{"$numberLong":"1537610888211"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"5144fb287c6045e5b9c118e403c0cca6_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba61488780383146936228f"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Let's take a look at the example below, which will show us the last of the three most common errors, a Syntax Error.\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22HMSjJduiaCHP%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22SyntaxErrorExample.java%22%3A%7B%22name%22%3A%22SyntaxErrorExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+SyntaxErrorExample+%7B%5Cn++++%2F%2A%5Cn++++%2F%2F+public+cannot+be+capitalized%5Cn++++%2F%2F+ints+should+be+int%5Cn++++Public+static+ints+exampleVariableOne+%3D+5%3B%5Cn%5Cn++++%2F%2F+static+cannot+be+capitalized%5Cn++++public+Static+void+main+%28String%5B%5D+args%29%7B%5Cn++++++++%2F%2F+printline+should+be+println%5Cn++++++++System.out.printline%28%5C%22Value+of+exampleVariableOne+is+%5C%22+%2B+exampleVariableOne%29%3B%5Cn++++%7D%5Cn++++%2A%2F%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+5%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28%5C%22Value+of+exampleVariableOne+is+%5C%22+%2B+exampleVariableOne%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe code above shows a different set of variables and main method than the one outside the comments. The code inside the comments has syntax errors and would not compile if the comments were removed. A syntax error is similar to a grammatical error in the language of programming. One of the most common syntax errors is the misuse of Java reserved words. The program will compile but will then throw an error when seeing misformatted reserved words. Other syntax errors include misspelled variable and function names, missing semicolons, and mis-matching parentheses.\n\nSyntax errors are among the easiest to resolve as most IDE tools we use to write Java point out syntax errors as you code.\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888222"}},"updated_at":{"$date":{"$numberLong":"1537610888222"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"42a42902e11d4525b19430785e694eda_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba61488780383146936229e"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Every variable must have a data type assigned to it. The following code depicts all eight primitive data types and shows how a variable may be associated to it.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22cunmVrzlolIg%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22DataTypesExample.java%22%3A%7B%22name%22%3A%22DataTypesExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+DataTypesExample+%7B%5Cn%5Cn++%2F%2F+this+declares+and+initializes+all+eight+primitive+data+types%5Cn++public+static+int+exampleVariableOne+%3D+5%3B%5Cn++public+static+boolean+exampleVariableTwo+%3D+true%3B%5Cn++public+static+char+exampleVariableThree+%3D+%27c%27%3B%5Cn++public+static+byte+exampleVariableFour+%3D+20%3B%5Cn++public+static+short+exampleVariableFive+%3D+300%3B%5Cn++public+static+long+exampleVariableSix+%3D+300000000%3B%5Cn++public+static+float+exampleVariableSeven+%3D+3.5f%3B%5Cn++public+static+double+exampleVariableEight+%3D+3.141519%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+this+prints+all+eight+primitive+data+types%5Cn++++System.out.println%28%5C%22Integer%3A+%5C%22+%2B+exampleVariableOne%29%3B%5Cn++++System.out.println%28%5C%22Boolean%3A+%5C%22+%2B+exampleVariableTwo%29%3B%5Cn++++System.out.println%28%5C%22Character%3A+%5C%22+%2B+exampleVariableThree%29%3B%5Cn++++System.out.println%28%5C%22Byte%3A+%5C%22+%2B+exampleVariableFour%29%3B%5Cn++++System.out.println%28%5C%22Short%3A+%5C%22+%2B+exampleVariableFive%29%3B%5Cn++++System.out.println%28%5C%22Long%3A+%5C%22+%2B+exampleVariableSix%29%3B%5Cn++++System.out.println%28%5C%22Float%3A+%5C%22+%2B+exampleVariableSeven%29%3B%5Cn++++System.out.println%28%5C%22Double%3A+%5C%22+%2B+exampleVariableEight%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe eight primitive data types, `byte`, `short`, `int`, `float`, `double`, `char` and `boolean` will be covered more in depth later. Let's start by exploring what a data type is. Data types enable us to tell the program what kind of data we are trying to represent and use. Always keep in mind that data type names are extremely case sensitive. \"Int\" is not the same as \"int\". The primitive, or fundamental, data types can function as building blocks. There are also larger, non-primitive data types that are made up of smaller components. We will dive into data types by learning the eight primitive data types first.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888249"}},"updated_at":{"$date":{"$numberLong":"1537610888249"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"8bf3a87d9d3e43eeafba136661cd1155_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693622a3"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Boolean is a primitive data type that is used to represent a single true/false value. A boolean value can only hold one of two values, true or false. Other words such as \"yes\" or \"no\" will not compile and will result in a syntax error. The code below illustrates how boolean variables are declared and used.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22RdyXkDwNTKlm%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22BooleanDataTypeExample.java%22%3A%7B%22name%22%3A%22BooleanDataTypeExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+BooleanDataTypeExample+%7B%5Cn%5Cn++%2F%2F+booleans+can+only+be+true+or+false%5Cn++public+static+boolean+exampleVariableOne+%3D+true%3B%5Cn++public+static+boolean+exampleVariableTwo+%3D+false%3B%5Cn++public+static+boolean+exampleVariableThree+%3D+5+%5Cu003e+4%3B%5Cn++public+static+boolean+exampleVariableFour+%3D+5+%5Cu003c+4%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++++System.out.println%28exampleVariableFour%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nWe see in the code above that boolean values don't necessarily have to come out \"true\". For example \"7>9\" will be false, while \"7<9\" will be true. Boolean is extremely useful because it allows particular statements and methods to be executed only in certain situations based on whether the boolean statement is true or false. For this reason, it is one of the most important primitive data types.\n\nLater on, we will examine comparing boolean values to each other and the role that plays with control flow statements.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888260"}},"updated_at":{"$date":{"$numberLong":"1537610888260"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"d3b317c35585401d98fd1f2475f8ddc6_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693622a8"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The next datatype we will look at is character, which is represented with `char` in Java. A `char` can almost represent any character in any language. To see a full list of potential characters, look up the Unicode character table. View the code below for an example of how to declare and use the character datatype.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22zrGbXlywtJiC%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22CharDataTypeExample.java%22%3A%7B%22name%22%3A%22CharDataTypeExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+CharDataTypeExample+%7B%5Cn%5Cn++%2F%2F+char+can+be+any+one+character%2C+including+spaces%5Cn++public+static+char+exampleVariableOne+%3D+%27c%27%3B%5Cn++public+static+char+exampleVariableTwo+%3D+%27V%27%3B%5Cn++public+static+char+exampleVariableThree+%3D+%27+%27%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree+%2B+%5C%22Hello+World%21%5C%22%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\n`char` holds a single character with an apostrophe on each side. Notice that double quotation marks will not work for characters. Keep in mind that upper and lower case characters are represented by a different pattern. Additionally, special characters such as punctuation and spaces can be represented by the `char` data type as well.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888270"}},"updated_at":{"$date":{"$numberLong":"1537610888270"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"c28c63a703ef4677bc4341e4b6673ad6_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693622ad"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"One of the most commonly used primitive data types is integer, or in Java, `int`, which can represent any whole number between -2,147,483,648 and 2,147,483,647. View the example below to learn how to declare and use an `int` variable.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22THGFHDSWhadU%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22IntegerDataTypeExample.java%22%3A%7B%22name%22%3A%22IntegerDataTypeExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+IntegerDataTypeExample+%7B%5Cn%5Cn++%2F%2F+int+can+be+any+integer+between+-2147483648+and+2147483647%5Cn++public+static+int+exampleVariableOne+%3D+27%3B%5Cn++public+static+int+exampleVariableTwo+%3D+-27%3B%5Cn++public+static+int+exampleVariableThree+%3D+100000%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe integer data type is efficient and versatile; it should be used for any integer math. Notice that `int` must be a whole number. In case you were wondering, 0 is also a whole number. Assigning `int` to any non-whole number would cause an error.\n\nIn addition to what we see in the example above, we are also able to assign a value to an `int` by performing a mathematical operation with two numbers, such as `int varOne = 10+10;` will assign 20 to `varOne`. As with the other data types we have covered, we are using '=' so that the identifier points to a value it can store.\n\nThe negative aspect of the integer data type is if there are any equations that try to create a non-whole number with a decimal out of integer variables, the program will fail because `int` only allows whole numbers.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888280"}},"updated_at":{"$date":{"$numberLong":"1537610888280"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"1247b40aaa0c4edf9243c34414dd1fe9_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693622b2"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Let's explore the next primitive data type, `float`, or single-precision floating point. Floating point literals have a decimal point, but no commas that function as thousand separators. Please take a look at the code below to see how `float` variables are declared and used.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22MRheqplQFyvG%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22FloatDataTypeExample.java%22%3A%7B%22name%22%3A%22FloatDataTypeExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+FloatDataTypeExample+%7B%5Cn%5Cn++%2F%2F+float+can+be+any+rational+number+between+-3.4E%2B38f+and+3.4E%2B38f%5Cn++public+static+float+exampleVariableOne+%3D+0.15f%3B%5Cn++public+static+float+exampleVariableTwo+%3D+-0.15f%3B%5Cn++public+static+float+exampleVariableThree+%3D+3.4E%2B10f%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\n`float` variables can be represented with a lowercase 'f' OR uppercase 'F' at the end, which asks the program specifically for a single-precision float literal which deals with a 32 bit floating point. Even without the 'f' or 'F' at the end the program, it assumes a `float` is declared and initialized.\n\nThis datatype is used when dealing with decimals. As said in the comments of the code above, `float` can take on a range of values. However, `double` is preferred when we want a more precise answer as `double` deals with 64 bit numbers. The `float` primitive data type is NOT used for precise values like currency because the data type is sometimes approximate and rounded.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888289"}},"updated_at":{"$date":{"$numberLong":"1537610888289"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"a7c5431bd9d345429a15983a31ac69a6_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693622b7"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Like the `int` primitive data type, `double` is also very commonly used. Most of the time, you will use `int` for whole numbers and `double` for numbers with decimal points (rational or irrational). Double is also known as double-precision floating point. This means it has twice as many bits as `float`, meaning a `double` is more accurate than a `float`. Let's review the code below to see how `double` variables are declared and used.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22hwcGaHYXJgSj%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22DoubleDataTypeExample.java%22%3A%7B%22name%22%3A%22DoubleDataTypeExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+DoubleDataTypeExample+%7B%5Cn%5Cn++%2F%2F+double+is+any+real+number+between+-1.7E%2B308+and+1.7E%2B308%5Cn++public+static+double+exampleVariableOne+%3D+3.1415%3B%5Cn++public+static+double+exampleVariableTwo+%3D+-0.002%3B%5Cn++public+static+double+exampleVariableThree+%3D+1.7E%2B250%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nAs with floats, doubles may have the character 'd' or 'D' at the end of the number to tell the program that the number is a `double`. Similar to a `float` datatype, the default value for `double` is \"0.0\". Doubles have one of the largest ranges of numbers compared to the other primitive data types.\n\nAlthough a `double` is more accurate than `float`, it is still not recommended for currency as it is not precise enough to calculate strict numbers of this kind.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888302"}},"updated_at":{"$date":{"$numberLong":"1537610888302"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"27d7a50c6894433380abf18dd42926e6_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693622bc"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"One of the least used primitive data types is `byte` because `byte` has a limited range of numbers (-128 to 127) compared to `int`. Unless the programmer are a 100% sure that the values will not exceed this limited range, it is best to use `int`. Nevertheless, let's take a look at how `byte` variables are declared and used below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22QTmSXeHuXjBI%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22BytesDataTypeExample.java%22%3A%7B%22name%22%3A%22BytesDataTypeExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+BytesDataTypeExample+%7B%5Cn%5Cn++%2F%2F+byte+can+be+any+integer+between+-128+and+127%5Cn++public+static+byte+exampleVariableOne+%3D+25%3B%5Cn++public+static+byte+exampleVariableTwo+%3D+-25%3B%5Cn++public+static+byte+exampleVariableThree+%3D+127%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe byte datatype takes up about four times less space than an `int`, but is not used for calculations and other methods. The byte datatype is useful when dealing with raw binary data for compatibility reasons. Similarly to `float`, `int` and the other integer related data types, the default value for `byte` is 0. The byte datatype can only hold whole, non-decimal numbers.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888314"}},"updated_at":{"$date":{"$numberLong":"1537610888314"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"fd561471d61648b5a370997152975446_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693622c1"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The `short` primitive datatype is another less commonly used integer-related datatype due to its limited range of -32,768 to 32,767. Let's glance at the example below showing the declaration and use of `short`.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22SrLnyXFGHtub%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ShortDataTypeExample.java%22%3A%7B%22name%22%3A%22ShortDataTypeExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ShortDataTypeExample+%7B%5Cn%5Cn++%2F%2F+short+can+be+any+integer+between+-32768+and+32767%5Cn++public+static+short+exampleVariableOne+%3D+100%3B%5Cn++public+static+short+exampleVariableTwo+%3D+-100%3B%5Cn++public+static+short+exampleVariableThree+%3D+0%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\n`short` functions similarly to `int` as it can only hold whole, non-decimal numbers. This datatype was commonly used when 16-bit computers were used, and are rarely used now as `int` has pretty much taken its place. However, `short` takes up about half the space of an `int`, so in a specific case when you are dealing with a large list of whole numbers, you may chose to use `short` to save space. With that being said, we will just use `int` for most of our programs.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888327"}},"updated_at":{"$date":{"$numberLong":"1537610888327"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"1c040a31c07b4b2d8fddfa3c87caaa0b_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693622c6"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The next integer-related primitive datatype we will delve into is `long`, which is used more commonly than `byte` and `short` because the range for `long` is even greater than that of `int`. The `long` primitive data type can hold integers such as eight trillion. Please review the code below for an example of declaring and using `long` variables.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22CWMwqXkVzrvW%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22LongDataTypeExample.java%22%3A%7B%22name%22%3A%22LongDataTypeExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+LongDataTypeExample+%7B%5Cn%5Cn++%2F%2F+long+can+by+any+integer+between+-9%2C223%2C372%2C036%2C854%2C775%2C808+and+9%2C223%2C372%2C036%2C854%2C775%2C807%5Cn++public+static+long+exampleVariableOne+%3D+2147483647%3B%5Cn++public+static+long+exampleVariableTwo+%3D+2%3B%5Cn++%2F%2F+integers+bigger+than+2147483647+cannot+exist+in+the+code%5Cn++%2F%2F+and+must+be+parsed+from+a+String+value%5Cn++%2F%2F+this+will+be+explained+in+Unit+8%5Cn++public+static+long+exampleVariableThree+%3D+Long.parseLong%28%5C%229223372036854775807%5C%22%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThis example takes us through parsing a `long` variable from a `String` because the value is too big to write in the program. We will look more closely at this functionality in later sections. Similarly to what we have seen before with declaration of primitive data types, the addition of an 'l' or 'L' at the end of the line informs the program that the value is a `long`.\n\nAlthough `long` holds twice the memory of `int`, it is an extremely useful data type when working with astronomically large whole integers such as the weight of the earth or the speed of light and sound. Similar to `int`, `long` will always be a whole, non-decimal number.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888336"}},"updated_at":{"$date":{"$numberLong":"1537610888336"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"085dd8e38be74f09b3594c6c4957e99e_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693622cc"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"When working with large numbers, scientific notation is exceptionally helpful. In scientific notation, the letter 'e' represents \"10 to the power of\". For example, \"1.51E+1\" means the same thing as \"1.51x10^1\". Let's review some examples of scientific notation below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22oOoIbyRGPUCQ%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ScientificNotationExample.java%22%3A%7B%22name%22%3A%22ScientificNotationExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ScientificNotationExample+%7B%5Cn%5Cn++public+static+double+exampleVariableOne+%3D+1E%2B3%3B%5Cn++public+static+double+exampleVariableTwo+%3D+1E%2B12%3B%5Cn++public+static+double+exampleVariableThree+%3D+1E-4%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nIn the section on the `long` datatype, we discussed the difficulty of writing very large numbers. Scientific notation solves that problem. It can also be used to represent small numbers with many decimal places. The format of scientific notation in Java is exactly the same as you have learned and used in science and math classes. Remember that an uppercase 'E' or lowercase 'e' can be used to represent \"10 to the power of\". Scientific notation can be printed as output on the console if it passes a certain number. Using `System.out.println(exampleVariableOne);` as an example, smaller numbers will still read out \"1000\" instead of \"1E+3\".\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888345"}},"updated_at":{"$date":{"$numberLong":"1537610888345"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"74388a53435d496f94b2bfd6a9b140d3_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693622d2"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Casting is the action of converting between two different data types such as converting an `int` to a `double` and vice versa. Examine the code below for examples of casting.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22wPhgUBzhAPvU%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22CastingExample.java%22%3A%7B%22name%22%3A%22CastingExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+CastingExample+%7B%5Cn%5Cn++%2F%2F+this+converts+15.23+into+an+integer%5Cn++public+static+int+exampleVariableOne+%3D+%28int%29+15.23%3B%5Cn++public+static+double+exampleVariableTwo+%3D+exampleVariableOne%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nWe just converted the `double` value 15.23 into an integer, which left only the whole number and the decimal places to be cut off. There is no rounding, it just ignores the numbers after the decimal point during casting. When you convert an `int` to a `double`, a decimal point will be added to match with the structure of a `double`. For example, `double varOne = (double) 15;` assigns 15.0 to `varOne`.\n\nEven though it is possible to convert an `int` to a `double` without casting, it is best practice to always use casting for precision and thorough logic. Also, be careful with the loss of precision when converting data types. i.e. losing decimal points is losing precision.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888354"}},"updated_at":{"$date":{"$numberLong":"1537610888354"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"b371aa9ae0a74fae83d47e0f236fed10_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693622d8"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Variables that are declared inside a method are called local variables because they can only be utilized and referenced in the method itself. Take a look at the code below showing the `add()` method with a local variable inside.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22UhULUeTNJMWK%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22LocalVariableExample.java%22%3A%7B%22name%22%3A%22LocalVariableExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+LocalVariableExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+10%3B%5Cn++public+static+int+exampleVariableTwo+%3D+6%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28add%28exampleVariableOne%2C+exampleVariableTwo%29%29%3B%5Cn++++%2F%2F+System.out.println%28exampleVariableThree%29+will+cause+an+error%5Cn++++%2F%2F+because+exampleVariableThree+is+a+local+variable%5Cn++%7D%5Cn%5Cn++public+static+int+add%28int+x%2C+int+y%29+%7B%5Cn++++%2F%2F+this+is+a+local+variable%5Cn++++int+exampleVariableThree+%3D+x+%2B+y%3B%5Cn++++return+exampleVariableThree%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nIn the example, we cannot print `exampleVariableThree` inside the main method because it exists only as a local variable in the `add()` method. This is where we revisit the concept of access control. The local variable is only active and returns within the method in which it was declared. A local variable is not visible to any other method besides the one in which it exists. If you have a variable that will be used in multiple classes, you must make sure it is outside the method. If you are referencing a local variable outside of the method it exists in, you will get a compile-time error due to access control and visibility.\n\nIn cases where you will only use a variable in one method, keep it local by keeping it inside the method so that no other methods or classes can see or make any changes to it and alter your desired outcome.\n\nKeep in mind that the parameters in a method are examples of and function as local variables.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888368"}},"updated_at":{"$date":{"$numberLong":"1537610888368"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"7051c837a45e44f5bd9ee110aaed0942_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693622de"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Field variables are variables that are declared as a member of a class or declared outside any method or constructor within the class. Please review the example below showing two field variables.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22OrUCRGmBveoG%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22FieldVariableExample.java%22%3A%7B%22name%22%3A%22FieldVariableExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+FieldVariableExample+%7B%5Cn%5Cn++%2F%2F+these+are+field+variables%5Cn++public+static+int+exampleVariableOne+%3D+10%3B%5Cn++public+static+int+exampleVariableTwo+%3D+6%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28add%28exampleVariableOne%2C+exampleVariableTwo%29%29%3B%5Cn++++multiply%28%29%3B%5Cn++%7D%5Cn%5Cn++public+static+int+add%28int+x%2C+int+y%29+%7B%5Cn++++%2F%2F+this+is+a+local+variable%5Cn++++int+exampleVariableThree+%3D+x+%2B+y%3B%5Cn++++return+exampleVariableThree%3B%5Cn++%7D%5Cn%5Cn++public+static+void+multiply%28%29+%7B%5Cn++++System.out.println%28exampleVariableOne+%2A+exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nField variables, as opposed to local variables, can be called in any of the methods that exist in the same class. A field variable is available as long as the instance it belongs to is active. The class is active when any method in it is used. Therefore if the field variable belongs to the class, it can be used within any of the methods inside that class.\n\nThere are two categories of field variables: instance variables and class variables. The code we reviewed above shows examples of two class variables. We see this because they are declared with the `static` modifier. We will discuss the significance of `static` as we move further along in our courses.\n\nInstance variables are non-static fields and therefore declared without the Java reserved word `static`. All of these values are unique to each instance of a class. This will be explained further when we study the concept of objects.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888381"}},"updated_at":{"$date":{"$numberLong":"1537610888381"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"b4d918da5c684073a58e45f5ac068bde_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693622e4"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"An arithmetic operator is a mathematical equation, similar to what we have seen in algebra, that takes integers and calculates them in a certain way. Java contains a set of basic common arithmetic operators that can be used to perform a number of different calculations. Take a look at the five operators we will examine.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22GKWIhgqbxjYn%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ArithmeticOperatorExample.java%22%3A%7B%22name%22%3A%22ArithmeticOperatorExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ArithmeticOperatorExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+15%3B%5Cn++public+static+int+exampleVariableTwo+%3D+2%3B%5Cn++public+static+int+exampleVariableFive+%3D+exampleVariableOne+%2B+exampleVariableTwo%3B%5Cn++public+static+int+exampleVariableSix+%3D+exampleVariableOne+-+exampleVariableTwo%3B%5Cn++public+static+int+exampleVariableSeven+%3D+exampleVariableOne+%2A+exampleVariableTwo%3B%5Cn++public+static+int+exampleVariableEight+%3D+exampleVariableOne+%2F+exampleVariableTwo%3B%5Cn++public+static+int+exampleVariableNine+%3D+exampleVariableOne+%25+exampleVariableTwo%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableFive%29%3B%5Cn++++System.out.println%28exampleVariableSix%29%3B%5Cn++++System.out.println%28exampleVariableSeven%29%3B%5Cn++++%2F%2F+This+will+not+print+7.5+because+exampleVariableEight+is+an+integer%5Cn++++System.out.println%28exampleVariableEight%29%3B%5Cn++++System.out.println%28exampleVariableNine%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nJust as we learned in math class, Java honors the order in which mathematical operations should be performed. Division, multiplication, modulus (%), followed by any addition and subtraction. A minor difference between math principles and Java is if we are dividing two integers, the Java answer will also be an integer, not a number with a decimal point, following the same rule of truncation we discussed earlier. Let's look at an example: the Java result for 15/2 will be 7, not 7.5.\n\nOne new operator to you may be the modulus operator, whose function returns the remainder of dividing the first number by the second number.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888395"}},"updated_at":{"$date":{"$numberLong":"1537610888395"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"f84e175d65884adaa21af014a9d25e91_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693622e6"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"A relational operator is an operator that tests or defines a relationship between two operands. These include numerical equality such as \"5 = 5\" and inequalities such as \"7<3\". Please take a look at the six relational operators that follow.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22pYAACRqAQyXZ%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22RelationalOperatorExample.java%22%3A%7B%22name%22%3A%22RelationalOperatorExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+RelationalOperatorExample+%7B%5Cn%5Cn++public+static+boolean+exampleVariableOne+%3D+10+%5Cu003c+15%3B%5Cn++public+static+boolean+exampleVariableTwo+%3D+10+%5Cu003e+15%3B%5Cn++public+static+boolean+exampleVariableThree+%3D+10+%5Cu003c%3D+10%3B%5Cn++public+static+boolean+exampleVariableFour+%3D+10+%5Cu003e%3D+15%3B%5Cn++public+static+boolean+exampleVariableFive+%3D+15+%3D%3D+10%3B%5Cn++public+static+boolean+exampleVariableSix+%3D+15+%21%3D+10%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++++System.out.println%28exampleVariableFour%29%3B%5Cn++++System.out.println%28exampleVariableFive%29%3B%5Cn++++System.out.println%28exampleVariableSix%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nAll of the operators above return a true or false result. The first four operators are recognizable and common. They work the same way as you learned in math class. Check the text below for an explanation of the operators functions.\n\n1. \\> Tests whether the first integer is greater than the second integer.\n2. < Tests whether the first integer is smaller than the second integer.\n3. \\>= Tests whether the first integer is greater than or equal to the second integer.\n4. <= Tests whether the first integer is less than or equal to the second integer.\n5. == Tests whether the first integer is equal to the second integer. <br>\n\nRemember that '=' cannot be used to compare two values because a solo '=' is used only for assigning values to variables as we saw previously\n6. != Tests whether the first integer is different from the second integer. <br>\n\nTherefore, a statement like `5 != 7` will return a result of \"true\".\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888398"}},"updated_at":{"$date":{"$numberLong":"1537610888398"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"86eb808fa6df4bfabddd9efe00e0f76d_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693622ec"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"An assignment operator functions to change the value that is stored inside a variable. In order for the operator to change a value, the variable must be declared beforehand. Also remember that we can declare a variable and assign it a value at the same time. Look at the code below for an example of the three assignment operators we will discuss: '=', \"+=\", and \"-=\".\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22mmXkXIwWNrbY%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22AssignmentStatementExample.java%22%3A%7B%22name%22%3A%22AssignmentStatementExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+AssignmentStatementExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+10%3B%5Cn++public+static+int+exampleVariableTwo+%3D+50%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++exampleVariableOne+%3D+exampleVariableOne+%2B+exampleVariableTwo%3B%5Cn++++exampleVariableTwo+%2B%3D+5%3B%5Cn++++exampleVariableTwo+-%3D+2%3B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nSomething to keep in mind when assigning values is that the calculation on the right side of the equal sign is completed before assigning the variable on the left with its new value. As we see in the code above, `exampleVariableOne` and `exampleVariableTwo` are added before being assigned to the new value of variable `exampleVariableOne`. This makes the new value for `exampleVariableOne` 60\\.\n\nThe \"+=\" and the \"-=\" functions add or subtract integers together before assigning them to the variable. Therefore, `exampleVariableTwo += 5;` is actually the same as the statement `exampleVariableTwo = exampleVariableTwo + 5;`. `exampleVariableTwo` increases by a value of 3 as a result of the program because it adds 5 and subtracts 2 before printing.\n\nKeep in mind that it is possible to also use \"\\*=\", \"/=\", or \"%=\" if you are comfortable with using these \"shortcut\" operators.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888415"}},"updated_at":{"$date":{"$numberLong":"1537610888415"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"352dceaa974b4ed8bfa94692d47a0d5a_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693622f2"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"An expression is a mixture of literals, operators, variable names, and parentheses used to calculate a value. Please keep in mind that in Java, the expression on the right side of the assignment statement is evaluated first. The expressions will look similar to regular mathematical expressions from math class. Please take a look at the expressions below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22bONWyYJLUrMq%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ExpressionsExample.java%22%3A%7B%22name%22%3A%22ExpressionsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ExpressionsExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+%28%287-4%29+%2A+%28-3%2F-1%29%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nExpressions can be written without using any spaces at all, but the use of one or more spaces to visually separate the parts without changing the meaning is useful for the programmer and reader.\n\nKeep in mind the discussion we had previously on division of integers. If the operands are integers, these operators will perform integer arithmetic. If one or both operands are floating points, the operators will perform floating point arithmetic. Any number with a decimal would result in a `double` or `float`. For integers, 5/2 results in 2. For floating point, 5.0/2.0 results in 2.5 and 5/2.0 results in 2.5.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888425"}},"updated_at":{"$date":{"$numberLong":"1537610888425"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"cdcd7692e6914549b185c45dff5bb9eb_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693622f8"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Mixed expressions are comprised of multiple sub expressions at once. This is not as rampant in Java as it is in advanced algebra courses, but it is essential to remember the rules and use them. Take a look at these two mixed expressions.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22AFfSlUyEnVWG%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22MixedExpressionsExample.java%22%3A%7B%22name%22%3A%22MixedExpressionsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+MixedExpressionsExample+%7B%5Cn%5Cn++%2F%2F+Keep+in+mind+that+1%2F3+%3D+0+because+both+1+and+3+are+integers%5Cn++public+static+double+exampleVariableOne+%3D+%28%281%2F3%2B7.5%29+%2F+2.5%29%3B%5Cn++public+static+int+exampleVariableTwo+%3D+%28%287%2F4+%2B+2%2F6%29+%2B+4%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nDo either of the results surprise you? Take a look at the details. Remember, if any of the operands are a floating point, the whole arithmetic operation becomes floating point. Also, parenthesis have the highest precedence in the order of operations and must be evaluated first. Let's rearrange the mixed expressions to the correct order of evaluation:\n\n(1/3+7.5) / 2.5 = (0+7.5) / 2.5 = (7.5) / 2.5 = 3.0 <br>\n\n(`exampleVariableOne` is a `double`, so the result is 3.0, not 3)\n\n(7/4 + 2/6) + 4 = (1 + 0) + 4 = 5\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888438"}},"updated_at":{"$date":{"$numberLong":"1537610888438"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"40790b3d65bc4f72ad3e6ce0a985655a_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693622fe"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Constants are variables that do not change. Constants include the Java reserved word `final`, stating that the value will not change in the program. Let's remember that constant variables follow a different naming convention than other variables, using capitals and separating words with an underscore. See the following example of two constants.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22zFNEJpWcYbMK%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ConstantsExample.java%22%3A%7B%22name%22%3A%22ConstantsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ConstantsExample+%7B%5Cn%5Cn++%2F%2F+variable+names+for+constants+are+capitalized+and+separated+by+underscores%5Cn++public+static+final+int+EXAMPLE_VARIABLE_ONE+%3D+1%3B%5Cn++public+static+final+double+EXAMPLE_VARIABLE_TWO+%3D+3.5%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+EXAMPLE_VARIABLE_1+%2B+1+will+cause+an+error+because%5Cn++++%2F%2F+EXAMPLE_VARIABLE_1+is+declared+final%5Cn++++System.out.println%28EXAMPLE_VARIABLE_ONE%29%3B%5Cn++++System.out.println%28EXAMPLE_VARIABLE_TWO%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nSince constants cannot be changed, a syntax error or a compile-time error will be thrown if a change is attempted to a variable with the reserved word `final`.\n\nOne advantage of using constants instead of numbers is that the source code would be easier to read and check for debugging. In addition, if a constant needs to change, the change only has to be made in one place, where it is initialized. The programmer does not have to look for every occurrence of the variable and change each one individually. Constants are a great way to keep track of variables you don't want to change in any way while running your code.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888451"}},"updated_at":{"$date":{"$numberLong":"1537610888451"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"057fa8d5b15b4e41b27869491982018d_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614887803831469362304"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The logical complement operator, also known as the NOT operator in Java, is represented by an exclamation mark '!'. This operator changes true values to false and false to true. This operator only works with `boolean`. Please review the example of the NOT operator and its function.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22YNiWLhZEeXuR%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22LogicalComplementExample.java%22%3A%7B%22name%22%3A%22LogicalComplementExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+LogicalComplementExample+%7B%5Cn%5Cn++public+static+boolean+exampleVariableOne+%3D+true%3B%5Cn++%2F%2F+The+character+%27%21%27+inverts+the+boolean+value+of+exampleVariableOne%5Cn++public+static+boolean+exampleVariableTwo+%3D+%21exampleVariableOne%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe value of the two boolean variables are different because one is the inverse of the other. The NOT operator changes the value of `exampleVariableOne` from true to false and assigns false to `exampleVariableTwo`.\n\nPlease remember to use brackets to section off the NOT operator so it works as intended. As we keep working in Java, especially with if statements, we will see uses for this operator surface as an alternative for writing long lines of code.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888459"}},"updated_at":{"$date":{"$numberLong":"1537610888459"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"ae29baf230d04d3dbe89392e08f848ef_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614887803831469362309"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The increment operator changes a variable by the value of one. Instead of writing `varOne = varOne + 1;` you can write `varOne++;` and it will do the same thing. Let's review an example of incrementing variables.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22IKuQVqluVLHP%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22IncrementExample.java%22%3A%7B%22name%22%3A%22IncrementExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+IncrementExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+10%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+Both+statements+adds+1+to+exampleVariableOne%5Cn++++exampleVariableOne%2B%2B%3B%5Cn++++%2B%2BexampleVariableOne%3B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThere are two ways to use the increment operator; prefix and postfix increment. The prefix increment looks like `++variablename;` while the postfix increment looks like `variablename++;`. Both of these operations add one to the value in the variable. The difference between the two is the order of how it works. If we use the \"++\" operator as a prefix like `++varOne;`, the value of `varOne` is incremented by one before the value of `varOne` is returned. If we use ++ operator as postfix like `varOne++;`, the original value of `varOne` is returned before `varOne` is incremented by one. This means that the original value of `varOne` is printed while the value increases by one after the print statement. It is essential to know the difference between the two types of incrementing even though we usually don't print these values. Incrementing is used heavily in loops, a topic we will examine later in the course.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888467"}},"updated_at":{"$date":{"$numberLong":"1537610888467"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"b3a56de522e544d8bcd28742a6a7df2d_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba61488780383146936230e"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The decrement operator functions similarly to the increment operator. The only difference is that the decrement operator decreases a value by one. This means we can write `varOne--;` instead of writing `varOne = varOne - 1;`. Let's take a look at these decrementing variables in the code below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22RQXFTRcRljHC%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22DecrementExample.java%22%3A%7B%22name%22%3A%22DecrementExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+DecrementExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+10%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+Both+statements+subtract+1+from+exampleVariableOne%5Cn++++exampleVariableOne--%3B%5Cn++++--exampleVariableOne%3B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nLike the increment operator, there are two different ways to use the decrement operator called prefix and postfix decrement. The prefix decrement looks like `--variablename;` while the postfix increment looks like `variablename--;`. Both of these subtract one to the value in the variable. `--varOne;` decreases the value of varOne by one before returning the value of `varOne`. On the other hand, `varOne--;` returns the original value of `varOne` before decreasing the value of `varOne` by one. It is unlikely that we will print these results, but it is essential to know the difference between the functionality as it is commonly used in loops. Additionally, these operators will reduce the amount of code the programmer has to write.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888475"}},"updated_at":{"$date":{"$numberLong":"1537610888475"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"048e739651024e0499aaf42827fab434_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614887803831469362314"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The Java `Math` class contains all the familiar mathematical functions found on an electronic calculators, such as sine, log, and square root and more. For the most part, the functions use datatype `double` as a parameter and returns a `double` value. Let's take a look at a few of the methods and fields in the `Math` class.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22YPbRVnGePqAF%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22MathClassExample.java%22%3A%7B%22name%22%3A%22MathClassExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+MathClassExample+%7B%5Cn%5Cn++public+static+double+exampleVariableOne+%3D+Math.PI%3B%5Cn++%2F%2F+Methods+will+be+explained+later+this+unit%5Cn++public+static+double+exampleVariableTwo+%3D+Math.pow%2810%2C+2%29%3B%5Cn++public+static+double+exampleVariableThree+%3D+Math.sqrt%28exampleVariableTwo%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nWe will go into further detail about the methods of the `Math` class later on, so let's explore `Math.PI`, one of the two fields of the `Math` class. This field represents the value of pi. A dot is used after typing \"Math\" to access the field and the method inside the `Math` class. You have to check the input and output type of the methods inside the `Math` class to use them correctly without throwing errors. To avoid syntax errors, the method and field names have to match the names written in the Java documentation for the `Math` class. You do not have to import the `Math` class as it is already part of the `java.lang` package.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888527"}},"updated_at":{"$date":{"$numberLong":"1537610888527"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"34827dcaf15b4a0a9c9eb6d4b51d6cdf_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614887803831469362319"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The absolute value method in the `Math` class returns the absolute value of an `int` or `double`. Java offers more than two absolute value methods with different parameters depending on the output necessary. The absolute value methods are written in this manner: `Math.abs(parameter)`. Take a look at the absolute value method below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22ukEjFZZuaUal%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22AbsoluteValueMethodExample.java%22%3A%7B%22name%22%3A%22AbsoluteValueMethodExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+AbsoluteValueMethodExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+Math.abs%2810%29%3B%5Cn++public+static+int+exampleVariableTwo+%3D+Math.abs%28-10%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe absolute value method works the same way as it does in a regular algebra class. The input for this method could be an `int`, `float`, `double` or a `byte` value and will return the same data type as the input. Keep in mind that none of the outputs are rounded when producing the result of the method. Inputting a positive value would simply return the same value while inputting a negative value would return the negative value without the minus sign.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888535"}},"updated_at":{"$date":{"$numberLong":"1537610888535"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"4051cfbfd0f24a77a3213480486e392e_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba61488780383146936231e"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The floor function returns the largest whole number that is less than or equal to the input. This method only takes and returns `double` values. Take a look at the example below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22cfXHLcEgbwDR%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22FloorMethodExample.java%22%3A%7B%22name%22%3A%22FloorMethodExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+FloorMethodExample+%7B%5Cn%5Cn++%2F%2F+Returns+largest+integer+that+is+less+than+or+equal+to+the+argument%5Cn++public+static+double+exampleVariableOne+%3D+Math.floor%2810.4%29%3B%5Cn++public+static+double+exampleVariableTwo+%3D+Math.floor%28-20.4%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nAs the nearest whole number that is less than or equal to 10.4 is 10, 10.0 is printed. Similarly, since the closest whole number that is less than or equal to -20.4 is -21, -21.0 is printed. Notice that even if we input a non-decimal number into the floor function, a `double` is returned. Since data precision is not hindered when you convert from an `int` data type to a `double`, Java will do it without throwing any errors. The floor function's primary use is rounding, all ready for you to use while coding.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888542"}},"updated_at":{"$date":{"$numberLong":"1537610888542"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"a8a6764f05974258bd52903b6a8282ff_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614887803831469362323"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The ceiling function returns the smallest whole number that is greater than or equal to the input. This function is similar to the floor function and is written as `Math.ceil(input)`. It only takes and returns `double` data types. Take a look at the example below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22LpbMnMIdqsFb%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22CeilingMethodExample.java%22%3A%7B%22name%22%3A%22CeilingMethodExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+CeilingMethodExample+%7B%5Cn%5Cn++%2F%2F+Returns+smallest+integer+that+is+greater+than+or+equal+to+the+argument%5Cn++public+static+double+exampleVariableOne+%3D+Math.ceil%2810.4%29%3B%5Cn++public+static+double+exampleVariableTwo+%3D+Math.ceil%28-20.4%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe ceiling function returns the smallest whole integer greater than or equal to the input and prints it as a `double` with a decimal. This function does not truncate, it rounds up, with the exception of inputs between 0 and -1.0, this returns \"-0.0\".\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888549"}},"updated_at":{"$date":{"$numberLong":"1537610888549"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"1408bd3fe87b4e4c942cea8688da1e4c_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614887803831469362329"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"One of the more popular `Math` class functions is the square root function. Like the `floor()` and `ceil()` methods, the square root method takes and returns the `double` datatype. It can be written as follows, `Math.sqrt(25)`, and returns the rounded positive square root. Review the examples below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22ucnxCnlwrCcu%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22SquareRootExample.java%22%3A%7B%22name%22%3A%22SquareRootExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+SquareRootExample+%7B%5Cn%5Cn++public+static+double+exampleVariableOne+%3D+Math.sqrt%28100%29%3B%5Cn++public+static+double+exampleVariableTwo+%3D+Math.sqrt%286.25%29%3B%5Cn++public+static+double+exampleVariableThree+%3D+Math.sqrt%283%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThis method will return a `double` number even if the result is a perfect square. The error that will occur if we use a number less than zero is a result of \"NaN\", which stands for \"Not a Number\". Therefore, if we were to write `Math.sqrt(-4)`, the return will be \"NaN\". Imaginary numbers cannot be represented or returned using this method. And lastly, keep in mind that this function will only return one positive square root value.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888559"}},"updated_at":{"$date":{"$numberLong":"1537610888559"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"749b83541eda40119a10c8a5e1aac469_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba61488780383146936232f"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The `pow()` function of the `Math` class takes in two `double` values and returns the result of the first input raised to the power of the second input. The symbol '^' is not used to represent \"to the power of\" in Java. We can write this function like this: `Math.pow(inputOne, inputTwo)`. Check out the two examples below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22vzdAzhYMqpFq%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22PowerMethodExample.java%22%3A%7B%22name%22%3A%22PowerMethodExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+PowerMethodExample+%7B%5Cn%5Cn++public+static+double+exampleVariableOne+%3D+Math.pow%2810%2C+2%29%3B%5Cn++public+static+double+exampleVariableTwo+%3D+Math.pow%28-10%2C+2%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe function of the `Math.pow()` method mirror the function of exponents we learned in math class. For example, if the second input is zero, the result will always be \"1.0\" because any number raised to the power of zero is one. Also, if the second input is \"1.0\", the result with be the first input. If the power function has expressions that use division or any other operation, the expression is evaluated before the power method is run. Because of the previous statement, fractions are not a recommended method for writing your expression. Please be careful of using numbers such as \"1/2\" because this would result in \"0.0\", not \"0.5\".\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888568"}},"updated_at":{"$date":{"$numberLong":"1537610888568"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"fc5efc59b0344959a02d7b27aba6bccb_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614887803831469362335"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The `random()` method in the `Math` class returns a random number between 0.0 and 1.0, including 0.0 and not including 1.0, at random with uniform distribution from this range. This method is written like `Math.random()` and does not take in any parameters. The returns a `double` value. Run the program below to see the function. As you may suspect, you will get different numbers every time you run the program.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22erjlLQabjBlt%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22RandomMethodExample.java%22%3A%7B%22name%22%3A%22RandomMethodExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+RandomMethodExample+%7B%5Cn%5Cn++%2F%2F+Returns+double+value+greater+than+or+equal+to+0.0+and+less+than+1.0%5Cn++public+static+double+exampleVariableOne+%3D+Math.random%28%29%3B%5Cn++%2F%2F+Returns+an+integer+value+between+1+and+100%5Cn++public+static+int+exampleVariableTwo+%3D+%28int%29+%28Math.random%28%29+%2A+101%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nIn order to increase our range from 0.0 to 100.0, we have to multiply the whole expression by 101 since the function's range is only 0.0 to 1.0. We then use casting to change the `double` to an `int` datatype value, which in turn truncates the decimal and gives us a whole number. There are different methods within the `Random` class which may be useful to you for various projects in the future.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888584"}},"updated_at":{"$date":{"$numberLong":"1537610888584"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"80f3a72ed2ee4902b2ab2fc94a3adc61_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614887803831469362381"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"We covered primitive data types and the operators that work with those data types. As we begin to discuss `String`, it may seem like a primitive data type. However, `String` is its own class in the `java.lang` package. The `String` class contains objects which are commonly used in Java programming. You will see how useful `String` is as we explore further. Take a look at the example below of a `String` that holds the value \"Hello World!\"\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22oDlsaxsRCosc%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22DataTypeStringExample.java%22%3A%7B%22name%22%3A%22DataTypeStringExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+DataTypeStringExample+%7B%5Cn%5Cn++%2F%2F+this+creates+a+new+String+that+holds+%5C%22Hello+World%21%5C%22%5Cn++public+static+String+exampleVariableOne+%3D+new+String%28%5C%22Hello+World%21%5C%22%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nIn Java, `String` is a line of text that strings together letters or numbers and stores them as a sequence of characters. The string \"Hi!\" is made up of the characters 'H', 'i', and '!'.\n\nLet's take a look at how the Java operator '+' works with strings and other data types like integers. If a `String` is before the '+' operator and followed by a non-string value, the '+' operator converts the non-string value into a string and chains them together. For example `System.out.println(\"Hi\" + 1 + 2);` will not print \"Hi3\". Instead, it will print \"Hi12\" as the '+' sign changes the '1' and '2' to strings before chaining the strings together. The '1' and '2' are no longer integers and do not qualify for addition. It is best to avoid arithmetic calculation if a `String` exists before the addition.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888741"}},"updated_at":{"$date":{"$numberLong":"1537610888741"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"3ff1ea42164c49c79abf1cd552aeda59_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614887803831469362386"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"There are two distinct ways to create a `String`: use double-quotation marks or create a new object. Either put text on the same line in double quotation marks as if it was primitive datatype: `String stringName = \"hi\";` or initialize them like this: `String stringName = new String(\"hi\");`. Take a look below for examples on how we can initialize a `String`.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22SGBWshkOQyMN%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22StringsExample.java%22%3A%7B%22name%22%3A%22StringsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+StringsExample+%7B%5Cn%5Cn++public+static+String+exampleVariableOne+%3D+new+String%28%5C%22Hello+World%21%5C%22%29%3B%5Cn++%2F%2F+the+next+two+statements+create+an+empty+String%5Cn++public+static+String+exampleVariableTwo+%3D+new+String%28%29%3B%5Cn++public+static+String+exampleVariableThree+%3D+%5C%22%5C%22%3B%5Cn++public+static+String+exampleVariableFour+%3D+%5C%22Java%5C%22%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++++System.out.println%28exampleVariableFour%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nTo create a new object, we use the Java reserved word `new` because `String` is a class within the `java.lang` package. However, Java has made the process of importing easier for programmers. As you see above, you can initialize the `String` without having to type out `new`. Ultimately, it is up to you to decide which method of creating a `String` works best for you.\n\nRemember, it is possible to create an empty `String` by either leaving the parenthesis blank or omitting characters on the inside of the double-quotation marks.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888751"}},"updated_at":{"$date":{"$numberLong":"1537610888751"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"1929428db12a4d09b3bc93a2b30b4568_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba61488780383146936238b"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Escape sequences allow you to get out of the `String` to print characters that cannot exist within the string itself. The three escape sequences are `\\` , `\\\"` and `\\n`. Let's see if we can decipher what each one does by looking the code below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22tbyubWzVJPqh%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22EscapeSequenceExample.java%22%3A%7B%22name%22%3A%22EscapeSequenceExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+EscapeSequenceExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+without+the+second+backslash%2C+a+syntax+error+will+occur%5Cn++++System.out.println%28%5C%22%5C%5C%5C%5C%5C%22%29%3B%5Cn++++%2F%2F+without+the+backslash%2C+a+syntax+error+will+occur%5Cn++++System.out.println%28%5C%22%5C%5C%5C%22Hello+World%21%5C%5C%5C%22%5C%22%29%3B%5Cn++++%2F%2F+%5C%5Cn+prints+%5C%22Java%5C%22+on+a+new+line%5Cn++++System.out.println%28%5C%22Hello+World%21%5C%22+%2B+%5C%22%5C%5CnJava%5C%22%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\n1. `\\\\` <br>\n\n Permits a '\\' to be included in the `String`. One '\\' is used to escape the string, and the second '\\' is added into the string.\n\n2. `\\\"` <br>\n\n Using one \\\" on each side of characters and enclose them in quotations when printing. Since the double-quotations are used to denote a `String` in the source code, we need to use something else, the backslashes, to tell the program to print \"\" in the output.\n \n3. `\\n` <br>\n\n Makes a new line, so anything in the `String` after the \"\\n\" prints on a new line. In the example above, \"Java\" is printed on a new line because there is an \"\\n\" directly before it in the code.\n\nKeep these useful tools in mind when working with strings.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888763"}},"updated_at":{"$date":{"$numberLong":"1537610888763"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"ce8837c1916d47dd8c0f8eace7ef7a81_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614887803831469362390"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"\"Null\" is a value that signifies \"no object\". If we declare a new `String` object and forgets to initialize it with a value, it will have a value of null. A `String` can also be initialized with a value of null as follows: `String varOne = null;`. Take a look at the example below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22npGZYXrRjqqb%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22NullValueExample.java%22%3A%7B%22name%22%3A%22NullValueExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+NullValueExample+%7B%5Cn%5Cn++%2F%2F+exampleVariableOne+is+only+declared+and+not+initialised%5Cn++public+static+String+exampleVariableOne%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nIn Java, variables created from the `String` class are like containers, they hold a reference to an object. Therefore, creating 10 strings will create 10 objects and 10 different variables that refer to the different objects. If variables that hold objects exist, we need a way to describe those variables that are not holding or referencing anything - this is where the null value comes in. It tells us that nothing is being held or referenced by the `String`.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888776"}},"updated_at":{"$date":{"$numberLong":"1537610888776"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"5bff627224f8451f895ad45700fe4948_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614887803831469362395"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"`String` objects are designed to be immutable. There is no way to alter or manipulate their data once the object is created. Although you cannot change a `String`, you are able to reassign its references. Let's take a look below to see how this works.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22RXNWUgOTYvtC%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ImmutabilityExample.java%22%3A%7B%22name%22%3A%22ImmutabilityExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ImmutabilityExample+%7B%5Cn%5Cn++%2F%2F+exampleVariableOne+holds+the+reference+to+the+String+%5C%22Hello+World%21%5C%22%5Cn++public+static+String+exampleVariableOne+%3D+%5C%22Hello+World%21%5C%22%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+the+String+reference+for+exampleVariableOne+changes+to+the+String+%5C%22Java%5C%22%5Cn++++exampleVariableOne+%3D+%5C%22Java%5C%22%3B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nWe can assign `exampleVariableOne` to a new `String` object (\"Java\") before it is printed. However, the old `String` object (\"HelloWorld\") still exists because it cannot be changed. The reassignment of a variable does not replace the old string with the new one as it only replaces the reference. This means that both strings still exist but only one of them is being used.\n\nTake a look at this line of code: `String varOne = \"Hi\";` Let's revisit the concept. The reference variable `varOne` does not contain the object, but only a reference to the object. What this reference is and what object it points to can change at anytime in the program. But the `String` object \"Hi\" remains unaltered because it is immutable.\n\nOn a side-note, constantly creating \"Strings\" could lead to overflowing the memory when running the code.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888792"}},"updated_at":{"$date":{"$numberLong":"1537610888792"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"34f5d6b4159d40679741e2627d16d0a3_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba61488780383146936239b"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Let's dive into introducing the methods that exist in the `String` class. A fundamental method to start off with is one that finds the length of a `String`, which is also the number of characters, including punctuation and spaces, that make up the string. The syntax for finding the length of a `String` is `stringname.length()`. Look below to see an example of its use.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22QDuxPGxLbHre%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22StringLengthExample.java%22%3A%7B%22name%22%3A%22StringLengthExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+StringLengthExample+%7B%5Cn%5Cn++public+static+String+exampleVariableOne+%3D+%5C%22Hello+World%21%5C%22%3B%5Cn++public+static+String+exampleVariableTwo+%3D+%5C%22%5C%22%3B%5Cn++%2F%2F+returns+the+length+of+exampleVariableOne+and+exampleVariableTwo%5Cn++%2F%2F+and+assigns+it+to+lengthOne+and+lengthTwo%5Cn++public+static+int+lengthOne+%3D+exampleVariableOne.length%28%29%3B%5Cn++public+static+int+lengthTwo+%3D+exampleVariableTwo.length%28%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28lengthOne%29%3B%5Cn++++System.out.println%28lengthTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nDid you run the program? Did you see how an empty `String` has a length of zero? Take note of the fact that the length method takes no parameters but the parenthesis are part of the necessary syntax to call the method, along with the dot which tells the program that you want to use the length method that exists in the `String` class.\n\nPlease keep in mind for future sections, that the length of the `String` has nothing to do with the index. You can just count up the number of characters inside the `String` to determine the accurate length.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888800"}},"updated_at":{"$date":{"$numberLong":"1537610888800"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"11baf04077ba405d8fd4f4345d2f9412_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba61488780383146936239d"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The `concat()` method performs `String` concatenation, meaning it takes two strings and forms a new `String` by putting the original two strings together. For example, the program below concatenates the first `String` \"Hello \" with the second `String` \"World!\" and makes a new `String` that refers to \"Hello World!\".\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22PeESiQNrBnOH%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ConcatenationExample.java%22%3A%7B%22name%22%3A%22ConcatenationExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ConcatenationExample+%7B%5Cn%5Cn++public+static+String+exampleVariableOne+%3D+%5C%22Hello+%5C%22%3B%5Cn++public+static+String+exampleVariableTwo+%3D+%5C%22World%21%5C%22%3B%5Cn++%2F%2F+returns+a+String+that+concatenates+exampleVariableTwo+to%5Cn++%2F%2F+exampleVariableOne+and+assigns+it+to+String+variables%5Cn++public+static+String+exampleVariableThree+%3D+exampleVariableOne+%2B+exampleVariableTwo%3B%5Cn++public+static+String+exampleVariableFour+%3D+exampleVariableOne.concat%28exampleVariableTwo%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++++System.out.println%28exampleVariableFour%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nKeep in mind the concept of immutability when it comes to strings. The first two strings, `exampleVariableOne` and `exampleVariableTwo`, are not altered by the action of `concat()`. A brand new `String` is created that is made up of the characters \"Hello World!\".\n\nDo you remember the '+' operator? It may also be used instead of the `concat()` method, as you see above. Both the operator and the method do the exact same thing, so you as the programmer may choose whichever one you are more comfortable with and fits your coding style.\n\nThis is your friendly reminder that if the first operand in front of the '+' operator is a `String` and the ones that come after are not, everything that comes after the `String` will be changed to be a `String`, and the '+' operator will behave as concatenation, not addition.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888803"}},"updated_at":{"$date":{"$numberLong":"1537610888803"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"53831f6ac6f440009901e65049a3e072_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693623a3"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Let's discuss what the concept of \"index\" means in Java. Index numbering starts with zero and totals up characters. The method `indexOf()` returns the index of the first occurrence of a `String` or `char` in a targeted `String`. Take a look below to see how this method is used.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22QGIzjPHBJesz%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22IndexOfMethodExample.java%22%3A%7B%22name%22%3A%22IndexOfMethodExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+IndexOfMethodExample+%7B%5Cn%5Cn++public+static+String+exampleVariableOne+%3D+%5C%22Hello+World%21%5C%22%3B%5Cn++%2F%2F+returns+the+index+of+the+given+String+%28case+sensitive%29%5Cn++%2F%2F+and+assigns+it+to+integer+variables%5Cn++public+static+int+exampleVariableTwo+%3D+exampleVariableOne.indexOf%28%5C%22World%5C%22%29%3B%5Cn++public+static+int+exampleVariableThree+%3D+exampleVariableOne.indexOf%28%5C%22world%5C%22%29%3B%5Cn++public+static+int+exampleVariableFour+%3D+exampleVariableOne.indexOf%28%5C%22world%5C%22%2C+7%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++++System.out.println%28exampleVariableFour%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nIndexing starts with zero, which is why the program above will print 6, not 7. Therefore, if you had a `String` \"Java\":<br>\n\n Index: 0 1 2 3<br>\n\n String: J a v a\n\nAnother way to use the `indexOf()` method is by putting an valid index after the target `String`. This tells the method where you want to start searching for the target `String`. As we see in the example above, the index of \"World\" is 6, meaning if we start searching from index 7, we will not find the `String` \"World\", thus returning -1.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888812"}},"updated_at":{"$date":{"$numberLong":"1537610888812"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"d4f9a1a0a6a14418a277601096ac7c31_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693623a9"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Now that we have explored the concept of index in Java, let's see the index related functions that exist in the `String` class. The `charAt` method returns a single character from a specified index. The syntax is as follows, `stringname.charAt(any integer)` and the return value is a single character `char`, not a `String`. In a case where the index is negative or greater than `stringname.length()-1`, you will receive a runtime error. Let's see a few examples of the `charAt` method.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22dNVxwXlHIIzW%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22CharAtMethodExample.java%22%3A%7B%22name%22%3A%22CharAtMethodExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+CharAtMethodExample+%7B%5Cn%5Cn++public+static+String+exampleVariableOne+%3D+%5C%22Hello+World%21%5C%22%3B%5Cn++%2F%2F+returns+the+character+at+a+specific+index%5Cn++%2F%2F+and+assigns+it+to+char+variables%5Cn++public+static+char+exampleVariableTwo+%3D+exampleVariableOne.charAt%280%29%3B%5Cn++public+static+char+exampleVariableThree+%3D+exampleVariableOne.charAt%2811%29%3B%5Cn++public+static+char+exampleVariableFour+%3D+exampleVariableOne.charAt%286%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++++System.out.println%28exampleVariableFour%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe index for the first character of a `String` has an index of zero, meaning 'H' is printed when the statement `exampleVariableOne.charAt(0);` is called. If you point at an index where there is a space, the `charAt()` method will return a character containing ' '. This method, along with `indexOf()` method are extremely useful when working with strings.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888819"}},"updated_at":{"$date":{"$numberLong":"1537610888819"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"af23df1fc1114c689acdd689998075f6_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693623ab"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"In Java, a \"Substring\" is a string that is comprised from another string, and there are two methods by which one is made. Take a look at the example below that shows us both `substring(int startIndex)` and `substring(int startIndex, int endIndex)`.\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22UZwAatIDWQth%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22SubStringExample.java%22%3A%7B%22name%22%3A%22SubStringExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+SubStringExample+%7B%5Cn%5Cn++public+static+String+exampleVariableOne+%3D+%5C%22Hello+World%21%5C%22%3B%5Cn++%2F%2F+returns+a+String+between+the+given+indices+and+assigns%5Cn++%2F%2F+it+to+String+variables%5Cn++public+static+String+exampleVariableTwo+%3D+exampleVariableOne.substring%280%2C+5%29%3B%5Cn++public+static+String+exampleVariableThree+%3D+exampleVariableOne.substring%286%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe first method, `substring(int startIndex)` returns a new `String` containing the characters between \"startIndex\" and the final index of the called `String`, so the statement `exampleVariableOne.substring(6)` returns the entire string \"World!\". If the \"startIndex\" is equal to the total length of the string, an empty string is created.\n\nThe second method, `substring(int startIndex, int endIndex)` returns a new `String` made up of the characters beginning at the \"startIndex\" and ending at the \"endIndex - 1\". This method includes the first character and excludes the last character of the parameters entered. As long as both inputs are valid indexes of the `String` you won't throw a runtime error.\n\nAs discussed before, strings are immutable, so a new `String` is created every time you call either of the `substring()` methods.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888822"}},"updated_at":{"$date":{"$numberLong":"1537610888822"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"393849dcf6a64813b6f21a909fa3d267_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693623b0"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The `trim()` method trims off any leading or ending black spaces, but leaves the spaces in the middle. Take a look below to see an example of this method's function.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22mALxuoiaFBft%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22TrimmingStringExample.java%22%3A%7B%22name%22%3A%22TrimmingStringExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+TrimmingStringExample+%7B%5Cn%5Cn++public+static+String+exampleVariableOne+%3D+%5C%22++++++Hello+World%21++++++%5C%22%3B%5Cn++%2F%2F+returns+a+String+with+leading+and+trailing+whitespace+omitted%5Cn++%2F%2F+and+assigns+it+to+a+String+variable%5Cn++public+static+String+exampleVariableTwo+%3D+exampleVariableOne.trim%28%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe original text has extra spaces before and after, making it inefficient and odd-looking when printed. This method creates a new `String` without added spaces at the beginning or the end while leaving the space in between.\n\nThe trim method is extremely useful when the programmer deals with user input data within the application. Extraneous spaces on either end of user input is a common problem, and those issues are easily solved using the trim method.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888831"}},"updated_at":{"$date":{"$numberLong":"1537610888831"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"9da500c805404260a33ee1a226853569_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693623b6"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The `compareTo()` method compares the first letter of one `String` object to the first letter of another `String` object and returns a number that states which `String` comes first in lexicographic order (A,B,C etc.). If the first two letters of the strings are the same, the method will go on to compare the next letters, and the next until it finds the first instance of a difference. Let's take a look at how this method works.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22QimSWQNEgtkq%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22CompareToMethodExample.java%22%3A%7B%22name%22%3A%22CompareToMethodExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+CompareToMethodExample+%7B%5Cn%5Cn++public+static+String+exampleVariableOne+%3D+%5C%22Ant%5C%22%3B%5Cn++public+static+String+exampleVariableTwo+%3D+%5C%22ant%5C%22%3B%5Cn++public+static+String+exampleVariableThree+%3D+%5C%22Butterfly%5C%22%3B%5Cn++public+static+String+exampleVariableFour+%3D+%5C%22Zebra%5C%22%3B%5Cn++%2F%2F+compares+the+two+Strings+lexicographically+and%5Cn++%2F%2F+assigns+the+difference+to+integer+variables%5Cn++public+static+int+exampleVariableFive+%3D+exampleVariableOne.compareTo%28exampleVariableTwo%29%3B%5Cn++public+static+int+exampleVariableSix+%3D+exampleVariableTwo.compareTo%28exampleVariableOne%29%3B%5Cn++public+static+int+exampleVariableSeven+%3D+exampleVariableThree.compareTo%28exampleVariableOne%29%3B%5Cn++public+static+int+exampleVariableEight+%3D+exampleVariableFour.compareTo%28exampleVariableOne%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableFive%29%3B%5Cn++++System.out.println%28exampleVariableSix%29%3B%5Cn++++System.out.println%28exampleVariableSeven%29%3B%5Cn++++System.out.println%28exampleVariableEight%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe `compareTo()` method returns 0 if the two strings are equal, a number less than 0 if the first `String` is larger, and a number greater than 0 if the second `String` is larger. Uppercase letters come before lowercase letters when the method compares strings. As you work through learning this method's function, test our example program and use the ascii table to see how far apart the characters are from each other.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888839"}},"updated_at":{"$date":{"$numberLong":"1537610888839"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"668308e7cecc4524912b49f5cbd38435_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693623bc"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"One of the most useful methods when working with `String` is the `equals()` method. Previously, we explained how to compare `int` and other data types by using the \"==\" operator. However, every `String` is an object, which means the \"==\" operator checks whether or not the reference (not value) for the `String` objects are the same. Because of this distinction, we need the equals method to check whether or not they hold the same `String` value (basically the text). The syntax for the equals method is `stringname.equals(stringname)`. Take a look at the difference between the equals method and the \"==\" operator when working with strings below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22OxiSifyzQldb%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22EqualsMethodExample.java%22%3A%7B%22name%22%3A%22EqualsMethodExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+EqualsMethodExample+%7B%5Cn%5Cn++public+static+String+exampleVariableOne+%3D+%5C%22Ant%5C%22%3B%5Cn++public+static+String+exampleVariableTwo+%3D+new+String%28%5C%22Ant%5C%22%29%3B%5Cn++%2F%2F+tests+to+see+if+the+value+for+both+Strings+are+equal%5Cn++%2F%2F+and+assigns+it+to+boolean+variables%5Cn++public+static+boolean+exampleVariableThree+%3D+exampleVariableOne.equals%28exampleVariableTwo%29%3B%5Cn++public+static+boolean+exampleVariableFour+%3D+exampleVariableOne+%3D%3D+exampleVariableTwo%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++++System.out.println%28exampleVariableFour%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nWhen using the \"==\" operator to compare the strings, we receive a result of \"false\" because the strings reference two different objects that are held in different memory spaces. However, if a statement like `String varTwo = varOne;` is called after `String varOne = \"Java\";`, the reference for the variable `varTwo` is the same as the reference of `varOne`, meaning that the \"==\" operator has a result of \"true\". This only works if the first `String` is directly assigned to the value of the second `String`.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888850"}},"updated_at":{"$date":{"$numberLong":"1537610888850"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"ee8c1f5d559d4a20bf5e8f443fbb47e4_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693623c2"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The following two methods are similar to the `trim()` method and are built-in procedures used for making style changes to a `String`. Let's take a look at the results of calling one method that makes the `String` all lower case, and another that makes it all uppercase. The syntax for these two methods are as follows : `toLowerCase()` and `toUpperCase()`.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22AZkcojzCREpg%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22UpperAndLowerCaseExample.java%22%3A%7B%22name%22%3A%22UpperAndLowerCaseExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+UpperAndLowerCaseExample+%7B%5Cn%5Cn++public+static+String+exampleVariableOne+%3D+%5C%22Hello+World%21%5C%22%3B%5Cn++%2F%2F+returns+String+with+%5C%22Hello+World%21%5C%22+either+fully+upper+case%5Cn++%2F%2F+or+fully+lower+case+and+assigns+it+to+String+variables%5Cn++public+static+String+exampleVariableTwo+%3D+exampleVariableOne.toUpperCase%28%29%3B%5Cn++public+static+String+exampleVariableThree+%3D+exampleVariableOne.toLowerCase%28%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThese two methods may be useful when you want to change the `String` so that it will print in a particular way. On the other hand, you can use the method for personal preference or when you want to compare two strings while ignoring the differences in uppercase or lowercase. (Although `compareToIgnoreCase()` and `equalsIgnoreCase()` does exist)\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888858"}},"updated_at":{"$date":{"$numberLong":"1537610888858"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"c2f6412d0335432bb5bfe76a5cc078ab_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693623c8"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"In Java, the `Integer` class is part of the `java.lang` package and is automatically imported just like the `String` class. The `parseInt()` method is part of the `Integer` class. This method converts a `String` that only consists of numbers into an integer value while simultaneously assigning it to the primitive data type `int`. The syntax for this method is as follows, `Integer.parseInt(stringname)`. Let's see how this method works in the code below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22hegluGTydQmT%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ParseIntExample.java%22%3A%7B%22name%22%3A%22ParseIntExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ParseIntExample+%7B%5Cn%5Cn++public+static+String+exampleVariableOne+%3D+%5C%225666%5C%22%3B%5Cn++public+static+String+exampleVariableTwo+%3D+%5C%22423%5C%22%3B%5Cn++public+static+int+exampleVariableThree+%3D+Integer.parseInt%28exampleVariableOne%29%3B%5Cn++public+static+int+exampleVariableFour+%3D+Integer.parseInt%28exampleVariableTwo%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28%5C%22Integer+exampleVariable+of+exampleVariableOne+is+%5C%22+%2B+exampleVariableThree%29%3B%5Cn++++System.out.println%28%5C%22Integer+exampleVariable+of+exampleVariableTwo+is+%5C%22+%2B+exampleVariableFour%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe `parseInt()` method returns an `int`, not an object from the `Integer` class. This method only works if the `String` consists solely of numbers and no characters. If that is not the case, an error will be thrown and an integer will not be created.\n\nThe `parseInt()` function is extremely useful when dealing with user input or calculating numbers from text files. With this method, Java is saving the programmer time from creating long methods to convert strings into integers, by having an included `parseInt()` method.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888870"}},"updated_at":{"$date":{"$numberLong":"1537610888870"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"16a6614757eb44b98cdfe204842c7089_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693623ca"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Another string conversion method that will prove useful to you in the future is the `toString()` method, which takes almost any object in Java and converts it to a `String`. Let's take a look at this example.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22XGwLkrhueKHd%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ToStringExample.java%22%3A%7B%22name%22%3A%22ToStringExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ToStringExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+11%3B%5Cn++public+static+double+exampleVariableTwo+%3D+Math.PI%3B%5Cn++public+static+String+exampleVariableThree+%3D+Integer.toString%28exampleVariableOne%29%3B%5Cn++public+static+String+exampleVariableFour+%3D+Double.toString%28exampleVariableTwo%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++++System.out.println%28exampleVariableFour%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThis method is useful when you want to print certain expressions. Although primitive data types that we have covered up to this point would print without needing to be converted into a `String`, there will be other objects we will master, such as arrays, that cannot be print directly, so keep the `toString` method in mind as we move forward and learn about arrays.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888872"}},"updated_at":{"$date":{"$numberLong":"1537610888872"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"e86ba0b0bd854ba7b43619eff8fd407a_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693623e9"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Let's start exploring the structure of an `if` statement in Java by relating it to a real life scenario. Suppose you are walking down the street with an umbrella. We ask one question in order to get a true or false response: \"is it raining?\". If we answer yes, or \"true\", then one course of action takes places, we open and use the umbrella. If the answer is no, or \"false\", another course of action takes place, the umbrella stays closed. This is the basis for an `if` statement in Java; one of two different courses of action take place based on a \"true\" or \"false\" answer. These types of statements involve a binary (two-way) decision. Play with the example below, which uses our umbrella scenario, by changing the `boolean` \"rain\" to \"false\".\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22ZyApqzJVyFOm%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22IfElseStatementExample.java%22%3A%7B%22name%22%3A%22IfElseStatementExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+IfElseStatementExample+%7B%5Cn%5Cn++public+static+boolean+rain+%3D+true%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+%5C%22%3D%3D+true%5C%22+can+be+omitted+simplify+code%5Cn++++if+%28rain+%3D%3D+true+%2F%2A+expression+%2A%2F%29+%7B%5Cn++++++%2F%2F+%5C%22true+branch%5C%22%5Cn++++++System.out.println%28%5C%22Use+your+umbrella%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++%2F%2F+%5C%22false+branch%5C%22%5Cn++++++System.out.println%28%5C%22Don%27t+use+your+umbrella%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe `if` statement above tests to see if the `boolean` value of \"rain\" is true. If it is, the \"true branch\" statement is executed. If not, the \"false branch\" statement is executed. Notice how we separate the \"true branch\" and the \"false branch\" by the reserved word `else`. The expression that goes inside the `if` statement must evaluate to true or false for the statement to execute, and anything that evaluates to a `boolean` value can be placed inside brackets.\n\n\"If you're tired, go to sleep. Otherwise, stay awake.\"\n\n\"If you're hungry, eat. Otherwise, don't eat.\"\n\nThe `if` statement allows the programmer to structure results using the same logic we use in our everyday lives.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888943"}},"updated_at":{"$date":{"$numberLong":"1537610888943"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"8d8860208aad487195300b2c6364b3fd_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693623eb"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The `else if` statement takes the `if` statement functionality one step further. Instead of having two outcomes, the programmer can create as many outcomes as they like, each one with its own expression. Take a look at the use of the `else if` statement below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22yTXWdanXcNHO%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ElseIfStatementExample.java%22%3A%7B%22name%22%3A%22ElseIfStatementExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ElseIfStatementExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+37%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+else+if+statements+have+to+include+boolean+expressions%5Cn++++if+%28exampleVariableOne+%5Cu003c+10+%2F%2A+expression+%2A%2F%29+%7B%5Cn++++++System.out.println%28%5C%22The+number+is+smaller+than+10%5C%22%29%3B%5Cn++++%7D+else+if+%28exampleVariableOne+%5Cu003c+20+%2F%2A+expression+%2A%2F%29+%7B%5Cn++++++System.out.println%28%5C%22The+number+is+between+10+and+20%5C%22%29%3B%5Cn++++%7D+else+if+%28exampleVariableOne+%5Cu003c+30+%2F%2A+expression+%2A%2F%29+%7B%5Cn++++++System.out.println%28%5C%22The+number+is+between+20+and+30%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22The+number+is+larger+than+30%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nEach `else if` statement has its own expression that returns true or false. Only the FIRST expression that evaluates to \"true\" is executed. As we see above, if the expression `exampleVariableOne &lt; 10` returns a value of \"true\", only the statements within the curly brackets of the `if` statement are executed, and all the statements that follow are ignored. If none of the expressions evaluate to \"true\", the statement inside the curly braces of the `else` statement are executed. Remember these vital rules when working with `if` statements:\n\n1. The `if` statement may contain zero or one `else` statement that must come after any `else if` expressions.\n2. The `if` statement may have zero or more `else if` expressions that must come before the `else` statement.\n3. Once the expression in an `else if` statement evaluates to true, all the remaining `else if` and `else` expressions are ignored.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888946"}},"updated_at":{"$date":{"$numberLong":"1537610888946"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"aa36ef496f8e49ed957cb7c9cbfbc804_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693623f1"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"A \"boolean expression\" refers to the statement contained inside the brackets of the `if` statement or the `else if` statements and only evaluates to either \"true\" or \"false\". Remember that an \"expression\" always consists of literals, operators, variable names, and parentheses used to calculate a value such as true or false. Explore the two boolean expressions below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22RXFpnTXvwyos%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22BooleanExpressionsExample.java%22%3A%7B%22name%22%3A%22BooleanExpressionsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+BooleanExpressionsExample+%7B%5Cn%5Cn++public+static+boolean+exampleVariableOne+%3D+true%3B%5Cn++public+static+boolean+exampleVariableTwo+%3D+false%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++if+%28exampleVariableOne+%3D%3D+exampleVariableTwo%29+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+true%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+false%5C%22%29%3B%5Cn++++%7D%5Cn++++%2F%2F+%5C%22%21%3D%5C%22+is+the+opposite+of+equals%5Cn++++if+%28exampleVariableOne+%21%3D+exampleVariableTwo%29+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+true%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+false%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nBoolean expressions are used to compare numbers, `boolean` values, `String` values, other objects and data types that you will learn about later in the course. Remember the importance of using double equals signs when you're comparing numbers. Please review the sections on \"operators\" when you need a refresher on the functionality of each one.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888959"}},"updated_at":{"$date":{"$numberLong":"1537610888959"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"b659cf627ea240a391aa7ae9ced00083_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693623f7"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The `switch` statement compares different primitive data types, `String` values and other objects to tests whether or not they are equal to a certain value. Play with the example of a switch statement below by changing the value of `exampleVariableOne` to see the different results.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22GdugMAPBHbfe%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22SwitchStatementExample.java%22%3A%7B%22name%22%3A%22SwitchStatementExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+SwitchStatementExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+37%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+checks+to+see+which+number+exampleVariableOne+is%5Cn++++%2F%2F+between+35-40%5Cn++++switch+%28exampleVariableOne+%2F%2A+expression+%2A%2F%29%7B%5Cn++++++case+35%3A+%2F%2F+35+is+a+label%5Cn++++++++System.out.println%28%5C%22exampleVariableOne+is+35%5C%22%29%3B%5Cn++++++++break%3B%5Cn++++++case+36%3A+%2F%2F+36+is+a+label%5Cn++++++++System.out.println%28%5C%22exampleVariableOne+is+36%5C%22%29%3B%5Cn++++++++break%3B%5Cn++++++case+37%3A+%2F%2F+37+is+a+label%5Cn++++++++System.out.println%28%5C%22exampleVariableOne+is+37%5C%22%29%3B%5Cn++++++++break%3B%5Cn++++++case+38%3A%5Cn++++++++System.out.println%28%5C%22exampleVariableOne+is+38%5C%22%29%3B%5Cn++++++++break%3B%5Cn++++++case+39%3A%5Cn++++++++System.out.println%28%5C%22exampleVariableOne+is+39%5C%22%29%3B%5Cn++++++++break%3B%5Cn++++++case+40%3A%5Cn++++++++System.out.println%28%5C%22exampleVariableOne+is+40%5C%22%29%3B%5Cn++++++++break%3B%5Cn++++++default%3A%5Cn++++++++System.out.println%28%5C%22exampleVariableOne+has+to+be+between+35+and+40%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe switch statement tests to see whether or not `exampleVariableOne` is between 35 and 40. Each \"case\" within the switch statement checks to see if `exampleVariableOne` is a certain number, and prints different statements depending on the value `exampleVariableOne` holds. Keep in mind, just one of these cases is selected per execution of the switch statement, and the data type of the expression has to match the datatype of the label. If none of the case labels matches the value of the expression, the default case is used, and its statements are executed.\n\nA programmer can write many statements after each case, usually followed by a `break` statement which stops anything after the case from being executed. Let's return to the example above and remove the `break` statement to see the result and the importance of having a `break` statement.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888968"}},"updated_at":{"$date":{"$numberLong":"1537610888968"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"429eefd512dc41f3a14be1260592f77d_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693623f9"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Let's explore the conditional \"AND\" operator, which allows you to check whether or not two values are both true or both false before executing a statement. If you have experience with a truth table, you will see similarities here. The \"AND\" operator is a logical operator that turns two true/false values into a single true or false value. Look below to see how this operator functions.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22qPwQylBoEgvF%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ConditionalAndExample.java%22%3A%7B%22name%22%3A%22ConditionalAndExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ConditionalAndExample+%7B%5Cn%5Cn++public+static+boolean+exampleVariableOne+%3D+true%3B%5Cn++public+static+boolean+exampleVariableTwo+%3D+true%3B%5Cn++public+static+boolean+exampleVariableThree+%3D+false%3B%5Cn++public+static+boolean+exampleVariableFour+%3D+false%3B%5Cn%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+only+the+boolean+expression+%5C%22true+%5Cu0026%5Cu0026+true%5C%22+returns+true%5Cn++++if+%28exampleVariableOne+%5Cu0026%5Cu0026+exampleVariableTwo%29+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+true%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+false%5C%22%29%3B%5Cn++++%7D%5Cn++++if+%28exampleVariableOne+%5Cu0026%5Cu0026+exampleVariableThree%29+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+true%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+false%5C%22%29%3B%5Cn++++%7D%5Cn++++if+%28exampleVariableThree+%5Cu0026%5Cu0026+exampleVariableFour%29+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+true%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+false%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nOnly the expressions with `true` on both sides of the \"AND\" evaluate as `true`. Here are the different possibilities and their outcomes:\n\n1. true && true = true\n2. false && true = false\n3. true && false = false\n4. false && false = false\n\nThe AND operator evaluates both operands, the expressions on each side, before determining the final value. This is useful when you want two or more expression to be true before executing a statement. Using them in an `if` statement will simplify your code structure and reduce your time spent on coding.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888971"}},"updated_at":{"$date":{"$numberLong":"1537610888971"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"68cf904c270e4a21b8d181d9c42030bd_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148878038314693623ff"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Contrary to the \"AND\" operator, the \"OR\" operator is used in a boolean expression to check if at least one of expressions are true.The \"OR\" operator is also a logical operator because it combines two true/false values into a single true/false value. Let's take a look at the functionality of the \"OR\" operator.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22kDpRVwNmVtcR%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ConditionalOrExample.java%22%3A%7B%22name%22%3A%22ConditionalOrExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ConditionalOrExample+%7B%5Cn%5Cn++public+static+boolean+exampleVariableOne+%3D+true%3B%5Cn++public+static+boolean+exampleVariableTwo+%3D+true%3B%5Cn++public+static+boolean+exampleVariableThree+%3D+false%3B%5Cn++public+static+boolean+exampleVariableFour+%3D+false%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+returns+true+if+either+one+of+the+boolean+values+are+true%5Cn++++if+%28exampleVariableOne+%7C%7C+exampleVariableTwo%29+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+true%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+false%5C%22%29%3B%5Cn++++%7D%5Cn++++if+%28exampleVariableOne+%7C%7C+exampleVariableThree%29+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+true%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+false%5C%22%29%3B%5Cn++++%7D%5Cn++++if+%28exampleVariableThree+%7C%7C+exampleVariableFour%29+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+true%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+false%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe \"OR\" operator only checks to see if one the `boolean` values are true. Here are the possibilities and the results for each case.\n\n1. true \\|\\| true = true\n2. true \\|\\| false = true\n3. false \\|\\| true = true\n4. false \\|\\| false = false\n\nThe \"OR\" operator functions similarly to how the word \"or\" is used in English. If one of the options you mention when using \"or\" is met, the other one doesn't matter. For example, if you are looking for a muffin or a donut, your needs are satisfied when you find a muffin, a donut, or both.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888985"}},"updated_at":{"$date":{"$numberLong":"1537610888985"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"47e77f3739fa42459944f4068c506e39_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614887803831469362401"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"A \"short circuit\" occurs when the operators don't evaluate all of the operands. Please look for those cases in the example below and notice how the short-circuit evaluation is necessary and useful when working with \"AND\" and \"OR\" operators.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22SfOdeiJMJOWd%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ShortCircuitEvaluationExample.java%22%3A%7B%22name%22%3A%22ShortCircuitEvaluationExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ShortCircuitEvaluationExample+%7B%5Cn%5Cn++public+static+boolean+exampleVariableOne+%3D+true%3B%5Cn++public+static+boolean+exampleVariableTwo+%3D+false%3B%5Cn++public+static+int+exampleVariableThree+%3D+5%3B%5Cn++public+static+int+exampleVariableFour+%3D+0%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+does+not+evaluate+%5C%220+%3D%3D+5%2F0%5C%22+because+the+result+will+always+be+true%5Cn++++%2F%2F+as+long+as+exampleVariableOne+is+true%5Cn++++if+%28exampleVariableOne+%7C%7C+0+%3D%3D+exampleVariableThree%2FexampleVariableFour%29+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+true%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+false%5C%22%29%3B%5Cn++++%7D%5Cn++++%2F%2F+does+not+evaluate+%5C%220+%3D%3D+5%2F0%5C%22+because+the+result+will+always+be+false%5Cn++++%2F%2F+as+long+as+exampleVariableTwo+is+false%5Cn++++if+%28exampleVariableTwo+%5Cu0026%5Cu0026+0+%3D%3D+exampleVariableThree%2FexampleVariableFour%29+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+true%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+false%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe code above shows an example of short-circuit evaluation. Did you wonder why \"5/0\" did not cause an error when you ran the program? This is because \"5/0\" was not evaluated and ignored by the program. When working with the \"OR\" operator, if the first operand evaluates to \"true\", no matter what the second operand evaluates to, the result will always be \"true\". The program therefore doesn't even look at the second operand if the first operand evaluates to \"true\".\n\nSimilarly, when using the \"AND\" operator, if the first operand evaluates to \"false\", no matter what the second operand evaluates to, the result will always be \"false\", so the second operand is ignored.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610888988"}},"updated_at":{"$date":{"$numberLong":"1537610888988"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"147ece3cb70e42069f7bfb566ef1f213_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614897803831469362407"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"De Morgan's Law is helpful to remember for the AP exam because it will be useful with questions regarding boolean expressions. De Morgan's Law show how the NOT operator (!) can be distributed when it exists outside a set of parenthesis. Look below for a few examples of how De Morgan's Law works.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22ZBmDajbLoWyM%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22DeMorgansLawExample.java%22%3A%7B%22name%22%3A%22DeMorgansLawExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+DeMorgansLawExample+%7B%5Cn++%5Cn++public+static+boolean+exampleVariableOne+%3D+true%3B%5Cn++public+static+boolean+exampleVariableTwo+%3D+false%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+The+two+boolean+expressions+below+are+equal%5Cn++++if+%28%21%28exampleVariableOne+%5Cu0026%5Cu0026+exampleVariableTwo%29%29+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+true%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+false%5C%22%29%3B%5Cn++++%7D%5Cn++++if+%28%21exampleVariableOne+%7C%7C+%21exampleVariableTwo%29+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+true%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+false%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nSome of the more common iterations for De Morgan's Law:\n\n1. !(A && B) is the same as !A \\|\\| !B\n2. !(A \\|\\| B) is the same as !A && !B\n3. !(C > D) is the same as C <= D\n4. !(C < D) is the same as C >= D\n5. !(C >= D) is the same as C < D\n6. !(C <= D) is the same as C > D\n7. !(E == F) is the same as E != F\n8. !(E != F) is the same as E == F\n\nRemember, you do not have to limit yourself to two operands when you work with the \"AND\" operator and the \"OR\" operator. `!(A && B && C)` is the same as `!A||!B||!C`. For the iterations shown above, A and B have to be `boolean` values, C and D have to be numbers and E and F may be a variety of data types.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889002"}},"updated_at":{"$date":{"$numberLong":"1537610889002"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"8c1941ce02cc45dba03c8b4cce54011e_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614897803831469362420"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Let's dive into the function of loops as time-savers that will immediately take your coding to the next level. The `for` statement is a loop control statement that allows you to run one or many statements several times in succession. For example, let's say we wanted to print out numbers 1-50. Instead of writing fifty `System.out.println();` statements, we use a loop. Start exploring loops by looking through the code below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22YfQensMkAgCK%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ForLoopExample.java%22%3A%7B%22name%22%3A%22ForLoopExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ForLoopExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+10%3B%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28%5C%22Counting+forward+from+0-10%3A%5C%22%29%3B%5Cn++++%2F%2F+increments+countOne+by+1+and+runs+until+the+boolean+expression+is+false%5Cn++++for+%28int+countOne+%3D+0%3B+countOne+%5Cu003c%3D+exampleVariableOne%3B+countOne%2B%2B%29+%7B%5Cn++++++System.out.print%28countOne+%2B+%5C%22+%5C%22%29%3B%5Cn++++%7D%5Cn++++System.out.println%28%5C%22%5C%5CnCounting+backward+from+0-10%3A%5C%22%29%3B%5Cn++++%2F%2F+decrements+countTwo+by+1+and+runs+until+the+boolean+expression+is+false%5Cn++++for+%28int+countTwo+%3D+exampleVariableOne%3B+countTwo+%5Cu003e%3D+0%3B+countTwo--%29+%7B%5Cn++++++System.out.print%28countTwo+%2B+%5C%22+%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nLet's learn and remember the loop syntax. The statements inside the parenthesis of a `for` loop can be split into three sections:\n\n1. Initializing - initializes a new variable and assigns it a value\n2. Control - the condition that is tested every time the loop executes. If the condition is \"true\", the loop continues to run. If the condition result is \"false\", the loop terminates.\n3. Step - where you change the value of the initialized value by whatever is necessary. You may use assignment statements such as \"+=\" and \"-=\" or use increment/decrement. Feel free to go back and review those sections at any point.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889065"}},"updated_at":{"$date":{"$numberLong":"1537610889065"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"1212577d17584eaba63ad1ac4f5de15f_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614897803831469362426"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"In addition to the `for` loop, the `while` loop achieves similar results. Examine the code below, which tackles the same printing problem as our example from the `for` loop. Note down any similarities or differences between the two.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22iXFsCKJgYfew%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22WhileLoopExample.java%22%3A%7B%22name%22%3A%22WhileLoopExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+WhileLoopExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+0%3B%5Cn++public+static+int+exampleVariableTwo+%3D+10%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+while+loop+does+not+end+until+the+boolean+expression%5Cn++++%2F%2F+is+false%5Cn++++System.out.println%28%5C%22Counting+forward+from+0-10%3A%5C%22%29%3B%5Cn++++while+%28exampleVariableOne+%5Cu003c%3D+10%29+%7B%5Cn++++++System.out.print%28exampleVariableOne+%2B+%5C%22+%5C%22%29%3B%5Cn++++++exampleVariableOne%2B%2B%3B%5Cn++++%7D%5Cn++++System.out.println%28%5C%22%5C%5CnCounting+backward+from+0-10%3A%5C%22%29%3B%5Cn++++while+%28exampleVariableTwo+%5Cu003e%3D+0%29+%7B%5Cn++++++System.out.print%28exampleVariableTwo+%2B+%5C%22+%5C%22%29%3B%5Cn++++++exampleVariableTwo--%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe code above contains two `while` statements, both followed by a block of code. A block is a group of statements enclosed within curly braces.\n\nLet's examine the first `while` loop to see how the statement works. The expression inside the parenthesis is evaluated each time the loop is executed. If the result is \"true\", the `while` loop executes the statements. If the result is \"false\" the `while` loop terminates. So, if we were to explain the `while` loop in words: \"while `exampleVariableOne` is less than or equal to 10, print the number and increment `exampleVariableOne` by one.\n\nMake sure your `while` loop has a termination point after a certain amount of executions. Otherwise, the program will not run as intended and may crash.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889093"}},"updated_at":{"$date":{"$numberLong":"1537610889093"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"3886b453fcef423a96b883a837901663_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba61489780383146936242c"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Now that we are working with loops, let's explore \"loop control variables\". Loop control variables are ordinary `int` variables that are used to dictate elements such as how many times a loop will execute. Not all loops will necessarily have loop control variables, but it is important to recognize if one is present. Look at the program below to see what a \"loop control variable\" is.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22gtLIIksusekG%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22LoopVariableExample.java%22%3A%7B%22name%22%3A%22LoopVariableExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+LoopVariableExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+10%3B%5Cn++public+static+int+counterOne+%3D+0%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28%5C%22Counting+forward+from+0-10%3A%5C%22%29%3B%5Cn++++%2F%2F+counterOne+is+the+loop+variable%5Cn++++while+%28exampleVariableOne+%5Cu003e%3D+counterOne%29+%7B%5Cn++++++System.out.print%28counterOne+%2B+%5C%22+%5C%22%29%3B%5Cn++++++counterOne%2B%2B%3B%5Cn++++%7D%5Cn++++System.out.println%28%5C%22%5C%5CnCounting+backward+from+0-10%3A%5C%22%29%3B%5Cn++++%2F%2F++%5C%22counterTwo%5C%22+is+the+loop+variable%5Cn++++for+%28int+counterTwo+%3D+exampleVariableOne%3B+counterTwo+%5Cu003e%3D+0%3B+counterTwo--%29+%7B%5Cn++++++System.out.print%28counterTwo+%2B+%5C%22+%5C%22%29%3B%5Cn++++%7D%5Cn++++%2F%2F+The+following+statement+will+cause+a+runtime+error%3A%5Cn++++%2F%2F+System.out.println%28counterTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\n`counterOne` and `counterTwo` are both loop control variables that control when the loop will terminate as well as the number of times the loop will execute before it terminates. In both examples above, the loop control value is incremented or decremented by a certain value every time the loop is executed. This step is required in the program because the loop will run forever if the condition always evaluates true.\n\nLet's think back to Access Control and remember to consider the scope of the variables inside the loop. Any variable declared inside the `for` or `while` loop or inside the parenthesis of a `for` statement can only be used in the body of the loop. They cannot be printed or accessed in any way after the loop is terminated. If you look at the code above, there is a print statement in comments. If you uncomment the statement and run the program, it will cause an error because `counterTwo` cannot be referenced outside the `for` loop.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889109"}},"updated_at":{"$date":{"$numberLong":"1537610889109"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"9ac274ee16d64f8682434c292668e041_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614897803831469362432"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"In Java, there are branching statements, for example the `break` statement, which breaks the loop in the program and continues running the statements after the loop. If you have a `for` or `while` loop and you want it to stop after a certain condition is true, you can have a `break` statement inside the `if` statement. How is it implemented in code? Take a look below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22ZBYQWZOtAcFs%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22BreakStatementExample.java%22%3A%7B%22name%22%3A%22BreakStatementExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+BreakStatementExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+10%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28%5C%22Counting+forward+from+0-10%3A%5C%22%29%3B%5Cn++++for+%28int+count+%3D+0%3B+count+%5Cu003c%3D+exampleVariableOne%3B+count%2B%2B%29+%7B%5Cn++++++System.out.print%28count+%2B+%5C%22+%5C%22%29%3B%5Cn++++++%2F%2F+once+count+is+equal+to+5%2C+the+break+statement+will%5Cn++++++%2F%2F+terminate+the+for+loop%5Cn++++++if+%28count+%3D%3D+5%29+%7B%5Cn++++++++break%3B%5Cn++++++%7D%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe `if` statement has the expression \"count == 5\", so when `count` has a value of 5 the statements inside the `if` statement will be executed, including the `break;` statement, which will terminate the `for` loop so any number after 5 will not be printed. `break;` does not affect the `if` statement, it terminates the whole loop. When the `break;` statement is used appropriately, it saves time when running the program because you wouldn't have to loop through the same statements over and over again.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889129"}},"updated_at":{"$date":{"$numberLong":"1537610889129"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"14d9e40aac4445a38afa784b85902b01_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614897803831469362438"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Another important branching statement in Java is the `return` statement, which we have already seen before when we covered methods. At any time in a method, the `return` statement is used to cause the whole method to return a certain value and ignore all the statements underneath it. The program belows shows an example of the `count()` method and a `return` statement inside a `while` loop.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22QUQIjWksUVcN%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ReturnStatementExample.java%22%3A%7B%22name%22%3A%22ReturnStatementExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ReturnStatementExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+100%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28count%28%29%29%3B%5Cn++%7D%5Cn%5Cn++public+static+String+count%28%29+%7B%5Cn++++while+%28exampleVariableOne+%5Cu003e+0%29+%7B%5Cn++++++if+%28exampleVariableOne+%3D%3D+25%29+%7B%5Cn++++++++return+%5C%22exampleVariableOne+is+25%5C%22%3B%5Cn++++++%7D%5Cn++++++exampleVariableOne--%3B%5Cn++++%7D%5Cn++++%2F%2F+returns+the+statement+below+if+exampleVariableOne%5Cn++++%2F%2F+is+never+equal+to+25%5Cn++++return+%5C%22exampleVariableOne+is+never+equal+to+25%5C%22%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nAs you can see after running the code above, `return` breaks the loop and exits the method immediately after it is called. The statement `return \"exampleVariableOne is never equal to 25\";` is never called because `exampleVariableOne` will eventually reach 25 as it decreases from 100 to 0.\n\nThe `return` statement is useful because it saves time and makes the program run faster by returning the output of method without executing unnecessary code and loops. It is good practice to always have a `return` statement after the for/while loop in case the return statement inside the for/while loop is never executed. Otherwise, a compile-time error will occur because the method cannot return nothing (unless it has the Java reserved word \"void\" in the method header).\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889141"}},"updated_at":{"$date":{"$numberLong":"1537610889141"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"55570fc4f58e46b2aa291f12c2cd0daa_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba61489780383146936243e"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"As discussed previously, it is essential to make sure each loop you write has a distinct end. For example, if the condition inside the `for` or `while` loop is always true, the loop will run forever, creating an infinite loop. It is possible to accidentally create a loop that never ends. Look below to see how the `if` statement prevents the infinite loop from executing over 10 times.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22cRfquNvbVGPC%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22InfiniteLoopExample.java%22%3A%7B%22name%22%3A%22InfiniteLoopExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+InfiniteLoopExample+%7B%5Cn%5Cn++public+static+boolean+exampleVariableOne+%3D+true%3B%5Cn++public+static+int+exampleVariableTwo+%3D+0%3B%5Cn++public+static+int+counter+%3D+0%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+without+the+if+statement%2C+the+loop+will+be+executed+infinitely%5Cn++++%2F%2F+because+exampleVariableOne+is+always+true%5Cn++++while+%28exampleVariableOne%29+%7B%5Cn++++++System.out.print%28exampleVariableTwo+%2B+%5C%22+%5C%22%29%3B%5Cn++++++exampleVariableTwo%2B%2B%3B%5Cn++++++%2F%2F+the+if+statement+ensures+that+the+infinite+loop%5Cn++++++%2F%2F+is+terminated+after+it+runs+10+times%5Cn++++++if+%28exampleVariableTwo+%5Cu003e+10%29+%7B%5Cn++++++++exampleVariableOne+%3D+false%3B%5Cn++++++%7D%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nIf the `if` statement was not in the code, the `while` loop would run indefinitely. This is because the boolean expression inside the parenthesis always return \"true\". For this reason, we must ensure that our boolean expressions have an end by making sure they return as \"false\" in order to end the loop.\n\nInfinite loops can cause your computer/browser/application to pause due to the continuous executions of the program, or even crash. One way to debug infinite loops is to print out the loop control variable after running the statements inside the loop to check what the cause of the infinite loop is.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889155"}},"updated_at":{"$date":{"$numberLong":"1537610889155"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"5077d1e2140d401ba99e71cdcff1bb72_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614897803831469362446"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"In the real world, programmers examine, use, test, and manipulate gigantic amounts of data. Arrays are used to systematically organize and process this data efficiently and effectively. When data is standardized and formulated into arrays, a simple and small Java program can handle an enormous amount of data. Take a look at the three different arrays below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22HdGrIYzfBWuW%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22OneDimensionalArraysExample.java%22%3A%7B%22name%22%3A%22OneDimensionalArraysExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+OneDimensionalArraysExample+%7B%5Cn%5Cn++%2F%2F+exampleVariableOne+is+declared+but+not+initialised%5Cn++public+static+int%5B%5D+exampleVariableOne%3B%5Cn++public+static+int%5B%5D+exampleVariableTwo+%3D+%7B0%2C+1%2C+2%2C+3%2C+4%2C+5%2C+6%2C+7%2C+8%7D%3B%5Cn++public+static+boolean%5B%5D+exampleVariableThree+%3D+%7Btrue%2C+false%2C+false%2C+true%7D%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+the+default+value+for+int%5B%5D+elements+is+0%5Cn++++exampleVariableTwo%5B0%5D+%3D+10%3B%5Cn++++System.out.println%28exampleVariableTwo%5B3%5D%29%3B%5Cn++++System.out.println%28exampleVariableThree%5B1%5D%29%3B%5Cn%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nAn array is made up of a cells that are used to store a value. Each array can hold a list of values. All the values in an array need to have same data type. Like `String` variables, the index of an array starts with 0. There are two ways to initialize an array:\n\n1. `datatype[] arrayname = {valueOne, valueTwo, valueThree};`<br>\n\n The simplest way to create an array is enclosing its values in curly braces separated by commas. \n\n2. `datatype[] arrayname = new datatype[arraylength];`<br>\n\n We give an array a certain length and adhere to it throughout the whole program. The length cannot be altered once given.\n\nYou can access the elements in the array using: `arrayname[index]`. This indicates a specific element inside the array using the index. You can then manipulate the value it holds.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889195"}},"updated_at":{"$date":{"$numberLong":"1537610889195"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"d3f711ff0e5a404bb4ae558d8ce2cc43_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614897803831469362448"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"As we stated previously, the way index works with arrays is similar to how index works with `String` values. Arrays also have a way of returning their own length, but in place of a method like with strings, the array's length is a variable, meaning the parenthesis are not needed. Look below to see how we can access the length of an array.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22sxfTfaVZvewD%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ArrayLength1DExample.java%22%3A%7B%22name%22%3A%22ArrayLength1DExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ArrayLength1DExample+%7B%5Cn%5Cn++public+static+int%5B%5D+exampleVariableOne+%3D+new+int%5B5%5D%3B%5Cn++public+static+int%5B%5D+exampleVariableTwo+%3D+%7B0%2C+1%2C+2%2C+3%2C+4%2C+5%2C+6%2C+7%2C+8%7D%3B%5Cn++%2F%2F+returns+the+length+of+the+array+and+assigns%5Cn++%2F%2F+it+to+integer+variables%5Cn++public+static+int+lengthOne+%3D+exampleVariableOne.length%3B%5Cn++public+static+int+lengthTwo+%3D+exampleVariableTwo.length%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28lengthOne%29%3B%5Cn++++System.out.println%28lengthTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe length of an array equals the number of elements it can hold. The last index of an array is `array.length-1`. Remember that the `length()` method in the `String` class works differently than `array.length()`.\n\nThe length of an array cannot be altered after it is initialized. Please remember this quality when you loop through arrays with for/while statements.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889199"}},"updated_at":{"$date":{"$numberLong":"1537610889199"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"7c9a08e5d3aa4335b5737bab438a7372_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba61489780383146936244a"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Now that we know what an array is and what it contains, let's see how we can apply loops to help us accomplish tasks with arrays. For example, you want to know the sum of all the elements in an array. Instead of summing each element together in your head, you can write a `for` loop to do the work for you. Check out the code below for an example.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22BejhrYhDutwo%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22Iteration1DExample.java%22%3A%7B%22name%22%3A%22Iteration1DExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+Iteration1DExample+%7B%5Cn%5Cn++public+static+int%5B%5D+exampleVariableOne+%3D+%7B0%2C+1%2C+2%2C+3%2C+4%2C+5%2C+6%2C+7%2C+8%7D%3B%5Cn++public+static+int+sum+%3D+0%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+for+loops+are+the+most+common+method+when%5Cn++++%2F%2F+iterating+through+an+1D+array%5Cn++++for+%28int+count+%3D+0%3B+count+%5Cu003c+exampleVariableOne.length%3B+count%2B%2B%29+%7B%5Cn++++++%2F%2F+add+each+element+to+sum%5Cn++++++sum+%2B%3D+exampleVariableOne%5Bcount%5D%3B%5Cn++++%7D%5Cn++++%2F%2F+print+the+total+sum+of+all+the+elements+in+the+array%5Cn++++System.out.println%28sum%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe `for` statement has the condition `count<exampleVariableOne.length`, which makes sure that every element in the array is added to sum before the `for` loop is terminated. Why do we use '<'? Because the last index of the array is always `array.length-1`, so `count` cannot be equal to or greater than `exampleVariableOne.length`. If we do not specify this, a runtime error may occur.\n\nThe `for` loop above is a prime example of the loops used when dealing with one-dimensional arrays. As you master using a `for` loop and accessing the elements in an array, you will start writing more complicated programs that deal with large amounts of data. Being able to iterate through arrays using loops is important because arrays cannot be directly printed to the console. `System.out.println(arrayname)` won't work.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889202"}},"updated_at":{"$date":{"$numberLong":"1537610889202"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"1331c6646e5243519cae32dfd18b08d3_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba61489780383146936244c"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Let's examine another type of loop. The \"enhanced for\" statement, or the \"for-each\" loop, looks at each element of an array in order, which allows the loop to automatically avoids errors such as going past the last index of an array. Let's revisit the same goal as in the example on previous page, but try it now with the for-each loop.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22riKpehwrZiOc%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22EnhancedForLoopExample.java%22%3A%7B%22name%22%3A%22EnhancedForLoopExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+EnhancedForLoopExample+%7B%5Cn%5Cn++public+static+int%5B%5D+exampleVariableOne+%3D+%7B0%2C+1%2C+2%2C+3%2C+4%2C+5%2C+6%2C+7%2C+8%7D%3B%5Cn++public+static+int+sum+%3D+0%3B%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+simplifies+the+for+loop+and+creates+simple+code%5Cn++++%2F%2F+1D+array%5Cn++++for+%28int+count+%3A+exampleVariableOne%29+%7B%5Cn++++++sum+%2B%3D+exampleVariableOne%5Bcount%5D%3B%5Cn++++%7D%5Cn++++System.out.println%28sum%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe syntax for an \"enhanced for statement\" is as follows, `for(datatype variablename : arrayname)`. The \"datatype\" and \"variablename\" is what you would put in the first section of a `for` loop, the loop control variable. This creates a new variable that only exists within the \"for-each\" loop. It is used as the index when accessing the elements of the array.\n\nThe \"for-each\" loop is used when you want to loop through each and every element of the array without missing out an index or accidentally exceeding the last index of the array. When you code a program that only accesses certain elements inside an array, you can still use the \"for-each\" loop. However, as it requires an extra `if` statement to do so, you may choose to use a regular `for` loop with incrementing/decrementing variables as shown in past topics.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889204"}},"updated_at":{"$date":{"$numberLong":"1537610889204"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"7e8ad9123f384f43b02f7468a09b3e0c_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614897803831469362452"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Let's expand our array conversation to two-dimensional arrays. Spreadsheets, web browser screens, images, and many other types of data are in a 2D format, which is why we need arrays that can handle this type of data. A 2D array is laid out in a grid like graph paper, meaning each element is still housed in its own cell like in a 1D array. However, that element is now represented by two different indexes that are both needed in order to specify that cell. Take a look at the 2D arrays below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22qnrjNhKMKKAT%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22TwoDimensionalArraysExample.java%22%3A%7B%22name%22%3A%22TwoDimensionalArraysExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+TwoDimensionalArraysExample+%7B%5Cn%5Cn++public+static+int%5B%5D%5B%5D+exampleVariableOne+%3D+new+int%5B3%5D%5B4%5D%3B%5Cn++public+static+int%5B%5D%5B%5D+exampleVariableTwo+%3D+%7B%7B0%2C+1%2C+2%2C+3%2C+4%7D%2C+%7B4%2C+5%2C+6%2C+7%2C+8%7D%7D%3B%5Cn++public+static+boolean%5B%5D%5B%5D+exampleVariableThree+%3D+%7B%7Btrue%2C+false%2C+false%2C+true%7D%2C+%7Bfalse%2C+false%2C+true%2C+true%7D%7D%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++exampleVariableOne%5B1%5D%5B2%5D+%3D+10000%3B%5Cn++++%2F%2F+the+default+value+for+int%5B%5D%5B%5D+elements+when+declared+is+also+0%5Cn++++System.out.println%28exampleVariableOne%5B1%5D%5B1%5D%29%3B%5Cn++++System.out.println%28exampleVariableTwo%5B1%5D%5B3%5D%29%3B%5Cn++++System.out.println%28exampleVariableThree%5B0%5D%5B2%5D%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nSimilar to 1D arrays, the index of both row and column start at 0. The first square bracket after the array name specifies the row while the second one dictates the column. All indexes start at 0, so `varOne[0][0]` specifies the first row and the first column. If you have `varOne[3][1]`, you are indicating the element that exists in the fourth row and the second column. Like 1D arrays, all the elements must have the same datatype. Initializing a 2D array is also very similar to initializing a 1D array.\n\n1. `datatype[][] arrayname = new datatype[3][1];`<br>\n\nCreates a 2D array with three rows and one column. \n\n2. `datatype[] arrayname = {{varOne, varTwo}, {varThree, varFour}};`<br>\n\nCreates a 2D array with two rows and two columns. The rows are separated by commas and enclosed in individual curly braces.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889215"}},"updated_at":{"$date":{"$numberLong":"1537610889215"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"fedc6aa520ca4c5989516a68ab5dbf71_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614897803831469362458"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Now we will take a look at the properties of the rows and columns that make up 2D arrays. Most of the time, each row in a 2D array will have the same number of columns, but that may not always be the case. If you were to initialize a 2D array by listing out the elements individually, it may lead to a row with a different number of columns. In situations like this, and others, you will need to know how to access the length of the row or the column of a 2D array. Let's see how it's done below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22vqjvjTWrSYex%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ArrayLength2DExample.java%22%3A%7B%22name%22%3A%22ArrayLength2DExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ArrayLength2DExample+%7B%5Cn%5Cn++public+static+int%5B%5D%5B%5D+exampleVariableOne+%3D+new+int%5B10%5D%5B5%5D%3B%5Cn++%2F%2F+returns+the+length+of+the+rows+in+the+array%5Cn++public+static+int+lengthOne+%3D+exampleVariableOne.length%3B%5Cn++%2F%2F+returns+the+length+of+the+columns+in+the+array%5Cn++public+static+int+lengthTwo+%3D+exampleVariableOne%5B0%5D.length%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28lengthOne%29%3B%5Cn++++System.out.println%28lengthTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nWe use `arrayname.length` to determine the number of rows in a 2D array because the length of a 2D array is equal to the number of rows it has. The number of columns may vary row to row, which is why the number of rows is used as the length of the 2D array.\n\nWhen calling the length of a column, we pinpoint the row before using `.length`. The program above checks to see how many columns the first row of the 2D array contains by calling `exampleVariableOne[0].length`. Adjust the '0' to another number to change the row specified.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889225"}},"updated_at":{"$date":{"$numberLong":"1537610889225"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"d2f7290c80fb482fa7174cf521af6585_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba61489780383146936245e"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"We explored using `for` loops with one-dimensional arrays. Now let's jump into nested `for` loops as a method for iterating through 2D arrays. A nested `for` loop is one `for` loop inside another. Take a look below to see what this means.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22TAMTaUjxxIzJ%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22Iteration2DExample.java%22%3A%7B%22name%22%3A%22Iteration2DExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn+%5Cnpublic+class+Iteration2DExample+%7B%5Cn%5Cn++public+static+int%5B%5D%5B%5D+exampleVariableOne+%3D+%7B%7B0%2C+1%2C+2%2C+3%2C+4%7D%2C+%7B4%2C+5%2C+6%2C+7%2C+8%7D%7D%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+nested+for+loops+are+necessary+for%5Cn++++%2F%2F+iterating+through+a+2D+array%5Cn++++for+%28int+countOne+%3D+0%3B+countOne+%5Cu003c+exampleVariableOne.length%3B+countOne%2B%2B%29+%7B%5Cn++++++for+%28int+countTwo+%3D+0%3B+countTwo+%5Cu003c+exampleVariableOne%5BcountOne%5D.length%3B+countTwo%2B%2B%29+%7B%5Cn++++++++System.out.print%28%5C%22Index+%5B%5C%22+%2B+countOne+%2B+%5C%22%5D%5B%5C%22+%2B+countTwo+%2B+%5C%22%5D%3A+%5C%22%29%3B%5Cn++++++++System.out.println%28exampleVariableOne%5BcountOne%5D%5BcountTwo%5D%29%3B%5Cn++++++%7D%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe first `for` loop loops through each row of the 2D array one by one. As the first loop runs through each row, the second (nested) `for` loop inside the first loop loops through the columns one by one. The nested for loops runs row by row, checking each column within the row before moving on to the next row.\n\nBecause each row could have different numbers of columns, we need to access the specific column length of the specified row. That is why you see `exampleVariableOne[countOne].length` used within the second nested `for` loop.\n\nThe concept of using loops when working with 2D arrays is an essential tool in every programmer's toolkit. Look meticulously through the code above and become comfortable with how each loop fits into the big picture. When you become comfortable with the `for` loop, try using “for-each” loops with 2D arrays.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889238"}},"updated_at":{"$date":{"$numberLong":"1537610889238"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"6de29c02cadf4e87951183775ca679ba_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614897803831469362464"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Now that we have entered the world of arrays, let's talk about the `ArrayList` class in Java and what it offers in addition to the known capabilities of arrays. An `ArrayList` object contains an array of object references as well as methods for managing the array. The elements of an `ArrayList` must be object references, not primitive data such as `int` or `double`. Take a look at the `ArrayList` of `String` values as an example. The `ArrayList` class has to be imported from the `java.util` package in order for the program to compile without error.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22NDcEwtDNvbHb%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ArrayListsExample.java%22%3A%7B%22name%22%3A%22ArrayListsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnimport+java.util.ArrayList%3B%5Cn%5Cnpublic+class+ArrayListsExample+%7B%5Cn%5Cn++public+static+ArrayList%5Cu003cString%5Cu003e+exampleVariableOne+%3D+new+ArrayList%5Cu003cString%5Cu003e%28%29%3B%5Cn++public+static+ArrayList%5Cu003cString%5Cu003e+exampleVariableTwo+%3D+new+ArrayList%5Cu003cString%5Cu003e%285%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+%5C%22add%5C%22+will+be+explained+later+this+unit%5Cn++++exampleVariableOne.add%28%5C%22Hello%5C%22%29%3B%5Cn++++exampleVariableOne.add%28%5C%22World%5C%22%29%3B%5Cn++++%2F%2F+ArrayLists+can+be+printed+directly+to+the+console%2C+unlike+arrays%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe syntax for declaring an `ArrayList` is: <br>\n\n `ArrayList<objectType> name = new ArrayList<objectType>();`. <br>\n\nBy default, an `ArrayList` will start out with 10 empty cells. If you want to start with an initial capacity, put a number in the parentheses. This does not limit the size the `ArrayList` can expand to. A benefit of an `ArrayList` is that elements may continue to be added regardless of the original size of the `ArrayList`. The size of the `ArrayList` will automatically increase and no information will be lost.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889250"}},"updated_at":{"$date":{"$numberLong":"1537610889250"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"978c3b43d4d84246b1db17fe8cba3ac8_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba61489780383146936246a"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The index of an `ArrayList` starts at 0 and it cannot equal the size of the `ArrayList`, just like we mentioned with strings and arrays. `ArrayList` is a class, which means it has its own methods like the `String` class does. Take a look at the commonly used methods in the `ArrayList` class and their functions.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22tfTaNcQQjMhj%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ArrayListMethodExample.java%22%3A%7B%22name%22%3A%22ArrayListMethodExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnimport+java.util.ArrayList%3B%5Cn%5Cnpublic+class+ArrayListMethodExample+%7B%5Cn%5Cn++public+static+ArrayList%5Cu003cString%5Cu003e+exampleVariableOne+%3D+new+ArrayList%5Cu003cString%5Cu003e%28%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+adds+%5C%22Hello%5C%22+to+the+ArrayList%5Cn++++exampleVariableOne.add%28%5C%22Hello%5C%22%29%3B%5Cn++++%2F%2F+adds+%5C%22World%5C%22+to+the+0th+index+of+the+ArrayList%5Cn++++exampleVariableOne.add%280%2C+%5C%22World%5C%22%29%3B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++%2F%2F+removes+%5C%22Hello%5C%22+from+the+ArrayList%5Cn++++exampleVariableOne.remove%280%29%3B%5Cn++++%2F%2F+changes+%5C%22World%5C%22+to+%5C%22Java%5C%22%5Cn++++exampleVariableOne.set%280%2C+%5C%22Java%5C%22%29%3B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++%2F%2F+access+the+first+element+of+the+ArrayList%5Cn++++System.out.println%28exampleVariableOne.get%280%29%29%3B%5Cn++++%2F%2F+prints+the+size+of+the+ArrayList%5Cn++++System.out.println%28exampleVariableOne.size%28%29%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThese are the important methods to learn for an `ArrayList`:\n\n1. `add(value)` or `add(index,value)`<br>\n\n Adds an element to the end of an `ArrayList`. The method returns \"true\" if it is treated as a `boolean` value. When you add a specific index as a parameter, it will add the value at the specified index and move everything else after it up by one index.\n \n2. `remove(index)`<br>\n\n Removes an element from the `ArrayList`. It can return a reference to the deleted element if it is called. The method will shift the other elements down an index to account for the deleted element. \n\n3. `set(index, value)`<br>\n\n Combines `add()` and `remove()` by replacing the value at \"index\" with the new \"value\"\n\n4. `get(index)`<br>\n\n Accesses the element at a particular index. \n \n5. `size()`<br>\n\n Returns the current length of the `ArrayList`. This method is important as the size may change when using the methods above.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889265"}},"updated_at":{"$date":{"$numberLong":"1537610889265"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"c7e6b4e5b6fc4e5c86faf9ef90ce1aa4_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614897803831469362470"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"\"Autoboxing\" is a way to work with primitive data types within `ArrayLists` to make your coding easier. If we wanted to create an `ArrayList` of integers, we use `ArrayList<Integer>` because `int` is not an object. However, when we call methods such as `add()` and `set()`, instead of creating a new object `add(new Integer(11));`, we can just write `add(11)` as Java automatically converts `int` into `Integer` for us. Look below for an example of autoboxing.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22IOAXAPkxDmVf%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22AutoBoxingExample.java%22%3A%7B%22name%22%3A%22AutoBoxingExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnimport+java.util.ArrayList%3B%5Cn%5Cnpublic+class+AutoBoxingExample+%7B%5Cn%5Cn++public+static+ArrayList%5Cu003cInteger%5Cu003e+exampleVariableOne+%3D+new+ArrayList%5Cu003cInteger%5Cu003e%28%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++exampleVariableOne.add%28new+Integer%285%29%29%3B%5Cn++++%2F%2F+autoboxing+leads+to+simple+code+without+unnecessary+boxing%5Cn++++exampleVariableOne.add%2880%29%3B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nAutoboxing automatically converts `int` values to type `Integer` when the program is run. Therefore, regardless of what primitive data type we want to use, as long as we initialize the `ArrayList` with the right object, we can add primitive data types without creating new objects.\n\nUse autoboxing when creating an `ArrayList` of objects that have corresponding primitive data types. It makes coding a lot more simple when debugging the code.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889280"}},"updated_at":{"$date":{"$numberLong":"1537610889280"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"c6a34c79d2964245b1737fbca18c6d8e_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614897803831469362490"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"We have already worked with objects in previous chapters; they are some of the building blocks in Java. Let's go back to the basics and explore objects from their foundation. There are three properties that each object has. First, each object has a unique \"identity\" that makes it distinct from any other. Second, each object has a current \"state\", meaning it currently contains a value that has the ability to change. And third, an object has a \"behavior\" which enables it to call and run methods. Let's create an object below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22vEPSsuFWmnZm%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ObjectTest.java%22%3A%7B%22name%22%3A%22ObjectTest.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ObjectTest+%7B%5Cn%5Cn++private+String+exampleVariableOne%3B%5Cn%5Cn++%2F%2F+constructor+of+the+class%5Cn++public+ObjectTest%28String+exampleVariableOne%29+%7B%5Cn++++this.exampleVariableOne+%3D+exampleVariableOne%3B%5Cn++%7D%5Cn%5Cn++public+void+print%28%29%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++%7D%5Cn%7D%22%7D%2C%22ObjectsExample.java%22%3A%7B%22name%22%3A%22ObjectsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ObjectsExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+creates+a+new+object+of+the+test+class%5Cn++++%2F%2F+since+the+constructor+of+the+ObjectTest+class+takes+in%5Cn++++%2F%2F+one+String+parameter%2C+%5C%22Hello+World%21%5C%22+is+inside+the+parentheses%5Cn++++ObjectTest+objectTest+%3D+new+ObjectTest%28%5C%22Hello+World%21%5C%22%29%3B%5Cn++++objectTest.print%28%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nObjects refer to a particular instance of a class. In Java, this allows us to create particular instances of classes and store them in variables called objects. The syntax for creating most objects is as follows:\n\n`ClassName variableName = new ConstructorName(parameters);`\n\nAs you have seen previously, the constructor name is the same as the class name. Objects can have parameters inside the parenthesis, depending on the constructor of the other class.\n\nWhen you create a new `ArrayList` and use the reserved word `new`, it makes an object from the original `ArrayList` class and stores it inside the name of your `ArrayList`. This is why you can use dot notation (.) and directly call methods and variables that exist in the original `ArrayList` class as they also exist in the instance you created. However, you still need a \"main class\" containing a functioning main method in order for your program to compile and run. Have you tried creating an object of the class itself in the main method? We will see these later in the course!\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889364"}},"updated_at":{"$date":{"$numberLong":"1537610889364"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"9da0057fed20462d9bad0f1c54631970_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614897803831469362496"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"When we looked at object equality in an earlier section with the `equals()` method for `String`, we discovered how it was different in functionality than the default equals method for other objects. Take a look at the two different equality functions below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22YcxRsUDYuFaY%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ObjectEqualityExample.java%22%3A%7B%22name%22%3A%22ObjectEqualityExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ObjectEqualityExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++ObjectEqualityTest+objectEqualityTest+%3D+new+ObjectEqualityTest%28%5C%22Java%5C%22%29%3B%5Cn++++ObjectEqualityTest+objectEqualityTestOne+%3D+new+ObjectEqualityTest%28%5C%22Java%5C%22%29%3B%5Cn++++ObjectEqualityTest+objectEqualityTestTwo+%3D+objectEqualityTestOne%3B%5Cn++++%2F%2F+checks+to+see+if+the+reference+for+the+objects+are+the+same%5Cn++++boolean+exampleVariableOne+%3D+objectEqualityTest.equals%28objectEqualityTestOne%29%3B%5Cn++++boolean+exampleVariableTwo+%3D+objectEqualityTestOne.equals%28objectEqualityTestTwo%29%3B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%2C%22ObjectEqualityTest.java%22%3A%7B%22name%22%3A%22ObjectEqualityTest.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ObjectEqualityTest+%7B%5Cn%5Cn++private+String+exampleVariableThree%3B%5Cn%5Cn++public+ObjectEqualityTest%28String+exampleVaraibleThree%29+%7B%5Cn++++this.exampleVaraibleThree+%3D+exampleVaraibleThree%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe default method for objects only checks whether two objects have the same reference. It does not look at the values of the objects inside the reference to see if those are the same. Therefore, it will work exactly the same as the \"==\" operator. That is why `exampleVariableTwo` returns \"true\" as the reference of the two variables is the same. Even though `objectEqualityTest` and `objectEqualityTestOne` have the exact same statement with the same parameters, it returns \"false\" because they are two individual objects.\n\nThe way to handle this issue in your own work is to create your own `equals()` method in your class and override the default one. We will learn how to override methods later in the course.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889374"}},"updated_at":{"$date":{"$numberLong":"1537610889374"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"e99a6a4932f94d8eb3c9b6dc0d9b5f07_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba61489780383146936249c"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"\"Dot notation\" is an important concept in Java and something that must be paid attention to when creating objects. The members of the class, including variables and methods, are accessed using dot notation. Let's look at a few examples of dot notation.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22oUMJFdmNhOnc%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22DotNotationExample.java%22%3A%7B%22name%22%3A%22DotNotationExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+DotNotationExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++DotNotationTest+dotNotationTest+%3D+new+DotNotationTest%28%29%3B%5Cn++++%2F%2F+any+public+variable+or+method+in+DotNotationTest+can+be%5Cn++++%2F%2F+accessed+through+dot+notation%5Cn++++System.out.println%28dotNotationTest.exampleVariableOne%29%3B%5Cn++++System.out.println%28dotNotationTest.exampleVariableTwo%29%3B%5Cn++++dotNotationTest.print%28%29%3B%5Cn++%7D%5Cn%7D%22%7D%2C%22DotNotationTest.java%22%3A%7B%22name%22%3A%22DotNotationTest.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+DotNotationTest+%7B%5Cn%5Cn++public+String+exampleVariableOne+%3D+%5C%22Objects%5C%22%3B%5Cn++public+int+exampleVariableTwo+%3D+20%3B%5Cn++private+int+exampleVariableThree+%3D+10%3B%5Cn%5Cn++public+void+print%28%29+%7B%5Cn++++System.out.println%28%5C%22Hello+World%21%5C%22%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nIf you recollect from the section on Access Control, only the `public` methods and variables can be accessed through the object. Private methods are not accessible. For classes that are included in Java packages, you can find the documentation online to see what the available public method and variables are. And you can make sure the variables in your classes are either set as `public` or `private` depending on whether or not you want to allow the object to access it and change its data if needed. When you attempt to access a private member of a class, you will throw a runtime error.\n\nAlso, when you see Java reserved word `this` like `this.variablename`, it is a reference to a current object whose method or constructor is being invoked. It's usually unnecessary to use this reserved word but make sure you know how it works.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889386"}},"updated_at":{"$date":{"$numberLong":"1537610889386"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"fdf85f34c1af4d9596e3e3e1009c8adc_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148978038314693624a2"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Encapsulation is the idea of withholding the details of an object from other parts of the program while allowing its use. The object is only used through its access methods, which are carefully written to keep the object consistent and secure. We use the Java reserved word `private` to guarantee other classes have no access to the member of a certain class. Let's see how a `private` variable has access methods that allow it to be viewed.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22jfnXAwRCilCh%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22EncapsulationExample.java%22%3A%7B%22name%22%3A%22EncapsulationExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+EncapsulationExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++EncapsulationTest+encapsulationTest+%3D+new+EncapsulationTest%28%29%3B%5Cn++++System.out.println%28encapsulationTest.getVariableOne%28%29%29%3B%5Cn++%7D%5Cn%7D%22%7D%2C%22EncapsulationTest.java%22%3A%7B%22name%22%3A%22EncapsulationTest.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+EncapsulationTest+%7B%5Cn%5Cn++private+String+exampleVariableOne+%3D+%5C%22Hello+World%21%5C%22%3B%5Cn%5Cn++%2F%2F+private+variables+can+be+accessible+through%5Cn++%2F%2F+public+methods%5Cn++public+String+getVariableOne%28%29+%7B%5Cn++++return+exampleVariableOne%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe `EncapsulationTest` class consists of two main members, the `private` variable `exampleVariableOne` and the method `getVariableOne()`. This is a \"getter\" method, which returns the value of a `private` member of the class. This method ensures `exampleVariableOne` will never be in danger of being changed or manipulated even though it is visible through the getter method. This is one example of how encapsulation works. It's a concept that will help you avoid unwanted errors when writing big programs.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889397"}},"updated_at":{"$date":{"$numberLong":"1537610889397"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"938228f1c1644715a27ba75626aac72d_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148978038314693624a7"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Do you remember casting `int` and `double` data types? \"Type Casts\" are similar to casting but for objects. <br>\n\nThe syntax for type casts is as follows, `(requiredType)(expression/variable)`. <br>\n\nSomething to remember when type casting objects is whether or not the class is a \"descendant\" of another one class (has a parent class). If so, we can create objects that incorporate two different classes. We will look at the concept of inheritance later in the course. For now, keep in mind that every single class is a \"descendant\" of a class called `Object` that exists in the package `java.lang` (automatically-imported), so you can create objects like the one below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22YnAgIPIQySkg%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22TypeCastExample.java%22%3A%7B%22name%22%3A%22TypeCastExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+TypeCastExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++Object+exampleVariableOne+%3D+new+TypeCastTest%28%29%3B%5Cn++++%2F%2F+exampleVariableOne+has+to+be+casted+to+a+TypeCastTest+object%5Cn++++%2F%2F+before+accessing+language%5Cn++++System.out.println%28%28%28TypeCastTest%29exampleVariableOne%29.language%29%3B%5Cn++%7D%5Cn%7D%22%7D%2C%22TypeCastTest.java%22%3A%7B%22name%22%3A%22TypeCastTest.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+TypeCastTest+%7B%5Cn%5Cn++public+String+language+%3D+%5C%22Java%5C%22%3B%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nWhen we call `Object exampleVariableOne = new TypeCastTest()`, `exampleVariableOne` becomes an instance of both `Object` and `TypeCastTest`. Even though this is allowed in Java, you can't actually call a method or access a variable from the `TypeCastTest` class because you have to specify which instance you are referring to when attempting to access any members of a class. The solution is to cast `exampleVariableOne` to a `TypeCastTest` so that the program sees which class you are referring to and accesses the members from the right class.\n\nThis is one of the more complex ideas in object-oriented programming, but will be crucial when we dive into inheritance and interface later in the course.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889408"}},"updated_at":{"$date":{"$numberLong":"1537610889408"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"dd4c0b0274e44910b9c6a2c0496a79bf_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148978038314693624ad"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"A \"static\" object is unique; it belongs to the class rather than the instance of the class. In other words, a static variable is only allocated to the memory once: when the class loads. No matter how many instances you create from a class, the static variable is only allocated to the memory once, making your program memory efficient. When a program is running and there's only one instance of something, it is \"static\". Take a look at the program below for examples of `static` methods and variables, and how we can call them without the use of an object.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22gbayMBxLpkHn%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22StaticFieldsExample.java%22%3A%7B%22name%22%3A%22StaticFieldsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+StaticFieldsExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+static+variables+and+methods+can+be+accessed%5Cn++++%2F%2F+without+creating+an+object%5Cn++++System.out.println%28StaticFieldsTest.exampleVariableOne%29%3B%5Cn++++StaticFieldsTest.print%28%29%3B%5Cn++%7D%5Cn%7D%22%7D%2C%22StaticFieldsTest.java%22%3A%7B%22name%22%3A%22StaticFieldsTest.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+StaticFieldsTest+%7B%5Cn%5Cn++public+static+String+exampleVariableOne+%3D+%5C%22Java%5C%22%3B%5Cn++private+static+String+exampleVariableTwo%3D+%5C%22Hello+World%21%5C%22%3B%5Cn%5Cn++public+static+void+print%28%29+%7B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nWe don't need to create a new object to access \"static\" members of a class. We call the class name and use \"dot notation\" to specify the member we want to access. Static members are attached to a class rather than an object or an instance of the class.\n\nAs a programmer, it is important to note that since there is only one version of the \"static\" members, when the variable's value is changed, the value of that variable is changed for every object in the class.\n\nAlso, keep in mind that the main method of each class is `static` because there are no objects that exist for the class when the JVM calls the main method. Objects are usually created inside the main method, which is why the method itself has to be `static`.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889417"}},"updated_at":{"$date":{"$numberLong":"1537610889417"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"311a6deb059b4d84a925f9e9fc3a2727_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148978038314693624b3"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Object oriented languages like Java have a feature called \"inheritance\" which allow programmers to define new classes based on an existing class. Instead of starting from nothing, we can build upon a previously existing class, or a \"superclass\", and add more variables and methods to the superclass. The program below shows a simple implementation of inheritance.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22SqUhOqZgIHgZ%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22EnglishGreeting.java%22%3A%7B%22name%22%3A%22EnglishGreeting.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+EnglishGreeting+extends+Greeting+%7B%5Cn%5Cn++public+void+print%28%29+%7B%5Cn++++%2F%2F+the+InheritanceTestTwo+class+inherits+variables%5Cn++++%2F%2F+and+methods+from+InheritanceTestOne%5Cn++++System.out.println%28exampleVariableOne+%2B+%5C%22+subclass%5C%22%29%3B%5Cn++++printer%28%29%3B%5Cn++%7D%5Cn%7D%22%7D%2C%22Greeting.java%22%3A%7B%22name%22%3A%22Greeting.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+Greeting+%7B%5Cn%5Cn++public+String+exampleVariableOne+%3D+%5C%22Hello+World%21%5C%22%3B%5Cn%5Cn++public+void+printer%28%29+%7B%5Cn++++System.out.println%28exampleVariableOne+%2B+%5C%22+superclass%5C%22%29%3B%5Cn++%7D%5Cn%7D%22%7D%2C%22InheritanceExample.java%22%3A%7B%22name%22%3A%22InheritanceExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+InheritanceExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++EnglishGreeting+englishGreeting+%3D+new+EnglishGreeting%28%29%3B%5Cn++++englishGreeting.print%28%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nWe classify the classes into \"superclass\" and \"subclass\". Let's use the \"is-a\" relational comparison to show the relationship between the super and the sub class like this; for the program above, `EnglishGreeting` is-a `Greeting`.\n\nThe subclass is used to construct objects that look like the superclass's objects, but with added features such as extra variables and methods. In order for the subclass to use the public methods and variables, Java reserved word `extends` is used when implementing inheritance code.\n\nBy having a superclass with general methods and variables that apply to all the subclasses, you can save a lot of coding time at the individual subclass level.\n\nYou can create objects using the syntax `SuperClass objectname = new SubClass();` because the subclass extends from a superclass and \"is-a\" superclass. Switching the position of the superclass and the subclass here will throw an error.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889435"}},"updated_at":{"$date":{"$numberLong":"1537610889435"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"2f9d91ab60c94832a73820f97b245237_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148978038314693624b9"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"When implementing inheritance, use the Java reserved word `super` to call a method in the superclass or to invoke the constructor of the superclass. Remember that `private` methods cannot be accessed by the subclass. Take a look below to see how `super` is used.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22JRJVGCQyxZHp%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22SuperExample.java%22%3A%7B%22name%22%3A%22SuperExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+SuperExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++SuperTestTwo+superTestTwo+%3D+new+SuperTestTwo%2810%2C20%29%3B%5Cn++%7D%5Cn%7D%22%7D%2C%22SuperTestOne.java%22%3A%7B%22name%22%3A%22SuperTestOne.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+SuperTestOne+%7B%5Cn%5Cn++public+int+exampleVariableOne+%3D+10%3B%5Cn%5Cn++public+SuperTestOne%28int+parameterOne%29+%7B%5Cn++++this.exampleVariableOne+%3D+parameterOne%3B%5Cn++%7D%5Cn%5Cn++public+void+print%28%29%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++%7D%5Cn%7D%22%7D%2C%22SuperTestTwo.java%22%3A%7B%22name%22%3A%22SuperTestTwo.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+SuperTestTwo+extends+SuperTestOne+%7B%5Cn%5Cn++public+SuperTestTwo%28int+parameterOne%2C+int+parameterTwo%29+%7B%5Cn++++super%28parameterOne%29%3B%5Cn++++super.print%28%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe word `super` is usually used to call the constructor, but could also be used to call methods. When you start using inheritance in the future, you will most likely be using `super` more for invoking constructors of the superclass. In the code above, `SuperTestTwo` invokes the constructor of its superclass `SuperTestOne` and sets `parameterOne` directly from the superclass. Therefore, when the `print()` method is called in the `SuperTestTwo` class, it prints 10.\n\nRemember that `super();` has to be the first statement in the subclass' constructor. Otherwise, you will get a compile-time error. Also, if you extend a class without a zero-argument constructor, like `SuperTestTwo` above, make sure to use one of the superclass' constructors and have the same parameters. Another data type in the parameter would cause an error. But, if the constructor in the superclass has no arguments(parameters), Java will automatically call one for you in the subclass, so `super();` will not be necessary in that case.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889446"}},"updated_at":{"$date":{"$numberLong":"1537610889446"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"88e476855f2641798e07b272d2ab78c0_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148978038314693624bf"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Overriding is an important concept when dealing with inheritance. A subclass' method overrides a superclass' method when it has the same signature, meaning it has the same name and the same parameters. See an example of how you can override a superclass' method below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22lrPHOinDLuWD%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22OverrideMethodTestOne.java%22%3A%7B%22name%22%3A%22OverrideMethodTestOne.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+OverrideMethodTestOne+%7B%5Cn%5Cn++public+String+exampleVariableOne+%3D+%5C%22Java%5C%22%3B%5Cn%5Cn++public+void+print%28%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++%7D%5Cn%7D%22%7D%2C%22OverrideMethodTestTwo.java%22%3A%7B%22name%22%3A%22OverrideMethodTestTwo.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+OverrideMethodTestTwo+extends+OverrideMethodTestOne+%7B%5Cn%5Cn++public+String+exampleVariableTwo+%3D+%5C%22World%5C%22%3B%5Cn%5Cn++%2F%2F+overrides+the+print+method+from+OverrideMethodTestOne%5Cn++public+void+print%28%29+%7B%5Cn++++%2F%2F+calls+the+print+method+from+the+OverrideMethodTestOne%5Cn++++super.print%28%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%2C%22OverridingMethodsExample.java%22%3A%7B%22name%22%3A%22OverridingMethodsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+OverridingMethodsExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++OverrideMethodTestOne+objectOne+%3D+new+OverrideMethodTestTwo%28%29%3B%5Cn++++objectOne.print%28%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe method `print()` exists in the subclass and superclass with the same signature, and is overridden by the subclass as shown above. The reason why the subclass `OverrideMethodTwo` overrides the method `print()` is because it wants to print the extra `String` \"World\" on the console. When the statements `OverrideMethodTestOne objectOne = new OverrideMethodTestTwo();` and `objectOne.print()` are called, the program first searches for the `print()` method in the class `OverrideMethodTestTwo` before it looks for the `print()` method in the superclass, which is why the `print()` method in the subclass is used. If the `print()` method was not overridden in the subclass, only \"Java\" would end up being printed to the console.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889455"}},"updated_at":{"$date":{"$numberLong":"1537610889455"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"0f00b017c3824a67ad11690a67458161_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148978038314693624c5"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"In Java an \"abstract\" class is a class that cannot be instanced but is a superclass for several other related subclasses. The abstract class contains abstract and non-abstract methods, variables, and even constructors that the subclass inherits. The Java reserved word `abstract` can only be used in an abstract class and will cause an error if used in a regular class. This is how an abstract class can be utilized.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22mfccTfvbmlFh%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22AbstractClassTest.java%22%3A%7B%22name%22%3A%22AbstractClassTest.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+abstract+class+AbstractClassTest+%7B%5Cn%5Cn++%2F%2F+abstract+methods+only+have+to+be+declared%5Cn++abstract+void+print%28%29%3B%5Cn%5Cn++abstract+void+printGreeting%28%29%3B%5Cn%7D%22%7D%2C%22AbstractClassesExample.java%22%3A%7B%22name%22%3A%22AbstractClassesExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+AbstractClassesExample+extends+AbstractClassTest+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++AbstractClassesExample+abstractClassesExample+%3D+new+AbstractClassesExample%28%29%3B%5Cn++++abstractClassesExample.print%28%29%3B%5Cn++++abstractClassesExample.printGreeting%28%29%3B%5Cn++%7D%5Cn%5Cn++%2F%2F+implements+the+abstract+method+print%28%29%5Cn++public+void+print%28%29+%7B%5Cn++++System.out.println%28%5C%22Java+World%5C%22%29%3B%5Cn++%7D%5Cn%5Cn++%2F%2F+implements+the+abstract+method+printGreeting%28%29%5Cn++public+void+printGreeting%28%29+%7B%5Cn++++System.out.println%28%5C%22Hello+World%21%5C%22%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe class `AbstractClassesExample` inherits the two abstract methods `print()` and `printGreeting()` from the abstract class `AbstractClassTest`. When extending from an abstract class, we first define a method with the same name as an abstract method before overriding them with the proper method in a regular class. If `print()` or `printGreeting()` did not exist in the `AbstractClassesExample` class, it would cause an error. In a rare situation where necessary, an abstract class can also extend and implement another abstract class.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889464"}},"updated_at":{"$date":{"$numberLong":"1537610889464"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"5ead9856e37b40f693d07038b1eabed7_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148978038314693624ca"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Java functions with \"single inheritance\", meaning that a subclass can only inherit from one superclass. The reserved word `extends` can only be used to extend from one class. However, Java has interfaces, a class that allows multiple inheritance. An interface is a set of requirements that a class must implement. An interface is a list of constants and method headers with no method bodies. All methods and constants must be implemented by the class. Let's see how an interface can be used.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22rFlWUpcIUBEU%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22InterfaceTestOne.java%22%3A%7B%22name%22%3A%22InterfaceTestOne.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+interface+InterfaceTestOne+%7B%5Cn%5Cn++int+exampleVariableOne+%3D+-5%3B%5Cn++void+print%28%29%3B%5Cn%7D%22%7D%2C%22InterfaceTestThree.java%22%3A%7B%22name%22%3A%22InterfaceTestThree.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+InterfaceTestThree+implements+InterfaceTestOne%2C+InterfaceTestTwo+%7B%5Cn%5Cn++%2F%2F+implements+the+method+print%28%29+from+InterfaceTestOne%5Cn++public+void+print%28%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++%7D%5Cn%5Cn++%2F%2F+implements+the+method+printGreeting%28%29+from+InterfaceTestOne%5Cn++public+void+printGreeting%28%29+%7B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%2C%22InterfaceTestTwo.java%22%3A%7B%22name%22%3A%22InterfaceTestTwo.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+interface+InterfaceTestTwo+%7B%5Cn%5Cn++String+exampleVariableTwo+%3D+%5C%22Hello+World%21%5C%22%3B%5Cn++void+printGreeting%28%29%3B%5Cn%7D%22%7D%2C%22InterfacesExample.java%22%3A%7B%22name%22%3A%22InterfacesExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+InterfacesExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++InterfaceTestThree+interfaceTestThree+%3D+new+InterfaceTestThree%28%29%3B%5Cn++++interfaceTestThree.print%28%29%3B%5Cn++++interfaceTestThree.printGreeting%28%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe Java reserved word `implements` is used instead of `extends` for interfaces. You are able to implement multiple interfaces by separating them with a comma. The class that implements an interface inherits the methods and the instance variables of the interface. However, similar to abstract classes, the methods have to be declared inside the class with a proper method body. The variables implemented in the interface do not necessarily have to be used in the class. In addition, methods from the interface must be declared `public`. All variables in an interface are `public`, `static`, and `final` by default.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889472"}},"updated_at":{"$date":{"$numberLong":"1537610889472"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"87d448ab5c3a443791060d7bfa1d13b8_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148978038314693624d0"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"All Java objects are polymorphic. \"Polymorphism\" is the ability of an object to take on different forms. The most common use of polymorphism occurs when the superclass reference is used to refer to a subclass object. We touched on this concept in the chapter on inheritance. Superclasses can be used to create objects such as `Superclass objectName = new SubClass();`. The program below is an example of using both an abstract class and an interface.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22RpgTwuaobRqs%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22PolymorphismExample.java%22%3A%7B%22name%22%3A%22PolymorphismExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+PolymorphismExample+extends+PolymorphismTestOne+implements+PolymorphismTestTwo+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++Object+polymorphismExample+%3D+new+PolymorphismExample%28%29%3B%5Cn++++%28%28PolymorphismExample%29polymorphismExample%29.print%28%29%3B%5Cn++++%28%28PolymorphismExample%29polymorphismExample%29.printGreeting%28%29%3B%5Cn++++%28%28PolymorphismExample%29polymorphismExample%29.printNumber%28%29%3B%5Cn++%7D%5Cn%5Cn++%2F%2F+implements+print+method+from+abstract+class%5Cn++public+void+print%28%29+%7B%5Cn++++System.out.println%28%5C%22Java%5C%22%29%3B%5Cn++%7D%5Cn%5Cn++%2F%2F+implements+printGreeting+method+from+abstract+class%5Cn++public+void+printGreeting%28%29+%7B%5Cn++++System.out.println%28%5C%22Hello+World%21%5C%22%29%3B%5Cn++%7D%5Cn%5Cn++%2F%2F+implements+printNumber+method+from+interface%5Cn++public+void+printNumber%28%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++%7D%5Cn%7D%22%7D%2C%22PolymorphismTestOne.java%22%3A%7B%22name%22%3A%22PolymorphismTestOne.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+abstract+class+PolymorphismTestOne+%7B%5Cn%5Cn++abstract+void+print%28%29%3B%5Cn%5Cn++abstract+void+printGreeting%28%29%3B%5Cn%7D%22%7D%2C%22PolymorphismTestTwo.java%22%3A%7B%22name%22%3A%22PolymorphismTestTwo.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+interface+PolymorphismTestTwo+%7B%5Cn%5Cn++int+exampleVariableOne+%3D+150%3B%5Cn%5Cn++void+printNumber%28%29%3B%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nWe utilized type casts and the idea of polymorphism by creating the object `polymorphismExample` using `Object` and `PolymorphismExample`. We have to cast the object so that the program knows which methods we are calling. Because the `PolymorphismExample` class is not overriding methods from the `Object` class, casting is required.\n\nFor a programmer, it is essential to know about objects and when to use each type of class as we progress to higher level coding, programing, and idea developing. Look back at the topics covered thus far to ensure a strong grasp of all concepts before moving forward. It is imperative to have a strong foundation in order to build tall.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889482"}},"updated_at":{"$date":{"$numberLong":"1537610889482"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"63a1b24a8a6c4406bc107cebc5d749a9_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148978038314693624e6"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"In Java, recursion is a programming technique in which a method calls itself to calculate a result. This method is an efficient way to solve problems with only a few lines of code. Take a look at the example of recursion below and figure out what it does.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22MFOfzJQBZCLF%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22RecursiveMethodsExample.java%22%3A%7B%22name%22%3A%22RecursiveMethodsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+RecursiveMethodsExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+prints+1-10+in+descending+order%5Cn++++print%2810%29%3B%5Cn++%7D%5Cn%5Cn++public+static+void+print%28int+parameterOne%29+%7B%5Cn++++if+%28parameterOne+%5Cu003e+0%29+%7B%5Cn++++++System.out.print%28parameterOne+%2B+%5C%22+%5C%22%29%3B%5Cn++++++parameterOne--%3B%5Cn++++++%2F%2F+recursive+call%5Cn++++++print%28parameterOne%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nRecursion means that within the course of the method body, there is a statement that calls the same method as the method it belongs in. To prevent a repeating loop from occurring, every recursive method has a \"base case\" which exits the method when the method is complete.\n\nIn the method above, the base case is the `if` statement because the method will stop when `parameterOne` is less than 0. Let's track what happens when the method is called.\n\n1. `print(10);`\n2. `System.out.println(10 + \" \");`\n3. `parameterOne--;`\n4. `print(9);`\n5. `System.out.println(9 + \" \");`\n6. `print(8);`\n\n and so on until the boolean expression in the `if` statement evaluates to false.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889568"}},"updated_at":{"$date":{"$numberLong":"1537610889568"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"b4060956866e427592237db003d099a8_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148978038314693624ec"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"In Java, the concept of \"overloading\" is when two or more methods of a class have the same name but different \"parameter lists\". In this special case, when a method is called, the program calls the correct method by checking the parameters. To understand this concept further, let's think back to when we were working with the `Math` class. When we used the method `Math.abs()`, we experienced the concept of overloading as the method had four different choices for the parameter; the data types `int`, `double`, `float`, and `long`. Let's dive into how we can overload a method.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22DyGcDJhpcmHS%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22OverloadingMethodsExample.java%22%3A%7B%22name%22%3A%22OverloadingMethodsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+OverloadingMethodsExample+%7B%5Cn%5Cn++public+static+float+exampleVariableOne+%3D+3.14f%3B%5Cn++public+static+double+exampleVariableTwo+%3D+Math.PI%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++print%28exampleVariableOne%29%3B%5Cn++++print%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%5Cn++%2F%2F+two+identical+methods+with+different+parameters%5Cn++%2F%2F+takes+in+float+value+as+a+parameter%5Cn++public+static+void+print%28float+parameterOne%29+%7B%5Cn++++System.out.println%28%5C%22float%3A+%5C%22+%2B+parameterOne%29%3B%5Cn++%7D%5Cn++%2F%2F+takes+in+a+double+value+as+a+parameter%5Cn++public+static+void+print%28double+parameterOne%29+%7B%5Cn++++System.out.println%28%5C%22double%3A+%5C%22+%2B+parameterOne%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe method named `print()` is overloaded when we create two methods with the same name containing different parameters. One takes in `double` values while the other takes `float` values. The only difference between the methods has to be the parameters in order for it to be considered \"overloading\". One rule to keep in mind when working with overloaded methods is that return types for the methods cannot be the only thing that separates one method from the other. For example, creating two methods with the headers `public int methodA()` and `public double methodA()` will result in an error.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889581"}},"updated_at":{"$date":{"$numberLong":"1537610889581"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"3174b54a6baf423ba8fb97cca0a643bf_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6148978038314693624f2"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Let's examine the function of a \"base case\". It returns a value and does not make any more recurring calls. The values for which the base case stops recurring calls are particular specific inputs. For base cases that are factorial-based, the base case happens when the parameter becomes equal to one. Take a look at the code below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22OiLpEbooHmoK%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22IdentifyingBaseCaseExample.java%22%3A%7B%22name%22%3A%22IdentifyingBaseCaseExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+IdentifyingBaseCaseExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+10%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28factorial%283%29%29%3B%5Cn++%7D%5Cn%5Cn++public+static+int+factorial%28int+parameterOne%29+%7B%5Cn++++int+result%3B%5Cn++++%2F%2F+base+case%5Cn++++%2F%2F+returns+1+when+exampleVariableTwo+%3D+1%5Cn++++if+%28parameterOne+%3D%3D+1%29+%7B%5Cn++++++return+1%3B%5Cn++++%7D%5Cn++++%2F%2F+calls+factorial+with+exampleVariableTwo+-+1%5Cn++++%2F%2F+and+multiplies+the+current+value+of+exampleVariableTwo%5Cn++++%2F%2F+with+the+result+of+the+factorial%28exampleVariableTwo+-+1%29%5Cn++++result+%3D+factorial%28parameterOne+-+1%29+%2A+parameterOne%3B%5Cn++++return+result%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nDid you receive an output of six? The program is working as intended because three factorial is equal to six. If we take a look at what happens in the method step by step, we see that the `if` statement is the \"base case\".\n\n1. `factorial(3)`\n2. `result = factorial(2) * 3;`\n3. `factorial(2)`\n4. `result = factorial(1) * 2;`\n5. `factorial(1)`\n6. `return 1;`\n7. `result = 1 * 2;`\n8. `return result;` (result is 2)\n9. `result = 2 * 3;`\n10. `return result;` (result is 6)\n\nLine four and seven, two and nine are referring to the same line of code. This is because the `return` statement can't be called until `factorial(2)` and `factorial(1)` returned a number.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889595"}},"updated_at":{"$date":{"$numberLong":"1537610889595"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"6443bd0a08d3458893a26eeb3960398e_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614897803831469362503"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Let's dive into search functionality. Sequential search is a basic form of searching that checks if an element is present in a given list. This method will return a value telling us whether or not the searched value is in the given list. Take a look at the code below, where we have a method that searches through the array for integer '4'.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22gnYJLPsKZspM%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22SequentialSearchExample.java%22%3A%7B%22name%22%3A%22SequentialSearchExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+SequentialSearchExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++int%5B%5D+exampleVariableOne+%3D+%7B2%2C+9%2C+6%2C+7%2C+4%2C+5%2C+3%2C+0%2C+1%7D%3B%5Cn++++int+target+%3D+4%3B%5Cn++++sequentialSearch%28exampleVariableOne%2C+target%29%3B%5Cn++%7D%5Cn%5Cn++public+static+void+sequentialSearch%28int%5B%5D+parameterOne%2C+int+parameterTwo%29+%7B%5Cn++++int+index+%3D+-1%3B%5Cn++++%2F%2F+searches+each+index+of+the+array+until+it+reaches+the+last+index%5Cn++++for+%28int+i+%3D+0%3B+i+%5Cu003c+parameterOne.length%3B+i%2B%2B%29+%7B%5Cn++++++if+%28parameterOne%5Bi%5D+%3D%3D+parameterTwo%29+%7B%5Cn++++++++%2F%2F+if+the+target+is+found%2C+int+index+is+set+as+the+value+of+i+and%5Cn++++++++%2F%2F+the+for+loop+is+terminated%5Cn++++++++index+%3D+i%3B%5Cn++++++++break%3B%5Cn++++++%7D%5Cn++++%7D%5Cn++++if+%28index+%3D%3D+-1%29+%7B%5Cn++++++System.out.println%28%5C%22Your+target+integer+does+not+exist+in+the+array%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22Your+target+integer+is+in+index+%5C%22+%2B+index+%2B+%5C%22+of+the+array%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe sequential search uses a concept we have already mastered, `for` or `while` loops that search for a specified integer in an array. The concept is called \"sequential search\" as it goes through the elements starting from the first one, indexed \"0\", all the way through to the final index. Once the search runs, it returns the index of the targeted value if the targeted value exists in the array. This search functionality can be used on any type of \"array\" or `ArrayList`, but it may not be your preferred way of searching once you learn about other search methods in the future.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889663"}},"updated_at":{"$date":{"$numberLong":"1537610889663"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"d5fec85f465b4b96903656eaaccf2469_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614897803831469362509"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"As we discussed previously, sequential search can take an excessively long time since they look through every element in an array. This is like flipping through each page of the dictionary from the beginning even if we are trying to find the word \"zero\". Let's introduce the concept of binary search, which is similar to flipping right to the 'Z' section of the dictionary to start looking for the word \"zero\". If an array or `ArrayList` is ordered, the binary search method can be used. Look below and review the functionality of a binary search.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22ZooIinTjGFDi%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22BinarySearchExample.java%22%3A%7B%22name%22%3A%22BinarySearchExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+BinarySearchExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+the+array+has+to+be+sorted+before+binary+search%5Cn++++int%5B%5D+exampleVariableOne+%3D+%7B1%2C+11%2C+24%2C+34%2C+67%2C+89%2C+102%7D%3B%5Cn++++int+target+%3D+102%3B%5Cn++++binarySearch%28exampleVariableOne%2C+target%29%3B%5Cn++%7D%5Cn%5Cn++public+static+void+binarySearch%28int%5B%5D+parameterOne%2C+int+parameterTwo%29+%7B%5Cn++++int+index+%3D+-1%3B%5Cn++++int+lowEnd+%3D+0%3B%5Cn++++int+highEnd+%3D+parameterOne.length+-+1%3B%5Cn++++while+%28highEnd+%5Cu003e%3D+lowEnd%29+%7B+%2F%2F+Difference+of+highEnd+and+lowEnd+decreases+as+the+search+range+narrows%5Cn++++++int+middle+%3D+%28lowEnd+%2B+highEnd%29+%2F+2%3B%5Cn++++++%2F%2F+checks+if+the+middle+of+the+lowEnd+and+the+highEnd+is+the+target%5Cn++++++if+%28parameterOne%5Bmiddle%5D+%3D%3D+parameterTwo%29+%7B%5Cn++++++++index+%3D+middle%3B+%2F%2F+the+target+is+found%5Cn++++++++break%3B%5Cn++++++%7D+else+if+%28parameterOne%5Bmiddle%5D+%5Cu003c+parameterTwo%29+%7B%5Cn++++++++%2F%2F+changes+the+lowEnd+to+narrow+the+search+range%5Cn++++++++lowEnd+%3D+middle+%2B+1%3B%5Cn++++++%7D+else+if+%28parameterOne%5Bmiddle%5D+%5Cu003e+parameterTwo%29+%7B%5Cn++++++++%2F%2F+changes+the+highEnd+to+narrow+the+search+range%5Cn++++++++highEnd+%3D+middle+-+1%3B%5Cn++++++%7D%5Cn++++%7D%5Cn++++if+%28index+%3D%3D+-1%29+%7B%5Cn++++++System.out.println%28%5C%22Your+target+integer+does+not+exist+in+the+array%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22Your+target+integer+is+in+index+%5C%22+%2B+index+%2B+%5C%22+of+the+array%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nAgain, a binary search will only work if we have a sorted list. Duplicate values don't affect the search. A binary search starts at the middle of a sorted list and assess if the value it's called to look for is greater than of less than the middle. This initial procedure establishes whether the target value is in the first or second half of the list, at which point the search changes its high and low values to focus on the correct half of the list. Then, the search enters the middle of its chosen half and does the exact same procedure over and over again until the target value is found.\n\nAlthough you will not need to know how to write your own search methods, you do have to understand what a search method does and how it works in order to use them effectively.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889674"}},"updated_at":{"$date":{"$numberLong":"1537610889674"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"b61069787f034ca68167b22f85ad4596_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba61489780383146936250f"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"In Java, \"selection sort\" is a partnership of searching and sorting. We can agree that data is much easier to process and handle if it is sorted, so let's see how this sort method works.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22CNWorLltfIUS%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22SelectionSortExample.java%22%3A%7B%22name%22%3A%22SelectionSortExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+SelectionSortExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++int%5B%5D+exampleVariableOne+%3D+%7B17%2C+5%2C+21%2C+8%2C+19%2C+2%2C+23%2C+15%2C+4%2C+13%7D%3B%5Cn++++selectionSort%28exampleVariableOne%29%3B%5Cn++++System.out.println%28%5C%22Sorted+Values%3A+%5C%22%29%3B%5Cn++++for+%28int+val+%3A+exampleVariableOne%29+%7B%5Cn++++++System.out.print%28val+%2B+%5C%22+%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%5Cn++public+static+void+selectionSort%28int%5B%5D+parameterOne%29+%7B%5Cn++++for+%28int+i+%3D+0%3B+i+%5Cu003c+parameterOne.length+-+1%3B+i%2B%2B%29+%7B%5Cn++++++int+min+%3D+i%3B%5Cn++++++for+%28int+j+%3D+i+%2B+1%3B+j+%5Cu003c+parameterOne.length%3B+j%2B%2B%29+%7B%5Cn++++++++if+%28parameterOne%5Bj%5D+%5Cu003c+parameterOne%5Bmin%5D%29+%7B%5Cn++++++++++min+%3D+j%3B%5Cn++++++++%7D%5Cn++++++%7D%5Cn++++++%2F%2F+finds+the+smallest+value+in+the+array+and+swaps+it+with%5Cn++++++%2F%2F+the+value+at+index+0%5Cn++++++%2F%2F+the+process+continues+until+the+array+is+sorted%5Cn++++++int+temp+%3D+parameterOne%5Bi%5D%3B%5Cn++++++parameterOne%5Bi%5D+%3D+parameterOne%5Bmin%5D%3B%5Cn++++++parameterOne%5Bmin%5D+%3D+temp%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThere are two loops in a selection sort. The inner loop finds the next smallest or largest value while the outer loop places that value into its proper location. Although selection sort is one of the easier sorts to code, it is also fairly inefficient as there is no way you can end the sort early, even if the list is already sorted. No matter what the state of the list is, the selection sort will go through each index, starting with zero, and sort each element through to the end.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889745"}},"updated_at":{"$date":{"$numberLong":"1537610889745"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"7e0dd466c6a3434b94c4704b7b824afa_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614897803831469362515"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Insertion sort is a more efficient type of sort as it passes through an array only once and puts each element in its correct location as it is analyzed. This method is similar to organizing a handful of playing cards where you pick up each card and insert it into its correct position in your hand of organized cards. Insertion sort divides the array or `ArrayList` into two sub-arrays; one is always sorted and increases in size as the sort continues, like the organized cards in your hand. The second sub-array is unsorted and contains all the elements yet to be inserted into the first sub-array, like the random cards you are picking up. The second sub-array decreases in size as the sort goes on, while the first sub-array increases in size. Let's take a look at the insertion sort below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22OrQKZiwWtQKA%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22InsertionSortExample.java%22%3A%7B%22name%22%3A%22InsertionSortExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+InsertionSortExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++int%5B%5D+exampleVariableOne+%3D+%7B17%2C+5%2C+21%2C+8%2C+19%2C+2%2C+23%2C+15%2C+4%2C+13%7D%3B%5Cn++++insertionSort%28exampleVariableOne%29%3B%5Cn++++System.out.println%28%5C%22Sorted+Values%3A+%5C%22%29%3B%5Cn++++for+%28int+val+%3A+exampleVariableOne%29+%7B%5Cn++++++System.out.print%28val+%2B+%5C%22+%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%5Cn++public+static+void+insertionSort%28int%5B%5D+parameterOne%29+%7B%5Cn++++for+%28int+j+%3D+1%3B+j+%5Cu003c+parameterOne.length%3B+j%2B%2B%29+%7B%5Cn++++++int+k+%3D+j%3B%5Cn++++++while+%28k+%5Cu003e+0+%5Cu0026%5Cu0026+parameterOne%5Bk+-+1%5D+%5Cu003e+parameterOne%5Bk%5D%29+%7B%5Cn++++++++%2F%2F+looks+at+the+array+in+order+and+moves+every+value%5Cn++++++++%2F%2F+to+where+they+should+be+starting+from+index+0%5Cn++++++++int+temp+%3D+parameterOne%5Bk+-+1%5D%3B%5Cn++++++++parameterOne%5Bk+-+1%5D+%3D+parameterOne%5Bk%5D%3B%5Cn++++++++parameterOne%5Bk%5D+%3D+temp%3B%5Cn++++++++k--%3B%5Cn++++++%7D%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nCheck out the `java.util.Array` class when you are ready to start using the pre-written searches and sort methods to save yourself time. Just make sure you always know the correct parameters and syntax. Although you are not writing your own sort methods in the future, you will need to know how one works and be able to decipher the code. In fact, you should be familiar with all four search and sort methods covered in the course.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889784"}},"updated_at":{"$date":{"$numberLong":"1537610889784"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"eb7f6c6d0e9d40a0aad6553d57824c2b_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614897803831469362520"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"From the start of our course we have pointed out scenarios in coding that may cause runtime errors, which are almost always caused by \"exceptions\". An exception is something that happens while the program is executing. Whatever this exception may be, it interrupts or breaks the normal flow of the program's executable directions. Let's dive deeper into what exception errors are and how we can detect and resolve them!\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22BoiimbhDCJrx%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22CatchingExceptionExample.java%22%3A%7B%22name%22%3A%22CatchingExceptionExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+CatchingExceptionExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++try+%7B%5Cn++++++%2F%2F+NumberFormatException+will+be+thrown+because+a+String%5Cn++++++%2F%2F++with+characters+cannot+be+converted+into+an+integer+value%5Cn++++++String+exampleVariableOne+%3D+%5C%22Hello+World%21%5C%22%3B%5Cn++++++int+exampleVariableTwo+%3D+Integer.parseInt%28exampleVariableOne%29%3B%5Cn++++%7D+catch+%28NumberFormatException+e%29+%7B+%2F%2F+the+character+%27e%27+is+commonly+used%2C+but+you+are+free+to+name+it+whatever%5Cn++++++%2F%2F+If+a+NumberFormatException+is+thrown%2C+the+program%5Cn++++++%2F%2F+will+print+%5C%22Number+Format+Exception%5C%22%5Cn++++++System.out.println%28%5C%22Number+Format+Exception%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nIn the scenario above, an error is supposed to occur because we try to convert characters into integers. Instead of the error, the program caught the exception \"NumberFormatException\" itself, and printed out a different result specified by us beforehand.\n\nHow do we catch an exception? Set the code that might throw the error inside a `try{}` block. Then, set the code that catches and handles the exception inside a `catch{}` block. Then, when the program runs, if there is a statement inside the `try{}` block that throws a \"NumberFormatException\", it causes the `catch{}` block to execute, causing the leftover statements in the `try{}` block to remain unexecuted. Remember that the `catch{}` block is executed only if the exception thrown in the `try{}` block matches the exception inside the parentheses of the `catch{}` block.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889807"}},"updated_at":{"$date":{"$numberLong":"1537610889807"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"41f40b95939e419e83ef56d15147675e_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614897803831469362526"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"We examined scenarios where our own code throws errors and are familiar with the exceptions that are generally defined in Java. But have you thought about possible reasons you would want to create your own exceptions? Why, you ask?\n\nFor example, when users are utilizing your program and entering data into it, for instance their name, if they enter numbers or symbols into a name field, would you want that user to get an error specifically for that field in your program letting them know they must use characters? This is why programmers in Java are able to throw exceptions with error messages that are specific to their individual programs. Let's see an example below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22dZMzMsKBNpkE%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ThrowingExceptionsExample.java%22%3A%7B%22name%22%3A%22ThrowingExceptionsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ThrowingExceptionsExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+1%3B%5Cn++public+static+int+exampleVariableTwo+%3D+12%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29%7B%5Cn++++add%28exampleVariableOne%2C+exampleVariableTwo%29%3B%5Cn++%7D%5Cn%5Cn++public+static+void+add%28int+exampleVariableOne%2C+int+exampleVariableTwo%29+throws+ArithmeticException%2C+NumberFormatException+%7B%5Cn++++%2F%2F+creates+a+new+ArithmeticException+condition+where%5Cn++++%2F%2F+exampleVariableOne+and+exampleVariableTwo+cannot+be+0%5Cn++++if+%28exampleVariableOne+%3D%3D+0+%7C%7C+exampleVariableTwo+%3D%3D+0%29+%7B%5Cn++++++throw+new+ArithmeticException%28%5C%22One+of+the+exampleVariables+are+0%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22The+sum+of+the+two+numbers%3A+%5C%22+%2B+%28exampleVariableOne+%2B+exampleVariableTwo%29%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe program above throws the \"ArithmeticException\" if one of the parameters are zero as adding nothing defeats the purpose of using the `add()` method. The exception can either be handled with a `catch{}` block or thrown to the user as an exception error.\n\nWhen you have one exception you need to throw, use the following syntax, `throw new ExceptionName(description)`, where \"ExceptionName\" has to match one of the exceptions that are already defined in Java. If you are throwing two or more exceptions, you can use the word `throws` in the method header and list out the exception names with commas separating them. The program above is an example of how you can throw exceptions in the method header.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889819"}},"updated_at":{"$date":{"$numberLong":"1537610889819"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"29643b80659e4180839a4c16f4b69911_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba61489780383146936252c"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Let's take time to learn about some of the most common exceptions, what each one means, and how to handle them as you start your writing your own code. In order for you to try and test the exception causing scenarios, use the `try{}` and `catch{}` blocks in each scenario.\n\nHave you experienced the \"ArrayIndexOutOfBoundsException\" before? It is thrown when you try to access an array through an index that doesn't exist in the array. For example, calling an index that is less than 0 or greater than or equal to the length of the array will cause this error. Take a look at the code below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22GDKExhmcvXaw%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ArrayIndexOutOfBoundsExample.java%22%3A%7B%22name%22%3A%22ArrayIndexOutOfBoundsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ArrayIndexOutOfBoundsExample+%7B%5Cn%5Cn++public+static+int%5B%5D+exampleVariableOne+%3D+new+int%5B10%5D%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++try+%7B%5Cn++++++%2F%2F+ArrayIndexOutOfBoundsException+will+be+thrown+because%5Cn++++++%2F%2F+exampleVariableOne+only+has+a+length+of+10%5Cn++++++exampleVariableOne%5B11%5D+%3D+9%3B%5Cn++++++System.out.println%28%5C%22Array+index+is+valid%5C%22%29%3B%5Cn++++%7D+catch+%28ArrayIndexOutOfBoundsException+e%29+%7B%5Cn++++++System.out.println%28%5C%22Array+index+is+out+of+bounds%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe program above tries to access the element in the eleventh index of an array that only has a length of ten and a max index of nine. As expected, the exception is thrown and the program stops executing due to the error. Let's change the number in the program to a number that should not trigger the error to check if our exception statement works as intended.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889830"}},"updated_at":{"$date":{"$numberLong":"1537610889830"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"17572138aed4496b9a2128e6cc43a7cc_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614897803831469362532"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Let's move on to another common error many programmers have experienced first-hand, the \"NullPointerException\". Remember that a null value can be assigned to any object reference including strings. The NullPointerException is thrown when the program tries to use an object reference that has the null value. Take a look below to see an example.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22FcstoaOgPrGR%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22NullPointerExample.java%22%3A%7B%22name%22%3A%22NullPointerExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+NullPointerExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++try+%7B%5Cn++++++%2F%2F+NullPointerException+will+be+thrown+because%5Cn++++++%2F%2F+exampleVariableOne+is+being+compared+to+a+null+value%5Cn++++++Double+exampleVariableOne+%3D+new+Double%28Math.PI%29%3B%5Cn++++++Double+exampleVariableTwo+%3D+null%3B%5Cn++++++exampleVariableOne.compareTo%28exampleVariableTwo%29%3B%5Cn++++++System.out.println%28%5C%22None+of+the+objects+are+null%5C%22%29%3B%5Cn++++%7D+catch+%28NullPointerException+e%29+%7B%5Cn++++++System.out.println%28%5C%22exampleVariableOne+cannot+be+compared+to+a+null+value%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe \"NullPointerException\" is thrown when we compare an object to a null value. As an exercise, change the value above to stop the exception from being thrown.\n\nWorking with null values may not be the best practice because there may be situations where the \"NullPointerException\" is thrown by the program. The most effective way to avoid a \"NullPointerException\" is to check all object references before accessing one of the object's fields or methods. Use the `try{}` and `catch{}` blocks to check if the object is null.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889843"}},"updated_at":{"$date":{"$numberLong":"1537610889843"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"fddd2e4045714f0380d5cddac3f36ba4_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614897803831469362538"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Now let's examine the \"ArithmeticException\" that you have experienced before when we tried to divide an integer by zero. Anything that a calculator could not process would throw this type of exception. Please see the example below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22WMfRtZAuJeKX%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ArithmeticExceptionExample.java%22%3A%7B%22name%22%3A%22ArithmeticExceptionExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ArithmeticExceptionExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++try+%7B%5Cn++++++%2F%2F+ArithmeticException+will+be+thrown+because%5Cn++++++%2F%2F+a+number+cannot+be+divided+by+0%5Cn++++++int+exampleVariableOne+%3D+500%2F0%3B%5Cn+++++++System.out.println%28%5C%22You+are+not+dividing+a+number+by+0%5C%22%29%3B%5Cn++++%7D+catch+%28ArithmeticException+e%29+%7B%5Cn++++++System.out.println%28%5C%22Arithmetic+Exception%3A+cannot+divide+by+0%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nIn the scenario above, we divide by zero, which is why the \"ArithmeticException\" is thrown. Play around with the number you are dividing by to get the error to stop. As you can see, these errors are easily avoidable if you pay extreme attention to detail and ensure all of your expressions are mathematically correct when you code. In fact, when dealing with mathematical expressions, a logic error causes a larger problem because you will not receive an exception for it. This means you would have to sift through the code and dig up the mistake in order to resolve it. Always be very careful when writing calculations to ensure the intended result.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889853"}},"updated_at":{"$date":{"$numberLong":"1537610889853"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"083fc2e8a6e3400083d50cd8af12e7fc_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba61489780383146936253e"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The \"StringIndexOutOfBoundsException\" is similar to the \"ArrayIndexOutOfBoundsException\" we already covered. When the index of the targeted value is less than zero or greater than or equal to the length of the `String`, the exception occurs. Take a look at the example below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22WYlltdlzeWZU%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22StringIndexOutOfBoundsExample.java%22%3A%7B%22name%22%3A%22StringIndexOutOfBoundsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+StringIndexOutOfBoundsExample+%7B%5Cn%5Cn++public+static+String+exampleVariableOne+%3D+%5C%22Hello+World%21%5C%22%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++try+%7B%5Cn++++++%2F%2F+StringIndexOutOfBoundsException+will+be+thrown+because%5Cn++++++%2F%2F+exampleVariableOne+only+has+a+length+of+12%5Cn++++++exampleVariableOne.charAt%2813%29%3B%5Cn++++++System.out.println%28%5C%22String+Index+is+valid%5C%22%29%3B%5Cn++++%7D+catch+%28StringIndexOutOfBoundsException+e%29+%7B%5Cn++++++System.out.println%28%5C%22String+Index+is+out+of+bounds%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe exception occurs when the index of a value does not exist in the `String` we call. The code we examined above attempts to access the character at the thirteenth index of `exampleVariableOne`, which only has a length of twelve and a maximum index of eleven. Play around with the index number to stop the exception from occurring.\n\nA great way to avoid this exception is to use something like `stringname.length()-1` for the last index instead of putting a specific value, which may turn out to be incorrect and cause the error. Keep in mind that the length of a `String` can change if concatenation is used. Only use specific index values if you are completely certain about the number of characters inside the `String`.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889865"}},"updated_at":{"$date":{"$numberLong":"1537610889865"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"1276c9594a8e49bbac97ceb56e254380_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba614897803831469362544"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"In Java, \"NaN\" stands for \"not a number\" and signifies that a value is not defined. \"NaN\" is not an exception error, but a value that is assigned. For example, imaginary numbers like the square root of negative numbers or zero divided by zero will both print \"NaN\" as the result. Take a look at the example below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22bZnXSSUoZIiw%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22NaNExample.java%22%3A%7B%22name%22%3A%22NaNExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+NaNExample+%7B%5Cn%5Cn++public+static+double+exampleVariableOne+%3D+-3%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+this+will+print+NaN+because+square+root+of+-3+is+an+imaginary+number%5Cn++++System.out.println%28Math.sqrt%28-3%29%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nWhen we attempt to find the square root of a negative number, the program returns \"NaN\". Contrary to exceptions, a \"NaN\" result will not cause your program to stop, but may still become an issue if you try to the use the \"NaN\" result in any other calculations in the program. For example, you will likely throw an error when \"NaN\", which is not a number, ends up in an expression with an `int`. Java will throw an error because arithmetic operators cannot be used on two different data types.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537610889874"}},"updated_at":{"$date":{"$numberLong":"1537610889874"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"DCbCJePrMlHH_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a3093228"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Welcome to our Java Course! We will be exploring basic concepts of Java that will give you enough knowledge to create your own programs and build your own games.\n\nWhere do we begin? Let's explore what Java is.\n\nCreated and developed by James Gosling at Sun Microsystems, Java was first used in 1995 as a core component of Sun Microsystem's Java platform. Java is a high-level programming language platform that poses all the attributes below:\n\nJava is…\n\n1. Object Oriented - software uses a combination of different types of objects. Java sustains and utilizes the inheritance features of most object-based platforms.\n\n2. Platform Independent - Java code runs in the same fashion on any JVM (Java Virtual Machine). The same code will run in the same way with the same result on any JVM operating system, including Mac, Linux, Windows and other JVMs.\n\n3. Dynamic - Java executes multiple programming behaviors at runtime and doesn't need to pass back through at compile time as in static programming languages.\n\n4. Multi-threaded - a thread refers to one independent program. Multi-threading allows you to run many tasks simultaneously while sharing the same memory.\n\n5. Interpreted - Compiled Java language produces Java byte codes which are then interpreted by the JVM.\n\n6. Portable - \"Write Once, Run Anywhere\" (WORA). Once a Java program is compiled, bytecodes are produced and can be transferred, via a network, to be executed by any JVM.\n\n7. Robust - Java can handle errors and abnormalities while the program is executing. Some of the features that make this possible include capable memory management, automatic garbage collection, type checking and exception handling.\n\n8. High-level - Java programming language is readable to a human, which allows the programmer to focus on \"what\" he or she wants to achieve rather than \"how\". The JVM then converts it to machine readable language.\n\nWe will continue to explore each one of these concepts as we move through the course.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099557"}},"updated_at":{"$date":{"$numberLong":"1537612099557"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"NQlmJbthpJDL_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a309322e"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Java, a high-level general purpose programming language, runs on over three billion devices. It is a powerful and predominant software platform. Every full implementation of the Java platform provides great features:\n\n1. Development Tools - everything you will need to compile, run, monitor, debug, and document your application. (Java compiler, Java launcher, and Javadoc)\n2. Application Programming Interface (API) - List of all the classes that are part of the Java Development Kit (JDK), including all packages, classes and interfaces along with their methods, fields and constructors. The pre-written classes equip you with a massive amount of functionality. \n3. Deployment Technologies - the JDK gives you standard mechanisms like the Java Plug-in and Web Start software for deploying your applications to end users.\n4. User Interface Toolkits - Java FX, Swing, and Java 2D can be used to build intricate Graphical User Interface (GUIs).\n5. Integration Libraries - Allows database access and possible manipulation of remote objects.\n\nThe attributes of Java described above are used in implementation to create different types of applications. Below are the four main types of applications that can be constructed using Java.\n\n1. Standalone Application - Also called desktop or window-based application. These applications need to be installed on every machine. Some examples include media player and antivirus applications.\n2. Web Application - Runs on a server and creates a dynamic page.\n3. Enterprise Application - Distributed application for businesses. Offers scalability, security, load balancing and clustering.\n4. Mobile Application - Created for a mobile device. Examples include social media apps and games.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099566"}},"updated_at":{"$date":{"$numberLong":"1537612099566"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"aINfEkTrbyNO_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a3093234"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"If you have studied Java prior to today, you may have encountered the \"Hello World!\" program, which shows a basic illustration of the program printing words on the console. Let's take a look at this program below and run it to see what happens. Feel free to alter the text enclosed by the quotation marks to change the output.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22YveJsHdbbawa%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22HelloWorldExample.java%22%3A%7B%22name%22%3A%22HelloWorldExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+HelloWorldExample+%7B%5Cn++%2F%2F+This+is+the+main+method%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+This+prints+Hello+World%21%5Cn++++System.out.println%28%5C%22Hello+World%21%5C%22%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThis program is comprised of two primary features:\n\n1. Class Definition - the keyword `class` begins the class definition for a `class` named name. The code for each class goes between the opening and closing braces. The class name format is UpperCamelCase, meaning the first letter of every word is capitalized and there are no spaces between the words. \n2. Main Method - Every application must contain a class that has been declared the main method with signature `public static void main(String[] args)`. We will dive further into declaring methods, and terms such as `public`, `static` and `void` as we move further along. For now, remember how to declare a main method.\n\nSpecial Note: A vital aspect of syntax to keep in mind as we move forward is that every statement must end in a semi-colon (;), as you see above in our Hello World example.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099588"}},"updated_at":{"$date":{"$numberLong":"1537612099588"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"dymvdmERLNCt_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a3093239"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"What sets Java apart from other programming languages is the creation of the Java bytecode file by the Java compiler. In other languages, you write the source code, which is then converted into a low-level program. The Java compiler takes each class in the source file and converts them into Java bytecode files. The file extension for Java bytecode is \".class\" to ensure that no matter what the operating system is, the Java bytecode is readable and run-able on any Java Virtual Machine (JVM), anywhere.\n\nIn other words, the Java compiler transforms the code you write into a readable version for the JVM to run and execute on your computer to accomplish exactly what you intended. It is an essential tool and will take you further into your Java learning and capabilities.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099596"}},"updated_at":{"$date":{"$numberLong":"1537612099596"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"yvbbqFlWDmJS_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a309323e"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"In addition to the Java compiler, the Java interpreter is another important part of Java programming. The Java interpreter decodes and executes every statement of bytecode for the Java Virtual Machine and is part of the machine itself. Each platform, for example, a Mac, has its own interpreter that functions to interpret bytecode so that it's compatible with a Mac.\n\nThis is what makes Java special; compared to other programs that rely solely on a compiler OR an interpreter, Java has BOTH. Instead of merely compiling raw machine language and executing it on one type of machine, Java bytecode plus the Java interpreter allows your code to run on different types of machine architectures. Java is an intermediary language that achieves platform independence.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099604"}},"updated_at":{"$date":{"$numberLong":"1537612099604"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"wjwLIaSkSiMg_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a3093244"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Imports are the next building block of Java programming that is essential to master in order to write advanced programs. Java gives you the advantage of pre-built classes and methods that can perform many functions such as reading a content file or comparing different dates. The classes are organized into packages that must be imported into your project in order to be used. Let's look at two ways to import a class.\n\nBelow is an example of a method you can use to import a class called `ArrayLists`.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22vdRxrNMsuNYe%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ImportExample.java%22%3A%7B%22name%22%3A%22ImportExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cn%2F%2F+imports%5Cnimport+java.util.ArrayList%3B%5Cn%5Cnpublic+class+ImportExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+This+will+be+explained+in+Unit+7%5Cn++++ArrayList%5Cu003cString%5Cu003e+exampleVariable+%3D+new+ArrayList%5Cu003cString%5Cu003e%28%29%3B%5Cn++++exampleVariable.add%28%5C%22Hello%5C%22%29%3B%5Cn++++exampleVariable.add%28%5C%22World%21%5C%22%29%3B%5Cn++++%2F%2F+This+prints+exampleVariable%5Cn++++System.out.println%28exampleVariable%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nTake note of the fact that the IMPORT statement is located at the very beginning of this example. In words, it says: \"in the package `java.util` there is a class called `ArrayList` and we want to use it in our program\".\n\nA second method to import classes is using the '\\*' symbol. For example, to import ALL the classes in the `java.util` package, we would write `import java.util.*`\n\nNotice that the `java.lang` package is auto-imported for you so that later in the course, when you begin using `String` and `Math` classes, you do not need to import them.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099617"}},"updated_at":{"$date":{"$numberLong":"1537612099617"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"KtfeibhJwOcF_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a309324a"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Source code is a group of text listing commands, likely with comments, that can be compiled and executed by a machine but written and read by a human. Source code is what allows computer programmers to specify, read, and write the code that governs the actions of a Java Virtual Machine (JVM). As we discussed before, in order for the JVM to run a Java program, the Java compiler compiles the Java source code into Java bytecode, which is then interpreted by the Java Virtual Machine and converted into machine language.\n\nThe source code file has file extension \".java\". This is the file that is converted into the Java bytecode file, also called the class file. Everything that you physically code is \"source code\". Thanks to Java source code, you will not have to deal with bytecode files or machine language files, as those files will be created automatically by Java from your source code when you compile and run your program.\n\nNote: Every public class file that you write must be in a separate \".java\" file, where the file name matches your class name.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099627"}},"updated_at":{"$date":{"$numberLong":"1537612099627"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"jZTqgYowpbJY_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a3093250"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Although you do not have to directly edit, build, or prepare class files manually in Java, we will still take a look at what the class file is and what it does. In its simplest definition, a class file contains the Java bytecode and has a \".class\" extension. This file is what the Java Virtual Machine (JVM) interprets and converts into machine code. The class file is used by the JVM and not meant for your specific operating system.\n\nEvery time you run a Java program, the Java compiler creates a .class file from the Java source code file. The Java Virtual Machine then loads the .class file and executes the main method, which is the entry point for the Java application. This is one of the reasons why it is absolutely necessary to have a main method for classes where you have executable code. However, don't worry about making this mistake - another benefit of Java is the security protocols in place that verify each Java class file after loading and rejects class files that disobey the restrictions of the Java programming language.\n\nEven though you could edit the .class file directly with text editors, it is not recommended because changes in the file will generate errors when you run the program.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099635"}},"updated_at":{"$date":{"$numberLong":"1537612099635"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"avsGNRTuPgcA_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a3093260"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"In Java, there are keywords that are reserved for the use of Java functions or other uses that cannot be identifiers like variables, classes and function names. When a reserved word is used as a variable, we will get an error or some other unexpected result. Examples of reserved words are shown below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22yCSwUZWFqpCL%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ReservedWordsExample.java%22%3A%7B%22name%22%3A%22ReservedWordsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ReservedWordsExample+%7B%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++String+exampleVariable+%3D+%5C%22George%5C%22%3B%5Cn++++%2F%2F+This+prints+Hello+World%21+and+exampleVariable%5Cn++++System.out.println%28%5C%22Hello+World%21%5C%22%29%3B%5Cn++++System.out.println%28exampleVariable%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nIn our example above, we see that the reserved words are in a different color than the rest of the line. These are words that have a specific meaning to the system. For example, `class` means that a definition of \"class\" immediately follows. We must use reserved words only for their intended purpose; we cannot use \"class\" for any other purpose than defining class.\n\nPlease notice that the Java reserved word must be written in the exact same way as Java states, including the case of the word. For this reason, even though it is not recommended, we could technically name a variable \"Class\" because the 'C' is capitalized so it is not our reserved word `class`.\n\nThe following are more examples of reserved words that we will learn how to use as we progress through the course.\n\n`abstract`, `if`, `private`, `this`, `double`, `implements`, `throw`, `boolean`, `else`, `import`, `public`, `throws`, `break`, `return`, `byte`, `extends`, `int`, `short`, `true`, `false`, `case`, `interface`, `static`, `try`, `catch`, `final`, `long`, `void`.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099663"}},"updated_at":{"$date":{"$numberLong":"1537612099663"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"ThDGBWtQYQsh_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a3093266"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"A \"comment\" is a message written to a human reader of the program. A comment is denoted by `//` at the beginning of the line. Those two characters (//) and everything that follows on the one line are disregarded by the Java compiler. Please take a look at the example below showing the use of comments.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22trAXrJXwXodx%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22CommentsExample.java%22%3A%7B%22name%22%3A%22CommentsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+CommentsExample+%7B%5Cn++%2F%2A+Comment+Block%5Cn%5Cn++You+can+write+as+much+as+you+want+inside+the+comment+block%5Cn%5Cn++%2A%2F%5Cn++%2F%2F+this+is+another+example+of+a+comment%5Cn%5Cn++public+static+void+main+%28String%5B%5D+args%29%7B%5Cn++++%2F%2F+this+will+not+print+because+it+is+a+comment%5Cn++++%2F%2F+System.out.println%28%5C%22Hello%21%5C%22%29%3B%5Cn++++System.out.println%28%5C%22Hello+World%21%5C%22%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nIn the example above, some comments span for more than one line. To get the Java compiler to ignore multiple lines, we use `/*` at the beginning of the comment and `*/` at the end of the numerous lines of comments. When using this method to add a lengthy comment, make sure there are no characters between '/' and '\\*'. The `/*` and `*/` can start and stop anywhere on a line. Everything between the pair is a comment ignored by the compiler.\n\nIn addition to marking an actual comment in this way, we can also use the comment functionality for debugging. If we run into a situation where the program has a syntax error, one way to search for the root of the error is to remove some of the code from being compiled by turning it into a comment. If the modified program works as expected, the error must be in the section of code that was made into a comment. From there, we can decrease the amount of code in the comments until we pinpoint the error. Please remember this useful and important method for debugging long lines of code.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099682"}},"updated_at":{"$date":{"$numberLong":"1537612099682"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"eAcSuusziPwj_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a309326c"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Everything that a program accomplishes is outlined between the first brace and the final brace of the class. The line `public static void main (String[] args)` show where the program starts running. Please take a look at the code below that shows a class with a main method.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22VkFIsPaVZMqH%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ClassExample.java%22%3A%7B%22name%22%3A%22ClassExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn+%5Cn+public+class+ClassExample+%7B+%5Cn++%2F%2F+This+creates+new+String+named+exampleVariable+%5Cn++private+static+String+exampleVariable%3B+%5Cn%5Cn++%2F%2F+This+is+the+constructor+for+the+class+%5Cn++%2F%2F+that+takes+in+one+parameter+%5Cn++public+ClassExample%28String+exampleVariable%29%7B+%5Cn++++this.exampleVariable+%3D+exampleVariable%3B+%5Cn++%7D+%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B+%5Cn++++%2F%2F+This+will+be+explained+in+Unit+8+%5Cn++++ClassExample+classexample+%3D+new+ClassExample%28%5C%22Hello+World%21%5C%22%29%3B+%5Cn++++%2F%2F+This+prints+the+String+stored+in+exampleVariable+%5Cn++++System.out.println%28exampleVariable%29%3B+%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe class `ClassExample` is an example of a class declaration. The area between the braces is called the class body and provides all the code information within a certain class.\n\nPlease remember that if you are planning to run the class, the main method must exist and be declared exactly the same as it is show above. The class is separated into three different sections:\n\n1. Fields: contains variables that are declared or declared and initialized with a value\n2. Constructors: initialize the objects of a particular class. We will dive deeper into this concept when we examine and discuss objects \n3. Methods: sets of code that are referred to by name and called upon at any point in the program.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099695"}},"updated_at":{"$date":{"$numberLong":"1537612099695"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"goonrzmmGmqq_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a3093272"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"In Java, the \"Fields\" section of a class is used to house variables and to declare and initialize them to a value, if needed. A Java field is a variable inside a class. For instance, in the class below, we see four different variables:\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22JnnOSHMwTTss%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22FieldsExample.java%22%3A%7B%22name%22%3A%22FieldsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+FieldsExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+5%3B%5Cn++public+static+int+exampleVariableTwo+%3D+10%3B%5Cn++public+int+exampleVariableThree%3B%5Cn++private+int+exampleVariableFour%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+this+prints+exampleVariableOne+and+exampleVariableTwo%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThere are multiple ways to declare a variable. We can either declare it or declare and initialize it with an initial value. Here are some examples:\n\n1. `dataType variableName;`<br>\n\n We declared a variable and its data type but put nothing in the variable\n\n2. `dataType variableName = initialValue;`<br>\n\n We declared a variable, its data type, and put an initial value into memory. The initial value must be of the correct data type.\n\n3. `dataType variableNameOne, variableNameTwo;`<br>\n\n We declared two variables, both of the same data type, but put nothing in either variable. We can do this with more than two variables.\n\n4. `dataType variableNameOne = initialValueOne, variableNameTwo = initialValueTwo;`<br>\n\n We declare two variables, both of the same data type, and put an initial value in each variable. Again, we can do this for more than two variables as long as we follow the same format.\n\nYou get to pick the name for each variable in the program. Various things in a program are given names. A name chosen by a programmer is called an \"identifier\". For example, in the code above, `exampleVariableOne` is an identifier.\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099708"}},"updated_at":{"$date":{"$numberLong":"1537612099708"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"SLCwRKhuPXwX_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a3093278"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"We mentioned constructors when we discussed declaring classes and we will visit this topic again later. For now, let's discuss what a constructor is and what it does. If a class is a description of a possible object, then the constructor is what functions to create the object of the class.\n\nConstructors are often used with values called parameters that are stored in the data portion of the object that is created. Take a look at the program below. `String parameterOne` is the parameter of the constructor. The name of the constructor has to match the name of the class.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22lcaHMGVhpKVY%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ConstructorsExample.java%22%3A%7B%22name%22%3A%22ConstructorsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ConstructorsExample+%7B%5Cn++private+String+exampleVariable%3B%5Cn%5Cn++%2F%2F+this+is+the+Default+constructor+of+the+class%5Cn++%2F%2F+that+has+no+parameters%5Cn++public+ConstructorsExample%28%29%7B%5Cn++%7D%5Cn%5Cn++%2F%2F+this+is+the+constructor+of+the+class%5Cn++%2F%2F+that+takes+in+one+parameter%5Cn++public+ConstructorsExample%28String+parameterOne%29+%7B%5Cn++++%2F%2F+this+prints+exampleVariable%5Cn++++System.out.println%28parameterOne%29%3B%5Cn++%7D%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+this+will+be+explained+in+Unit+8%5Cn++++ConstructorsExample+constructorsExample+%3D+new+ConstructorsExample%28%5C%22Hello+World%21%5C%22%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nEach class has at least one constructor. In the case that the programmer does not write a constructor definition, Java will produce a default constructor for that class. The default constructor will only perform the following basics: allocate memory and initialize instance variables. If we want more to happen when an object is created, we can include one or more constructors in the class definition. When declaring a constructor, remember that a constructor does not have any return type, not even `void`, so the header of the constructor should look something like this: `public ClassName()`.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099717"}},"updated_at":{"$date":{"$numberLong":"1537612099717"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"ynCihoaXgixU_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a309327e"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Methods are another section of the class we will explore. In addition to the main method in the class, more methods that have other functions can exist in the project.\n\nMethods are constructed out of statements which are placed between brackets like these \"{ }\" as shown below:\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22FUOrSLbmsWyk%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22MethodExample.java%22%3A%7B%22name%22%3A%22MethodExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+MethodExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+5%3B%5Cn++public+static+int+exampleVariableTwo+%3D+10%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+this+prints+the+sum+of+exampleVariableOne+and+exampleVariableTwo%5Cn++++System.out.println%28add%28exampleVariableOne%2C+exampleVariableTwo%29%29%3B%5Cn++%7D%5Cn%5Cn++%2F%2F+this+method+takes+in+two+parameters+and%5Cn++%2F%2F+returns+the+sum+of+the+two+parameters%5Cn++public+static+int+add%28int+parameterOne%2C+int+parameterTwo%29+%7B%5Cn++++return+parameterOne+%2B+parameterTwo%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nWe can identify a method name because it is always followed by parentheses, which may also enclose parameters. The general form of the method header will be similar to what you see below:\n\n{visibility}{returnType}{functionName}(type parameterName)\n\nThe items that must be written in a method header are \"returnType\", \"functionName\" and \"parameterName\", because \"visibility\" has a default value. In the above example, the return type `void` signifies that the method does not return anything, which is why we do not see a statement that says `return`. As we see in the method above, a return value can be printed so that it appears on the console. This ensures that we are not only calling the result, but we are also able to view it and check it to make sure the program is running correctly. When we need more than one parameter, they are written one after the other, separated by commas.\n\nAn extremely important attribute of parameters to keep in mind is that all parameters are just copies of the original value or address. Regardless of what we do to the parameter inside the method, the original value will not change. The only way to change it is to assign the original value in the original parameter to something else. To explain using our example, changing the value of `parameterOne` does not affect the value of `exampleVariableOne`.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099734"}},"updated_at":{"$date":{"$numberLong":"1537612099734"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"ukUQyypJUiKB_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a3093284"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"A new Java programmer must master the concept of \"indentation\" in Java. Indentation is used to make our code readable to other users, easier to edit, display how the braces match up and show the logic of the program in an organized fashion. Please look at the example below to see how indentation of the if-else statement makes it easy to see what is happening. Keep in mind, we will cover if-else statements later in the course.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22LPIRifzCyHmH%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22IndentationExample.java%22%3A%7B%22name%22%3A%22IndentationExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+IndentationExample+%7B%5Cn%5Cn++%2F%2F+standard+indenting+increases+by+2+spaces+as+shown+below%5Cn++%2F%2F+braces+are+used+even+when+optional%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+neat+indenting%3A%5Cn++++%2F%2F+if-else+will+be+explained+in+Unit+5%5Cn++++if+%28true%29+%7B%5Cn++++++System.out.println%28%5C%22True%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22False%5C%22%29%3B%5Cn++++%7D%5Cn%5Cn++++%2F%2F+no+indenting%3A%5Cn++++if%28true%29++++++++++System.out.println%28%5C%22True%5C%22%29%3B%5Cn++++else++++System.out.println%28%5C%22False%5C%22%29%3B%5Cn%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe goal of indentation is to show the logic of our program. Keeping indentation consistent throughout a program is essential. For statements inside a left and right brace, increase the indenting by two spaces. When another pair of braces is nested inside those braces, increase the indentation by another two spaces. It is a good idea to line up the braces vertically. Keep in mind that the function of indentation is to make the program more readable and understandable, which saves an immense amount of time when editing or refining your code.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099742"}},"updated_at":{"$date":{"$numberLong":"1537612099742"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"GYIzBGHJTqfH_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a309328a"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"When you begin writing your own Java programs, there are some naming conventions that are strongly suggested. These naming conventions make it easier to understand what the program does, gives information about the identifiers and helps you understand the code. Please take a look at the code below for some examples of naming conventions for identifiers.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22CYYHKOOVnFHU%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22NamingConventionsExample.java%22%3A%7B%22name%22%3A%22NamingConventionsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cn%2F%2F+class+names+are+written+in+UpperCamelCase%5Cn%2F%2F+class+names+are+usually+nouns+or+noun+phrases.%5Cnpublic+class+NamingConventionsExample+%7B%5Cn%5Cn++%2F%2F+constant+names+are+written+with+all+upper+case%5Cn++%2F%2F+letters+with+words+separated+by+underscores%5Cn++public+static+final+int+EXAMPLE_VARIABLE_ONE+%3D+10%3B%5Cn++%2F%2F+non-constant+field+names+are+written+with+lowerCamelCase%5Cn++%2F%2F+variable+names+must+be+specific+and+meaningful%5Cn++public+static+int+exampleVariableTwo+%3D+5%3B%5Cn++%2F%2F+names+like+%5C%22string1%2C+myarray1%2C+no_1%5C%22+are+not+acceptable%5Cn++%2F%2F+as+variable+names+because+they+are+are+not+specific%5Cn++%2F%2F+and+can+cause+confusion+like+the+variable+below%3A%5Cn++public+static+String+string+%3D+%5C%22String%5C%22%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+local+variable+names+are+written+in+lowerCamelCase%5Cn++++int+exampleVariableThree+%3D+15%3B%5Cn++++printGreeting%28%5C%22Hello+World%21%5C%22%29%3B%5Cn++%7D%5Cn%5Cn++%2F%2F+method+names+are+written+in+lowerCamelCase%5Cn++%2F%2F+method+names+are+usually+verbs+or+verb+phrase%5Cn++%2F%2F+parameters+names+are+written+in+lowerCamelCase%5Cn++public+static+void+printGreeting%28String+parameterOne%29%7B%5Cn++++System.out.println%28parameterOne%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nLet's review three common naming conventions of which examples can be found in the code. Moving forward, let us remember and implement the following naming conventions.\n\n1. lowerCamelCase:<br>\n\n     Name is formed with multiple words that are joined together as a single word, with the first letter of each of the multiple words (except the first one) capitalized. Used for method names, non-constant field names, and parameter names.\n\n2. UpperCamelCase:<br>\n\n     Name is formed of multiple words that are joined together as a single word, with the first letter of each of the multiple words capitalized. Used for class names.\n\n3. CONSTANT\\_CASE:<br>\n\n     Name is formed with every letter of each word in uppercase letters, with words separated by underscores. Only used for constants. (We will learn about constants later in the course.)\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099750"}},"updated_at":{"$date":{"$numberLong":"1537612099750"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"yJqoBAkjKcFX_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a3093290"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"In Java, access control tells the program how much access a variable, class or method is given. Access control is important because it affects visibility based on different access control types. You may have noticed in prior topics the use of words such as `public` and `private`, which are examples of access control types. Take a look at the examples below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22iWzNJoingohl%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22AccessControlExample.java%22%3A%7B%22name%22%3A%22AccessControlExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+AccessControlExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+This+will+be+explained+in+Unit+8%5Cn++++AccessControlTest+accessControlTest+%3D+new+AccessControlTest%28%29%3B%5Cn++++System.out.println%28accessControlTest.exampleVariableOne%29%3B%5Cn++++System.out.println%28accessControlTest.exampleVariableTwo%29%3B%5Cn++++%2F%2F+accessControlTest.exampleVariableThree+will+cause+an+error+because%5Cn++++%2F%2F+exampleVariableThree+is+private%5Cn++%7D%5Cn%7D%22%7D%2C%22AccessControlTest.java%22%3A%7B%22name%22%3A%22AccessControlTest.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+AccessControlTest+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+5%3B%5Cn++public+static+int+exampleVariableTwo+%3D+10%3B%5Cn++private+static+int+exampleVariableThree+%3D+100%3B%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nWhen a variable's or method's access is not specified `public` or `private`, it will have default visibility. Default visibility is packaged private; it is visible to all classes in the same package. It is best to declare members `public` if that is the true intent. If an instance variable is declared `private`, it can only be used by the methods of that class. In the preceding example, `AccessControlTest` has its own `private` variable that is not accessible by the main method of the `AccessControlExample` class.\n\nAccess control allows other users to use your program without ever accessing, altering, or even knowing that the private variables or methods exist.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099771"}},"updated_at":{"$date":{"$numberLong":"1537612099771"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"XXDDlASCgScJ_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a3093296"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Let's examine the print method, which is essential when you want to print text on the console. This method sends anything inside the parenthesis to the output stream, which is why the characters appear on the console. Please study the examples below to see two different ways of printing on the console.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22LoooxHtqHMwf%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22PrintOutputExample.java%22%3A%7B%22name%22%3A%22PrintOutputExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+PrintOutputExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+this+prints+Hello%21%2C+Hello+World%21+on+the+same+line%5Cn++++%2F%2F+and+Hello+Friends%21+on+a+different+line%5Cn++++System.out.print%28%5C%22Hello%21%5C%22%29%3B%5Cn++++System.out.println%28%5C%22Hello+World%21%5C%22%29%3B%5Cn++++System.out.println%28%5C%22Hello+Friends%21%5C%22%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\n`System.out.print()` prints one line on the console and `System.out.println()` prints on the console followed by a new line. The \"System\" part of the statement accesses all of the methods and classes associated with the `System` class, which is automatically imported. The \"out\" part of the statement accesses all of the methods and classes related to output. The \"print\" or \"println\" is a method contained inside `System.out`. The statement we want to print out on the console must be enclosed by double quotation marks.\n\nPrinting on the console is another method to debug your source code as we are able to check the value of a variable to see if it works as intended.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099789"}},"updated_at":{"$date":{"$numberLong":"1537612099789"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"xvAIpZGpsRXo_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a309329b"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"There are three types of errors that programmers frequently encounter. Let's examine the first one, runtime error or runtime exceptions, by looking at the example below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22aZSZJnGsexJg%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22RunTimeErrorExample.java%22%3A%7B%22name%22%3A%22RunTimeErrorExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+RunTimeErrorExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+5%3B%5Cn++public+static+int+exampleVariableTwo+%3D+exampleVariableOne%2F0%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+this+creates+an+error+because+numbers+cannot+be+divided+by+zero%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nWhen we run the code above, an error occurs and nothing is printed out onto the console. Runtime errors happen after the code is compiled and when the program runs the code. Because these errors cause the program to crash, they are hard to track down. In these cases, using comments to group off parts of the source code to narrow down the location of the error is a useful approach.\n\nIn the example above, we encounter a runtime error because the program is unable to divide by zero. In these types of errors, the program reaches something illegal, something it is unable to understand, or if it's unable to find the code.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099797"}},"updated_at":{"$date":{"$numberLong":"1537612099797"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"GPbFPEouiRMf_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a30932a0"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The second of the common errors we will examine is a logic error. Please see below for an example.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22gggdiAguEoIC%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22LogicErrorExample.java%22%3A%7B%22name%22%3A%22LogicErrorExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+LogicErrorExample+%7B%5Cn++public+static+int+exampleVariableOne+%3D+5%3B%5Cn++public+static+int+exampleVariableTwo+%3D+10%3B%5Cn++public+static+int+exampleVariableThree+%3D+exampleVariableTwo+%2A+exampleVariableOne%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+this+prints+the+wrong+number+because+the+symbol+%27%2A%27+is+used+instead+of+the%5Cn++++%2F%2F+%27%2F%27%5Cn++++System.out.println%28%5C%2210+divided+by+5+is+%5C%22+%2B+exampleVariableThree%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe program prints an unexpected value because one of the signs is incorrect in the code. We are looking for the output of 2 but instead see 50 because the multiplication sign is used instead of the division sign. This may seem like a small and avoidable error, but could be missed and difficult to find when dealing with thousands of lines of code and receiving an incorrect output.\n\nLogic errors occur after the program compiles and runs. It can be indicative of a design flaw in the program. Here are some logic errors you may run into: multiplying instead of dividing, adding instead of subtracting and vice versa, or displaying the wrong message. If the program runs and compiles, but the output is incorrect or unexpected, it is a sure sign you have a logic error. Printing different variables and validating their values is one useful way to troubleshoot and solve logic errors.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099805"}},"updated_at":{"$date":{"$numberLong":"1537612099805"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"ZvAtLpDqpoFk_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a30932a6"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Let's take a look at the example below, which will show us the last of the three most common errors, a Syntax Error.\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22PpoYdUoWMRvV%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22SyntaxErrorExample.java%22%3A%7B%22name%22%3A%22SyntaxErrorExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+SyntaxErrorExample+%7B%5Cn++++%2F%2A%5Cn++++%2F%2F+public+cannot+be+capitalized%5Cn++++%2F%2F+ints+should+be+int%5Cn++++Public+static+ints+exampleVariableOne+%3D+5%3B%5Cn%5Cn++++%2F%2F+static+cannot+be+capitalized%5Cn++++public+Static+void+main+%28String%5B%5D+args%29%7B%5Cn++++++++%2F%2F+printline+should+be+println%5Cn++++++++System.out.printline%28%5C%22Value+of+exampleVariableOne+is+%5C%22+%2B+exampleVariableOne%29%3B%5Cn++++%7D%5Cn++++%2A%2F%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+5%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28%5C%22Value+of+exampleVariableOne+is+%5C%22+%2B+exampleVariableOne%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe code above shows a different set of variables and main method than the one outside the comments. The code inside the comments has syntax errors and would not compile if the comments were removed. A syntax error is similar to a grammatical error in the language of programming. One of the most common syntax errors is the misuse of Java reserved words. The program will compile but will then throw an error when seeing misformatted reserved words. Other syntax errors include misspelled variable and function names, missing semicolons, and mis-matching parentheses.\n\nSyntax errors are among the easiest to resolve as most IDE tools we use to write Java point out syntax errors as you code.\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099816"}},"updated_at":{"$date":{"$numberLong":"1537612099816"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"OGdiKUYJKvTI_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a30932b5"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Every variable must have a data type assigned to it. The following code depicts all eight primitive data types and shows how a variable may be associated to it.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22EVRWtUGZbxEc%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22DataTypesExample.java%22%3A%7B%22name%22%3A%22DataTypesExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+DataTypesExample+%7B%5Cn%5Cn++%2F%2F+this+declares+and+initializes+all+eight+primitive+data+types%5Cn++public+static+int+exampleVariableOne+%3D+5%3B%5Cn++public+static+boolean+exampleVariableTwo+%3D+true%3B%5Cn++public+static+char+exampleVariableThree+%3D+%27c%27%3B%5Cn++public+static+byte+exampleVariableFour+%3D+20%3B%5Cn++public+static+short+exampleVariableFive+%3D+300%3B%5Cn++public+static+long+exampleVariableSix+%3D+300000000%3B%5Cn++public+static+float+exampleVariableSeven+%3D+3.5f%3B%5Cn++public+static+double+exampleVariableEight+%3D+3.141519%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+this+prints+all+eight+primitive+data+types%5Cn++++System.out.println%28%5C%22Integer%3A+%5C%22+%2B+exampleVariableOne%29%3B%5Cn++++System.out.println%28%5C%22Boolean%3A+%5C%22+%2B+exampleVariableTwo%29%3B%5Cn++++System.out.println%28%5C%22Character%3A+%5C%22+%2B+exampleVariableThree%29%3B%5Cn++++System.out.println%28%5C%22Byte%3A+%5C%22+%2B+exampleVariableFour%29%3B%5Cn++++System.out.println%28%5C%22Short%3A+%5C%22+%2B+exampleVariableFive%29%3B%5Cn++++System.out.println%28%5C%22Long%3A+%5C%22+%2B+exampleVariableSix%29%3B%5Cn++++System.out.println%28%5C%22Float%3A+%5C%22+%2B+exampleVariableSeven%29%3B%5Cn++++System.out.println%28%5C%22Double%3A+%5C%22+%2B+exampleVariableEight%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe eight primitive data types, `byte`, `short`, `int`, `float`, `double`, `char` and `boolean` will be covered more in depth later. Let's start by exploring what a data type is. Data types enable us to tell the program what kind of data we are trying to represent and use. Always keep in mind that data type names are extremely case sensitive. \"Int\" is not the same as \"int\". The primitive, or fundamental, data types can function as building blocks. There are also larger, non-primitive data types that are made up of smaller components. We will dive into data types by learning the eight primitive data types first.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099842"}},"updated_at":{"$date":{"$numberLong":"1537612099842"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"cwlVaobyHCIU_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a30932ba"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Boolean is a primitive data type that is used to represent a single true/false value. A boolean value can only hold one of two values, true or false. Other words such as \"yes\" or \"no\" will not compile and will result in a syntax error. The code below illustrates how boolean variables are declared and used.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22WeABeaRBIFBK%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22BooleanDataTypeExample.java%22%3A%7B%22name%22%3A%22BooleanDataTypeExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+BooleanDataTypeExample+%7B%5Cn%5Cn++%2F%2F+booleans+can+only+be+true+or+false%5Cn++public+static+boolean+exampleVariableOne+%3D+true%3B%5Cn++public+static+boolean+exampleVariableTwo+%3D+false%3B%5Cn++public+static+boolean+exampleVariableThree+%3D+5+%5Cu003e+4%3B%5Cn++public+static+boolean+exampleVariableFour+%3D+5+%5Cu003c+4%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++++System.out.println%28exampleVariableFour%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nWe see in the code above that boolean values don't necessarily have to come out \"true\". For example \"7>9\" will be false, while \"7<9\" will be true. Boolean is extremely useful because it allows particular statements and methods to be executed only in certain situations based on whether the boolean statement is true or false. For this reason, it is one of the most important primitive data types.\n\nLater on, we will examine comparing boolean values to each other and the role that plays with control flow statements.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099852"}},"updated_at":{"$date":{"$numberLong":"1537612099852"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"LhWJksAsqvTT_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a30932bf"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The next datatype we will look at is character, which is represented with `char` in Java. A `char` can almost represent any character in any language. To see a full list of potential characters, look up the Unicode character table. View the code below for an example of how to declare and use the character datatype.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22xtjSzLREYgSz%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22CharDataTypeExample.java%22%3A%7B%22name%22%3A%22CharDataTypeExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+CharDataTypeExample+%7B%5Cn%5Cn++%2F%2F+char+can+be+any+one+character%2C+including+spaces%5Cn++public+static+char+exampleVariableOne+%3D+%27c%27%3B%5Cn++public+static+char+exampleVariableTwo+%3D+%27V%27%3B%5Cn++public+static+char+exampleVariableThree+%3D+%27+%27%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree+%2B+%5C%22Hello+World%21%5C%22%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\n`char` holds a single character with an apostrophe on each side. Notice that double quotation marks will not work for characters. Keep in mind that upper and lower case characters are represented by a different pattern. Additionally, special characters such as punctuation and spaces can be represented by the `char` data type as well.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099863"}},"updated_at":{"$date":{"$numberLong":"1537612099863"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"DxtgIDUBnNMI_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a30932c4"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"One of the most commonly used primitive data types is integer, or in Java, `int`, which can represent any whole number between -2,147,483,648 and 2,147,483,647. View the example below to learn how to declare and use an `int` variable.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22hdSiYfkvZLTM%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22IntegerDataTypeExample.java%22%3A%7B%22name%22%3A%22IntegerDataTypeExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+IntegerDataTypeExample+%7B%5Cn%5Cn++%2F%2F+int+can+be+any+integer+between+-2147483648+and+2147483647%5Cn++public+static+int+exampleVariableOne+%3D+27%3B%5Cn++public+static+int+exampleVariableTwo+%3D+-27%3B%5Cn++public+static+int+exampleVariableThree+%3D+100000%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe integer data type is efficient and versatile; it should be used for any integer math. Notice that `int` must be a whole number. In case you were wondering, 0 is also a whole number. Assigning `int` to any non-whole number would cause an error.\n\nIn addition to what we see in the example above, we are also able to assign a value to an `int` by performing a mathematical operation with two numbers, such as `int varOne = 10+10;` will assign 20 to `varOne`. As with the other data types we have covered, we are using '=' so that the identifier points to a value it can store.\n\nThe negative aspect of the integer data type is if there are any equations that try to create a non-whole number with a decimal out of integer variables, the program will fail because `int` only allows whole numbers.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099871"}},"updated_at":{"$date":{"$numberLong":"1537612099871"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"NKVtxAAwKcrJ_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a30932c9"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Let's explore the next primitive data type, `float`, or single-precision floating point. Floating point literals have a decimal point, but no commas that function as thousand separators. Please take a look at the code below to see how `float` variables are declared and used.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22lFrKbLtzfwJz%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22FloatDataTypeExample.java%22%3A%7B%22name%22%3A%22FloatDataTypeExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+FloatDataTypeExample+%7B%5Cn%5Cn++%2F%2F+float+can+be+any+rational+number+between+-3.4E%2B38f+and+3.4E%2B38f%5Cn++public+static+float+exampleVariableOne+%3D+0.15f%3B%5Cn++public+static+float+exampleVariableTwo+%3D+-0.15f%3B%5Cn++public+static+float+exampleVariableThree+%3D+3.4E%2B10f%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\n`float` variables can be represented with a lowercase 'f' OR uppercase 'F' at the end, which asks the program specifically for a single-precision float literal which deals with a 32 bit floating point. Even without the 'f' or 'F' at the end the program, it assumes a `float` is declared and initialized.\n\nThis datatype is used when dealing with decimals. As said in the comments of the code above, `float` can take on a range of values. However, `double` is preferred when we want a more precise answer as `double` deals with 64 bit numbers. The `float` primitive data type is NOT used for precise values like currency because the data type is sometimes approximate and rounded.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099880"}},"updated_at":{"$date":{"$numberLong":"1537612099880"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"YADpowmlOhZK_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a30932ce"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Like the `int` primitive data type, `double` is also very commonly used. Most of the time, you will use `int` for whole numbers and `double` for numbers with decimal points (rational or irrational). Double is also known as double-precision floating point. This means it has twice as many bits as `float`, meaning a `double` is more accurate than a `float`. Let's review the code below to see how `double` variables are declared and used.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22QQuIsDqRqDGj%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22DoubleDataTypeExample.java%22%3A%7B%22name%22%3A%22DoubleDataTypeExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+DoubleDataTypeExample+%7B%5Cn%5Cn++%2F%2F+double+is+any+real+number+between+-1.7E%2B308+and+1.7E%2B308%5Cn++public+static+double+exampleVariableOne+%3D+3.1415%3B%5Cn++public+static+double+exampleVariableTwo+%3D+-0.002%3B%5Cn++public+static+double+exampleVariableThree+%3D+1.7E%2B250%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nAs with floats, doubles may have the character 'd' or 'D' at the end of the number to tell the program that the number is a `double`. Similar to a `float` datatype, the default value for `double` is \"0.0\". Doubles have one of the largest ranges of numbers compared to the other primitive data types.\n\nAlthough a `double` is more accurate than `float`, it is still not recommended for currency as it is not precise enough to calculate strict numbers of this kind.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099889"}},"updated_at":{"$date":{"$numberLong":"1537612099889"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"sLPZgVyEsTYm_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a30932d3"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"One of the least used primitive data types is `byte` because `byte` has a limited range of numbers (-128 to 127) compared to `int`. Unless the programmer are a 100% sure that the values will not exceed this limited range, it is best to use `int`. Nevertheless, let's take a look at how `byte` variables are declared and used below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22pIUgIUxmwBun%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22BytesDataTypeExample.java%22%3A%7B%22name%22%3A%22BytesDataTypeExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+BytesDataTypeExample+%7B%5Cn%5Cn++%2F%2F+byte+can+be+any+integer+between+-128+and+127%5Cn++public+static+byte+exampleVariableOne+%3D+25%3B%5Cn++public+static+byte+exampleVariableTwo+%3D+-25%3B%5Cn++public+static+byte+exampleVariableThree+%3D+127%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe byte datatype takes up about four times less space than an `int`, but is not used for calculations and other methods. The byte datatype is useful when dealing with raw binary data for compatibility reasons. Similarly to `float`, `int` and the other integer related data types, the default value for `byte` is 0. The byte datatype can only hold whole, non-decimal numbers.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099898"}},"updated_at":{"$date":{"$numberLong":"1537612099898"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"YnqWqlBqWaTH_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a30932d8"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The `short` primitive datatype is another less commonly used integer-related datatype due to its limited range of -32,768 to 32,767. Let's glance at the example below showing the declaration and use of `short`.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22VMPNKhbNNrSd%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ShortDataTypeExample.java%22%3A%7B%22name%22%3A%22ShortDataTypeExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ShortDataTypeExample+%7B%5Cn%5Cn++%2F%2F+short+can+be+any+integer+between+-32768+and+32767%5Cn++public+static+short+exampleVariableOne+%3D+100%3B%5Cn++public+static+short+exampleVariableTwo+%3D+-100%3B%5Cn++public+static+short+exampleVariableThree+%3D+0%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\n`short` functions similarly to `int` as it can only hold whole, non-decimal numbers. This datatype was commonly used when 16-bit computers were used, and are rarely used now as `int` has pretty much taken its place. However, `short` takes up about half the space of an `int`, so in a specific case when you are dealing with a large list of whole numbers, you may chose to use `short` to save space. With that being said, we will just use `int` for most of our programs.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099909"}},"updated_at":{"$date":{"$numberLong":"1537612099909"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"pXBhBgwmwBhS_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a30932dd"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The next integer-related primitive datatype we will delve into is `long`, which is used more commonly than `byte` and `short` because the range for `long` is even greater than that of `int`. The `long` primitive data type can hold integers such as eight trillion. Please review the code below for an example of declaring and using `long` variables.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22UUPaZsGEVYQE%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22LongDataTypeExample.java%22%3A%7B%22name%22%3A%22LongDataTypeExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+LongDataTypeExample+%7B%5Cn%5Cn++%2F%2F+long+can+by+any+integer+between+-9%2C223%2C372%2C036%2C854%2C775%2C808+and+9%2C223%2C372%2C036%2C854%2C775%2C807%5Cn++public+static+long+exampleVariableOne+%3D+2147483647%3B%5Cn++public+static+long+exampleVariableTwo+%3D+2%3B%5Cn++%2F%2F+integers+bigger+than+2147483647+cannot+exist+in+the+code%5Cn++%2F%2F+and+must+be+parsed+from+a+String+value%5Cn++%2F%2F+this+will+be+explained+in+Unit+8%5Cn++public+static+long+exampleVariableThree+%3D+Long.parseLong%28%5C%229223372036854775807%5C%22%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThis example takes us through parsing a `long` variable from a `String` because the value is too big to write in the program. We will look more closely at this functionality in later sections. Similarly to what we have seen before with declaration of primitive data types, the addition of an 'l' or 'L' at the end of the line informs the program that the value is a `long`.\n\nAlthough `long` holds twice the memory of `int`, it is an extremely useful data type when working with astronomically large whole integers such as the weight of the earth or the speed of light and sound. Similar to `int`, `long` will always be a whole, non-decimal number.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099920"}},"updated_at":{"$date":{"$numberLong":"1537612099920"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"VZyugERFGLqP_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a30932e3"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"When working with large numbers, scientific notation is exceptionally helpful. In scientific notation, the letter 'e' represents \"10 to the power of\". For example, \"1.51E+1\" means the same thing as \"1.51x10^1\". Let's review some examples of scientific notation below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22cEEkaFgkacUa%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ScientificNotationExample.java%22%3A%7B%22name%22%3A%22ScientificNotationExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ScientificNotationExample+%7B%5Cn%5Cn++public+static+double+exampleVariableOne+%3D+1E%2B3%3B%5Cn++public+static+double+exampleVariableTwo+%3D+1E%2B12%3B%5Cn++public+static+double+exampleVariableThree+%3D+1E-4%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nIn the section on the `long` datatype, we discussed the difficulty of writing very large numbers. Scientific notation solves that problem. It can also be used to represent small numbers with many decimal places. The format of scientific notation in Java is exactly the same as you have learned and used in science and math classes. Remember that an uppercase 'E' or lowercase 'e' can be used to represent \"10 to the power of\". Scientific notation can be printed as output on the console if it passes a certain number. Using `System.out.println(exampleVariableOne);` as an example, smaller numbers will still read out \"1000\" instead of \"1E+3\".\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099932"}},"updated_at":{"$date":{"$numberLong":"1537612099932"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"AtYKzzcFBaNT_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a30932e9"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Casting is the action of converting between two different data types such as converting an `int` to a `double` and vice versa. Examine the code below for examples of casting.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22XGNSEigCiGpp%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22CastingExample.java%22%3A%7B%22name%22%3A%22CastingExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+CastingExample+%7B%5Cn%5Cn++%2F%2F+this+converts+15.23+into+an+integer%5Cn++public+static+int+exampleVariableOne+%3D+%28int%29+15.23%3B%5Cn++public+static+double+exampleVariableTwo+%3D+exampleVariableOne%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nWe just converted the `double` value 15.23 into an integer, which left only the whole number and the decimal places to be cut off. There is no rounding, it just ignores the numbers after the decimal point during casting. When you convert an `int` to a `double`, a decimal point will be added to match with the structure of a `double`. For example, `double varOne = (double) 15;` assigns 15.0 to `varOne`.\n\nEven though it is possible to convert an `int` to a `double` without casting, it is best practice to always use casting for precision and thorough logic. Also, be careful with the loss of precision when converting data types. i.e. losing decimal points is losing precision.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099942"}},"updated_at":{"$date":{"$numberLong":"1537612099942"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"tQpZHvUYcEUv_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a30932ef"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Variables that are declared inside a method are called local variables because they can only be utilized and referenced in the method itself. Take a look at the code below showing the `add()` method with a local variable inside.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22gWrnFVNUFniZ%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22LocalVariableExample.java%22%3A%7B%22name%22%3A%22LocalVariableExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+LocalVariableExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+10%3B%5Cn++public+static+int+exampleVariableTwo+%3D+6%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28add%28exampleVariableOne%2C+exampleVariableTwo%29%29%3B%5Cn++++%2F%2F+System.out.println%28exampleVariableThree%29+will+cause+an+error%5Cn++++%2F%2F+because+exampleVariableThree+is+a+local+variable%5Cn++%7D%5Cn%5Cn++public+static+int+add%28int+x%2C+int+y%29+%7B%5Cn++++%2F%2F+this+is+a+local+variable%5Cn++++int+exampleVariableThree+%3D+x+%2B+y%3B%5Cn++++return+exampleVariableThree%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nIn the example, we cannot print `exampleVariableThree` inside the main method because it exists only as a local variable in the `add()` method. This is where we revisit the concept of access control. The local variable is only active and returns within the method in which it was declared. A local variable is not visible to any other method besides the one in which it exists. If you have a variable that will be used in multiple classes, you must make sure it is outside the method. If you are referencing a local variable outside of the method it exists in, you will get a compile-time error due to access control and visibility.\n\nIn cases where you will only use a variable in one method, keep it local by keeping it inside the method so that no other methods or classes can see or make any changes to it and alter your desired outcome.\n\nKeep in mind that the parameters in a method are examples of and function as local variables.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099956"}},"updated_at":{"$date":{"$numberLong":"1537612099956"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"EFABnnmBmprG_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a30932f5"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Field variables are variables that are declared as a member of a class or declared outside any method or constructor within the class. Please review the example below showing two field variables.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22IuyrmjsHTXGu%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22FieldVariableExample.java%22%3A%7B%22name%22%3A%22FieldVariableExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+FieldVariableExample+%7B%5Cn%5Cn++%2F%2F+these+are+field+variables%5Cn++public+static+int+exampleVariableOne+%3D+10%3B%5Cn++public+static+int+exampleVariableTwo+%3D+6%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28add%28exampleVariableOne%2C+exampleVariableTwo%29%29%3B%5Cn++++multiply%28%29%3B%5Cn++%7D%5Cn%5Cn++public+static+int+add%28int+x%2C+int+y%29+%7B%5Cn++++%2F%2F+this+is+a+local+variable%5Cn++++int+exampleVariableThree+%3D+x+%2B+y%3B%5Cn++++return+exampleVariableThree%3B%5Cn++%7D%5Cn%5Cn++public+static+void+multiply%28%29+%7B%5Cn++++System.out.println%28exampleVariableOne+%2A+exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nField variables, as opposed to local variables, can be called in any of the methods that exist in the same class. A field variable is available as long as the instance it belongs to is active. The class is active when any method in it is used. Therefore if the field variable belongs to the class, it can be used within any of the methods inside that class.\n\nThere are two categories of field variables: instance variables and class variables. The code we reviewed above shows examples of two class variables. We see this because they are declared with the `static` modifier. We will discuss the significance of `static` as we move further along in our courses.\n\nInstance variables are non-static fields and therefore declared without the Java reserved word `static`. All of these values are unique to each instance of a class. This will be explained further when we study the concept of objects.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099969"}},"updated_at":{"$date":{"$numberLong":"1537612099969"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"yMMAEzyDIHtZ_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a30932fb"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"An arithmetic operator is a mathematical equation, similar to what we have seen in algebra, that takes integers and calculates them in a certain way. Java contains a set of basic common arithmetic operators that can be used to perform a number of different calculations. Take a look at the five operators we will examine.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22XiMMhEbhoKbQ%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ArithmeticOperatorExample.java%22%3A%7B%22name%22%3A%22ArithmeticOperatorExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ArithmeticOperatorExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+15%3B%5Cn++public+static+int+exampleVariableTwo+%3D+2%3B%5Cn++public+static+int+exampleVariableFive+%3D+exampleVariableOne+%2B+exampleVariableTwo%3B%5Cn++public+static+int+exampleVariableSix+%3D+exampleVariableOne+-+exampleVariableTwo%3B%5Cn++public+static+int+exampleVariableSeven+%3D+exampleVariableOne+%2A+exampleVariableTwo%3B%5Cn++public+static+int+exampleVariableEight+%3D+exampleVariableOne+%2F+exampleVariableTwo%3B%5Cn++public+static+int+exampleVariableNine+%3D+exampleVariableOne+%25+exampleVariableTwo%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableFive%29%3B%5Cn++++System.out.println%28exampleVariableSix%29%3B%5Cn++++System.out.println%28exampleVariableSeven%29%3B%5Cn++++%2F%2F+This+will+not+print+7.5+because+exampleVariableEight+is+an+integer%5Cn++++System.out.println%28exampleVariableEight%29%3B%5Cn++++System.out.println%28exampleVariableNine%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nJust as we learned in math class, Java honors the order in which mathematical operations should be performed. Division, multiplication, modulus (%), followed by any addition and subtraction. A minor difference between math principles and Java is if we are dividing two integers, the Java answer will also be an integer, not a number with a decimal point, following the same rule of truncation we discussed earlier. Let's look at an example: the Java result for 15/2 will be 7, not 7.5.\n\nOne new operator to you may be the modulus operator, whose function returns the remainder of dividing the first number by the second number.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099987"}},"updated_at":{"$date":{"$numberLong":"1537612099987"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"AnsOqeELLLvM_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194378038318a30932fd"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"A relational operator is an operator that tests or defines a relationship between two operands. These include numerical equality such as \"5 = 5\" and inequalities such as \"7<3\". Please take a look at the six relational operators that follow.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22yizNWhumxypA%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22RelationalOperatorExample.java%22%3A%7B%22name%22%3A%22RelationalOperatorExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+RelationalOperatorExample+%7B%5Cn%5Cn++public+static+boolean+exampleVariableOne+%3D+10+%5Cu003c+15%3B%5Cn++public+static+boolean+exampleVariableTwo+%3D+10+%5Cu003e+15%3B%5Cn++public+static+boolean+exampleVariableThree+%3D+10+%5Cu003c%3D+10%3B%5Cn++public+static+boolean+exampleVariableFour+%3D+10+%5Cu003e%3D+15%3B%5Cn++public+static+boolean+exampleVariableFive+%3D+15+%3D%3D+10%3B%5Cn++public+static+boolean+exampleVariableSix+%3D+15+%21%3D+10%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++++System.out.println%28exampleVariableFour%29%3B%5Cn++++System.out.println%28exampleVariableFive%29%3B%5Cn++++System.out.println%28exampleVariableSix%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nAll of the operators above return a true or false result. The first four operators are recognizable and common. They work the same way as you learned in math class. Check the text below for an explanation of the operators functions.\n\n1. \\> Tests whether the first integer is greater than the second integer.\n2. < Tests whether the first integer is smaller than the second integer.\n3. \\>= Tests whether the first integer is greater than or equal to the second integer.\n4. <= Tests whether the first integer is less than or equal to the second integer.\n5. == Tests whether the first integer is equal to the second integer. <br>\n\nRemember that '=' cannot be used to compare two values because a solo '=' is used only for assigning values to variables as we saw previously\n6. != Tests whether the first integer is different from the second integer. <br>\n\nTherefore, a statement like `5 != 7` will return a result of \"true\".\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612099989"}},"updated_at":{"$date":{"$numberLong":"1537612099989"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"HusVAXlUYidn_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a3093303"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"An assignment operator functions to change the value that is stored inside a variable. In order for the operator to change a value, the variable must be declared beforehand. Also remember that we can declare a variable and assign it a value at the same time. Look at the code below for an example of the three assignment operators we will discuss: '=', \"+=\", and \"-=\".\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22YoGoeCgOdCYc%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22AssignmentStatementExample.java%22%3A%7B%22name%22%3A%22AssignmentStatementExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+AssignmentStatementExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+10%3B%5Cn++public+static+int+exampleVariableTwo+%3D+50%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++exampleVariableOne+%3D+exampleVariableOne+%2B+exampleVariableTwo%3B%5Cn++++exampleVariableTwo+%2B%3D+5%3B%5Cn++++exampleVariableTwo+-%3D+2%3B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nSomething to keep in mind when assigning values is that the calculation on the right side of the equal sign is completed before assigning the variable on the left with its new value. As we see in the code above, `exampleVariableOne` and `exampleVariableTwo` are added before being assigned to the new value of variable `exampleVariableOne`. This makes the new value for `exampleVariableOne` 60\\.\n\nThe \"+=\" and the \"-=\" functions add or subtract integers together before assigning them to the variable. Therefore, `exampleVariableTwo += 5;` is actually the same as the statement `exampleVariableTwo = exampleVariableTwo + 5;`. `exampleVariableTwo` increases by a value of 3 as a result of the program because it adds 5 and subtracts 2 before printing.\n\nKeep in mind that it is possible to also use \"\\*=\", \"/=\", or \"%=\" if you are comfortable with using these \"shortcut\" operators.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100007"}},"updated_at":{"$date":{"$numberLong":"1537612100007"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"wdloEcxoUXHd_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a3093309"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"An expression is a mixture of literals, operators, variable names, and parentheses used to calculate a value. Please keep in mind that in Java, the expression on the right side of the assignment statement is evaluated first. The expressions will look similar to regular mathematical expressions from math class. Please take a look at the expressions below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22KwLUWXSfNlRt%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ExpressionsExample.java%22%3A%7B%22name%22%3A%22ExpressionsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ExpressionsExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+%28%287-4%29+%2A+%28-3%2F-1%29%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nExpressions can be written without using any spaces at all, but the use of one or more spaces to visually separate the parts without changing the meaning is useful for the programmer and reader.\n\nKeep in mind the discussion we had previously on division of integers. If the operands are integers, these operators will perform integer arithmetic. If one or both operands are floating points, the operators will perform floating point arithmetic. Any number with a decimal would result in a `double` or `float`. For integers, 5/2 results in 2. For floating point, 5.0/2.0 results in 2.5 and 5/2.0 results in 2.5.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100018"}},"updated_at":{"$date":{"$numberLong":"1537612100018"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"yWKbEqHpkHEl_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a309330f"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Mixed expressions are comprised of multiple sub expressions at once. This is not as rampant in Java as it is in advanced algebra courses, but it is essential to remember the rules and use them. Take a look at these two mixed expressions.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22bzZkgdEMDuWW%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22MixedExpressionsExample.java%22%3A%7B%22name%22%3A%22MixedExpressionsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+MixedExpressionsExample+%7B%5Cn%5Cn++%2F%2F+Keep+in+mind+that+1%2F3+%3D+0+because+both+1+and+3+are+integers%5Cn++public+static+double+exampleVariableOne+%3D+%28%281%2F3%2B7.5%29+%2F+2.5%29%3B%5Cn++public+static+int+exampleVariableTwo+%3D+%28%287%2F4+%2B+2%2F6%29+%2B+4%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nDo either of the results surprise you? Take a look at the details. Remember, if any of the operands are a floating point, the whole arithmetic operation becomes floating point. Also, parenthesis have the highest precedence in the order of operations and must be evaluated first. Let's rearrange the mixed expressions to the correct order of evaluation:\n\n(1/3+7.5) / 2.5 = (0+7.5) / 2.5 = (7.5) / 2.5 = 3.0 <br>\n\n(`exampleVariableOne` is a `double`, so the result is 3.0, not 3)\n\n(7/4 + 2/6) + 4 = (1 + 0) + 4 = 5\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100030"}},"updated_at":{"$date":{"$numberLong":"1537612100030"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"FJEjnwJooSae_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a3093315"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Constants are variables that do not change. Constants include the Java reserved word `final`, stating that the value will not change in the program. Let's remember that constant variables follow a different naming convention than other variables, using capitals and separating words with an underscore. See the following example of two constants.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22llHlvTLTbjpZ%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ConstantsExample.java%22%3A%7B%22name%22%3A%22ConstantsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ConstantsExample+%7B%5Cn%5Cn++%2F%2F+variable+names+for+constants+are+capitalized+and+separated+by+underscores%5Cn++public+static+final+int+EXAMPLE_VARIABLE_ONE+%3D+1%3B%5Cn++public+static+final+double+EXAMPLE_VARIABLE_TWO+%3D+3.5%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+EXAMPLE_VARIABLE_1+%2B+1+will+cause+an+error+because%5Cn++++%2F%2F+EXAMPLE_VARIABLE_1+is+declared+final%5Cn++++System.out.println%28EXAMPLE_VARIABLE_ONE%29%3B%5Cn++++System.out.println%28EXAMPLE_VARIABLE_TWO%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nSince constants cannot be changed, a syntax error or a compile-time error will be thrown if a change is attempted to a variable with the reserved word `final`.\n\nOne advantage of using constants instead of numbers is that the source code would be easier to read and check for debugging. In addition, if a constant needs to change, the change only has to be made in one place, where it is initialized. The programmer does not have to look for every occurrence of the variable and change each one individually. Constants are a great way to keep track of variables you don't want to change in any way while running your code.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100040"}},"updated_at":{"$date":{"$numberLong":"1537612100040"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"TRFpLAVoIkUx_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a309331b"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The logical complement operator, also known as the NOT operator in Java, is represented by an exclamation mark '!'. This operator changes true values to false and false to true. This operator only works with `boolean`. Please review the example of the NOT operator and its function.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22vQfrCxbKedel%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22LogicalComplementExample.java%22%3A%7B%22name%22%3A%22LogicalComplementExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+LogicalComplementExample+%7B%5Cn%5Cn++public+static+boolean+exampleVariableOne+%3D+true%3B%5Cn++%2F%2F+The+character+%27%21%27+inverts+the+boolean+value+of+exampleVariableOne%5Cn++public+static+boolean+exampleVariableTwo+%3D+%21exampleVariableOne%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe value of the two boolean variables are different because one is the inverse of the other. The NOT operator changes the value of `exampleVariableOne` from true to false and assigns false to `exampleVariableTwo`.\n\nPlease remember to use brackets to section off the NOT operator so it works as intended. As we keep working in Java, especially with if statements, we will see uses for this operator surface as an alternative for writing long lines of code.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100050"}},"updated_at":{"$date":{"$numberLong":"1537612100050"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"STPCPaLajAxM_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a3093320"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The increment operator changes a variable by the value of one. Instead of writing `varOne = varOne + 1;` you can write `varOne++;` and it will do the same thing. Let's review an example of incrementing variables.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22vSPOxOMZLpbe%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22IncrementExample.java%22%3A%7B%22name%22%3A%22IncrementExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+IncrementExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+10%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+Both+statements+adds+1+to+exampleVariableOne%5Cn++++exampleVariableOne%2B%2B%3B%5Cn++++%2B%2BexampleVariableOne%3B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThere are two ways to use the increment operator; prefix and postfix increment. The prefix increment looks like `++variablename;` while the postfix increment looks like `variablename++;`. Both of these operations add one to the value in the variable. The difference between the two is the order of how it works. If we use the \"++\" operator as a prefix like `++varOne;`, the value of `varOne` is incremented by one before the value of `varOne` is returned. If we use ++ operator as postfix like `varOne++;`, the original value of `varOne` is returned before `varOne` is incremented by one. This means that the original value of `varOne` is printed while the value increases by one after the print statement. It is essential to know the difference between the two types of incrementing even though we usually don't print these values. Incrementing is used heavily in loops, a topic we will examine later in the course.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100059"}},"updated_at":{"$date":{"$numberLong":"1537612100059"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"hDaithyXIYRd_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a3093325"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The decrement operator functions similarly to the increment operator. The only difference is that the decrement operator decreases a value by one. This means we can write `varOne--;` instead of writing `varOne = varOne - 1;`. Let's take a look at these decrementing variables in the code below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22rBEyOGrdEEkH%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22DecrementExample.java%22%3A%7B%22name%22%3A%22DecrementExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+DecrementExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+10%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+Both+statements+subtract+1+from+exampleVariableOne%5Cn++++exampleVariableOne--%3B%5Cn++++--exampleVariableOne%3B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nLike the increment operator, there are two different ways to use the decrement operator called prefix and postfix decrement. The prefix decrement looks like `--variablename;` while the postfix increment looks like `variablename--;`. Both of these subtract one to the value in the variable. `--varOne;` decreases the value of varOne by one before returning the value of `varOne`. On the other hand, `varOne--;` returns the original value of `varOne` before decreasing the value of `varOne` by one. It is unlikely that we will print these results, but it is essential to know the difference between the functionality as it is commonly used in loops. Additionally, these operators will reduce the amount of code the programmer has to write.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100068"}},"updated_at":{"$date":{"$numberLong":"1537612100068"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"BLKdBTaflAjv_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a309332b"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The Java `Math` class contains all the familiar mathematical functions found on an electronic calculators, such as sine, log, and square root and more. For the most part, the functions use datatype `double` as a parameter and returns a `double` value. Let's take a look at a few of the methods and fields in the `Math` class.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22GDVKvoKqsMjj%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22MathClassExample.java%22%3A%7B%22name%22%3A%22MathClassExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+MathClassExample+%7B%5Cn%5Cn++public+static+double+exampleVariableOne+%3D+Math.PI%3B%5Cn++%2F%2F+Methods+will+be+explained+later+this+unit%5Cn++public+static+double+exampleVariableTwo+%3D+Math.pow%2810%2C+2%29%3B%5Cn++public+static+double+exampleVariableThree+%3D+Math.sqrt%28exampleVariableTwo%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nWe will go into further detail about the methods of the `Math` class later on, so let's explore `Math.PI`, one of the two fields of the `Math` class. This field represents the value of pi. A dot is used after typing \"Math\" to access the field and the method inside the `Math` class. You have to check the input and output type of the methods inside the `Math` class to use them correctly without throwing errors. To avoid syntax errors, the method and field names have to match the names written in the Java documentation for the `Math` class. You do not have to import the `Math` class as it is already part of the `java.lang` package.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100084"}},"updated_at":{"$date":{"$numberLong":"1537612100084"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"HubwhHIzrZWQ_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a3093330"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The absolute value method in the `Math` class returns the absolute value of an `int` or `double`. Java offers more than two absolute value methods with different parameters depending on the output necessary. The absolute value methods are written in this manner: `Math.abs(parameter)`. Take a look at the absolute value method below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22ExqHtLGYxyeL%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22AbsoluteValueMethodExample.java%22%3A%7B%22name%22%3A%22AbsoluteValueMethodExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+AbsoluteValueMethodExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+Math.abs%2810%29%3B%5Cn++public+static+int+exampleVariableTwo+%3D+Math.abs%28-10%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe absolute value method works the same way as it does in a regular algebra class. The input for this method could be an `int`, `float`, `double` or a `byte` value and will return the same data type as the input. Keep in mind that none of the outputs are rounded when producing the result of the method. Inputting a positive value would simply return the same value while inputting a negative value would return the negative value without the minus sign.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100090"}},"updated_at":{"$date":{"$numberLong":"1537612100090"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"IxvJWWRMeeJq_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a3093335"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The floor function returns the largest whole number that is less than or equal to the input. This method only takes and returns `double` values. Take a look at the example below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22QXVGxQlJeQWt%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22FloorMethodExample.java%22%3A%7B%22name%22%3A%22FloorMethodExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+FloorMethodExample+%7B%5Cn%5Cn++%2F%2F+Returns+largest+integer+that+is+less+than+or+equal+to+the+argument%5Cn++public+static+double+exampleVariableOne+%3D+Math.floor%2810.4%29%3B%5Cn++public+static+double+exampleVariableTwo+%3D+Math.floor%28-20.4%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nAs the nearest whole number that is less than or equal to 10.4 is 10, 10.0 is printed. Similarly, since the closest whole number that is less than or equal to -20.4 is -21, -21.0 is printed. Notice that even if we input a non-decimal number into the floor function, a `double` is returned. Since data precision is not hindered when you convert from an `int` data type to a `double`, Java will do it without throwing any errors. The floor function's primary use is rounding, all ready for you to use while coding.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100097"}},"updated_at":{"$date":{"$numberLong":"1537612100097"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"lIBMrGOaabFI_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a309333a"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The ceiling function returns the smallest whole number that is greater than or equal to the input. This function is similar to the floor function and is written as `Math.ceil(input)`. It only takes and returns `double` data types. Take a look at the example below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22mCeVGzKFsEWh%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22CeilingMethodExample.java%22%3A%7B%22name%22%3A%22CeilingMethodExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+CeilingMethodExample+%7B%5Cn%5Cn++%2F%2F+Returns+smallest+integer+that+is+greater+than+or+equal+to+the+argument%5Cn++public+static+double+exampleVariableOne+%3D+Math.ceil%2810.4%29%3B%5Cn++public+static+double+exampleVariableTwo+%3D+Math.ceil%28-20.4%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe ceiling function returns the smallest whole integer greater than or equal to the input and prints it as a `double` with a decimal. This function does not truncate, it rounds up, with the exception of inputs between 0 and -1.0, this returns \"-0.0\".\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100103"}},"updated_at":{"$date":{"$numberLong":"1537612100103"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"yWhEjQguKHEd_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a3093340"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"One of the more popular `Math` class functions is the square root function. Like the `floor()` and `ceil()` methods, the square root method takes and returns the `double` datatype. It can be written as follows, `Math.sqrt(25)`, and returns the rounded positive square root. Review the examples below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22uZtTsvUKggPa%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22SquareRootExample.java%22%3A%7B%22name%22%3A%22SquareRootExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+SquareRootExample+%7B%5Cn%5Cn++public+static+double+exampleVariableOne+%3D+Math.sqrt%28100%29%3B%5Cn++public+static+double+exampleVariableTwo+%3D+Math.sqrt%286.25%29%3B%5Cn++public+static+double+exampleVariableThree+%3D+Math.sqrt%283%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThis method will return a `double` number even if the result is a perfect square. The error that will occur if we use a number less than zero is a result of \"NaN\", which stands for \"Not a Number\". Therefore, if we were to write `Math.sqrt(-4)`, the return will be \"NaN\". Imaginary numbers cannot be represented or returned using this method. And lastly, keep in mind that this function will only return one positive square root value.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100150"}},"updated_at":{"$date":{"$numberLong":"1537612100150"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"jpdAEgoEnjKS_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a3093346"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The `pow()` function of the `Math` class takes in two `double` values and returns the result of the first input raised to the power of the second input. The symbol '^' is not used to represent \"to the power of\" in Java. We can write this function like this: `Math.pow(inputOne, inputTwo)`. Check out the two examples below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22npvscJvfasaU%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22PowerMethodExample.java%22%3A%7B%22name%22%3A%22PowerMethodExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+PowerMethodExample+%7B%5Cn%5Cn++public+static+double+exampleVariableOne+%3D+Math.pow%2810%2C+2%29%3B%5Cn++public+static+double+exampleVariableTwo+%3D+Math.pow%28-10%2C+2%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe function of the `Math.pow()` method mirror the function of exponents we learned in math class. For example, if the second input is zero, the result will always be \"1.0\" because any number raised to the power of zero is one. Also, if the second input is \"1.0\", the result with be the first input. If the power function has expressions that use division or any other operation, the expression is evaluated before the power method is run. Because of the previous statement, fractions are not a recommended method for writing your expression. Please be careful of using numbers such as \"1/2\" because this would result in \"0.0\", not \"0.5\".\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100159"}},"updated_at":{"$date":{"$numberLong":"1537612100159"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"yIdZNeXlQXsj_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a309334c"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The `random()` method in the `Math` class returns a random number between 0.0 and 1.0, including 0.0 and not including 1.0, at random with uniform distribution from this range. This method is written like `Math.random()` and does not take in any parameters. The returns a `double` value. Run the program below to see the function. As you may suspect, you will get different numbers every time you run the program.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22swTYxInladrM%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22RandomMethodExample.java%22%3A%7B%22name%22%3A%22RandomMethodExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+RandomMethodExample+%7B%5Cn%5Cn++%2F%2F+Returns+double+value+greater+than+or+equal+to+0.0+and+less+than+1.0%5Cn++public+static+double+exampleVariableOne+%3D+Math.random%28%29%3B%5Cn++%2F%2F+Returns+an+integer+value+between+1+and+100%5Cn++public+static+int+exampleVariableTwo+%3D+%28int%29+%28Math.random%28%29+%2A+101%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nIn order to increase our range from 0.0 to 100.0, we have to multiply the whole expression by 101 since the function's range is only 0.0 to 1.0. We then use casting to change the `double` to an `int` datatype value, which in turn truncates the decimal and gives us a whole number. There are different methods within the `Random` class which may be useful to you for various projects in the future.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100172"}},"updated_at":{"$date":{"$numberLong":"1537612100172"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"qHhlAZcRywoV_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a3093398"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"We covered primitive data types and the operators that work with those data types. As we begin to discuss `String`, it may seem like a primitive data type. However, `String` is its own class in the `java.lang` package. The `String` class contains objects which are commonly used in Java programming. You will see how useful `String` is as we explore further. Take a look at the example below of a `String` that holds the value \"Hello World!\"\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22hirxCNDHlQOQ%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22DataTypeStringExample.java%22%3A%7B%22name%22%3A%22DataTypeStringExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+DataTypeStringExample+%7B%5Cn%5Cn++%2F%2F+this+creates+a+new+String+that+holds+%5C%22Hello+World%21%5C%22%5Cn++public+static+String+exampleVariableOne+%3D+new+String%28%5C%22Hello+World%21%5C%22%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nIn Java, `String` is a line of text that strings together letters or numbers and stores them as a sequence of characters. The string \"Hi!\" is made up of the characters 'H', 'i', and '!'.\n\nLet's take a look at how the Java operator '+' works with strings and other data types like integers. If a `String` is before the '+' operator and followed by a non-string value, the '+' operator converts the non-string value into a string and chains them together. For example `System.out.println(\"Hi\" + 1 + 2);` will not print \"Hi3\". Instead, it will print \"Hi12\" as the '+' sign changes the '1' and '2' to strings before chaining the strings together. The '1' and '2' are no longer integers and do not qualify for addition. It is best to avoid arithmetic calculation if a `String` exists before the addition.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100337"}},"updated_at":{"$date":{"$numberLong":"1537612100337"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"QhYgwuBDnLHG_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a309339d"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"There are two distinct ways to create a `String`: use double-quotation marks or create a new object. Either put text on the same line in double quotation marks as if it was primitive datatype: `String stringName = \"hi\";` or initialize them like this: `String stringName = new String(\"hi\");`. Take a look below for examples on how we can initialize a `String`.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22xYdJzfGxoAjk%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22StringsExample.java%22%3A%7B%22name%22%3A%22StringsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+StringsExample+%7B%5Cn%5Cn++public+static+String+exampleVariableOne+%3D+new+String%28%5C%22Hello+World%21%5C%22%29%3B%5Cn++%2F%2F+the+next+two+statements+create+an+empty+String%5Cn++public+static+String+exampleVariableTwo+%3D+new+String%28%29%3B%5Cn++public+static+String+exampleVariableThree+%3D+%5C%22%5C%22%3B%5Cn++public+static+String+exampleVariableFour+%3D+%5C%22Java%5C%22%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++++System.out.println%28exampleVariableFour%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nTo create a new object, we use the Java reserved word `new` because `String` is a class within the `java.lang` package. However, Java has made the process of importing easier for programmers. As you see above, you can initialize the `String` without having to type out `new`. Ultimately, it is up to you to decide which method of creating a `String` works best for you.\n\nRemember, it is possible to create an empty `String` by either leaving the parenthesis blank or omitting characters on the inside of the double-quotation marks.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100346"}},"updated_at":{"$date":{"$numberLong":"1537612100346"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"FqBSLsIkKBUz_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a30933a2"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Escape sequences allow you to get out of the `String` to print characters that cannot exist within the string itself. The three escape sequences are `\\` , `\\\"` and `\\n`. Let's see if we can decipher what each one does by looking the code below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22JLiIlCIUASPW%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22EscapeSequenceExample.java%22%3A%7B%22name%22%3A%22EscapeSequenceExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+EscapeSequenceExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+without+the+second+backslash%2C+a+syntax+error+will+occur%5Cn++++System.out.println%28%5C%22%5C%5C%5C%5C%5C%22%29%3B%5Cn++++%2F%2F+without+the+backslash%2C+a+syntax+error+will+occur%5Cn++++System.out.println%28%5C%22%5C%5C%5C%22Hello+World%21%5C%5C%5C%22%5C%22%29%3B%5Cn++++%2F%2F+%5C%5Cn+prints+%5C%22Java%5C%22+on+a+new+line%5Cn++++System.out.println%28%5C%22Hello+World%21%5C%22+%2B+%5C%22%5C%5CnJava%5C%22%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\n1. `\\\\` <br>\n\n Permits a '\\' to be included in the `String`. One '\\' is used to escape the string, and the second '\\' is added into the string.\n\n2. `\\\"` <br>\n\n Using one \\\" on each side of characters and enclose them in quotations when printing. Since the double-quotations are used to denote a `String` in the source code, we need to use something else, the backslashes, to tell the program to print \"\" in the output.\n \n3. `\\n` <br>\n\n Makes a new line, so anything in the `String` after the \"\\n\" prints on a new line. In the example above, \"Java\" is printed on a new line because there is an \"\\n\" directly before it in the code.\n\nKeep these useful tools in mind when working with strings.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100361"}},"updated_at":{"$date":{"$numberLong":"1537612100361"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"MUXTJXIGXvSL_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a30933a7"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"\"Null\" is a value that signifies \"no object\". If we declare a new `String` object and forgets to initialize it with a value, it will have a value of null. A `String` can also be initialized with a value of null as follows: `String varOne = null;`. Take a look at the example below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22mfXtSQaDUbIo%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22NullValueExample.java%22%3A%7B%22name%22%3A%22NullValueExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+NullValueExample+%7B%5Cn%5Cn++%2F%2F+exampleVariableOne+is+only+declared+and+not+initialised%5Cn++public+static+String+exampleVariableOne%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nIn Java, variables created from the `String` class are like containers, they hold a reference to an object. Therefore, creating 10 strings will create 10 objects and 10 different variables that refer to the different objects. If variables that hold objects exist, we need a way to describe those variables that are not holding or referencing anything - this is where the null value comes in. It tells us that nothing is being held or referenced by the `String`.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100375"}},"updated_at":{"$date":{"$numberLong":"1537612100375"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"uzCHiLAsmHzT_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a30933ac"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"`String` objects are designed to be immutable. There is no way to alter or manipulate their data once the object is created. Although you cannot change a `String`, you are able to reassign its references. Let's take a look below to see how this works.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22BvWadhzPwhRV%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ImmutabilityExample.java%22%3A%7B%22name%22%3A%22ImmutabilityExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ImmutabilityExample+%7B%5Cn%5Cn++%2F%2F+exampleVariableOne+holds+the+reference+to+the+String+%5C%22Hello+World%21%5C%22%5Cn++public+static+String+exampleVariableOne+%3D+%5C%22Hello+World%21%5C%22%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+the+String+reference+for+exampleVariableOne+changes+to+the+String+%5C%22Java%5C%22%5Cn++++exampleVariableOne+%3D+%5C%22Java%5C%22%3B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nWe can assign `exampleVariableOne` to a new `String` object (\"Java\") before it is printed. However, the old `String` object (\"HelloWorld\") still exists because it cannot be changed. The reassignment of a variable does not replace the old string with the new one as it only replaces the reference. This means that both strings still exist but only one of them is being used.\n\nTake a look at this line of code: `String varOne = \"Hi\";` Let's revisit the concept. The reference variable `varOne` does not contain the object, but only a reference to the object. What this reference is and what object it points to can change at anytime in the program. But the `String` object \"Hi\" remains unaltered because it is immutable.\n\nOn a side-note, constantly creating \"Strings\" could lead to overflowing the memory when running the code.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100387"}},"updated_at":{"$date":{"$numberLong":"1537612100387"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"NHbGMappEoSq_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a30933b2"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Let's dive into introducing the methods that exist in the `String` class. A fundamental method to start off with is one that finds the length of a `String`, which is also the number of characters, including punctuation and spaces, that make up the string. The syntax for finding the length of a `String` is `stringname.length()`. Look below to see an example of its use.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22SAKgdHBZDzgX%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22StringLengthExample.java%22%3A%7B%22name%22%3A%22StringLengthExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+StringLengthExample+%7B%5Cn%5Cn++public+static+String+exampleVariableOne+%3D+%5C%22Hello+World%21%5C%22%3B%5Cn++public+static+String+exampleVariableTwo+%3D+%5C%22%5C%22%3B%5Cn++%2F%2F+returns+the+length+of+exampleVariableOne+and+exampleVariableTwo%5Cn++%2F%2F+and+assigns+it+to+lengthOne+and+lengthTwo%5Cn++public+static+int+lengthOne+%3D+exampleVariableOne.length%28%29%3B%5Cn++public+static+int+lengthTwo+%3D+exampleVariableTwo.length%28%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28lengthOne%29%3B%5Cn++++System.out.println%28lengthTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nDid you run the program? Did you see how an empty `String` has a length of zero? Take note of the fact that the length method takes no parameters but the parenthesis are part of the necessary syntax to call the method, along with the dot which tells the program that you want to use the length method that exists in the `String` class.\n\nPlease keep in mind for future sections, that the length of the `String` has nothing to do with the index. You can just count up the number of characters inside the `String` to determine the accurate length.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100395"}},"updated_at":{"$date":{"$numberLong":"1537612100395"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"EfJOcVolUydi_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a30933b4"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The `concat()` method performs `String` concatenation, meaning it takes two strings and forms a new `String` by putting the original two strings together. For example, the program below concatenates the first `String` \"Hello \" with the second `String` \"World!\" and makes a new `String` that refers to \"Hello World!\".\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22muyYtRMkvXTz%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ConcatenationExample.java%22%3A%7B%22name%22%3A%22ConcatenationExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ConcatenationExample+%7B%5Cn%5Cn++public+static+String+exampleVariableOne+%3D+%5C%22Hello+%5C%22%3B%5Cn++public+static+String+exampleVariableTwo+%3D+%5C%22World%21%5C%22%3B%5Cn++%2F%2F+returns+a+String+that+concatenates+exampleVariableTwo+to%5Cn++%2F%2F+exampleVariableOne+and+assigns+it+to+String+variables%5Cn++public+static+String+exampleVariableThree+%3D+exampleVariableOne+%2B+exampleVariableTwo%3B%5Cn++public+static+String+exampleVariableFour+%3D+exampleVariableOne.concat%28exampleVariableTwo%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++++System.out.println%28exampleVariableFour%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nKeep in mind the concept of immutability when it comes to strings. The first two strings, `exampleVariableOne` and `exampleVariableTwo`, are not altered by the action of `concat()`. A brand new `String` is created that is made up of the characters \"Hello World!\".\n\nDo you remember the '+' operator? It may also be used instead of the `concat()` method, as you see above. Both the operator and the method do the exact same thing, so you as the programmer may choose whichever one you are more comfortable with and fits your coding style.\n\nThis is your friendly reminder that if the first operand in front of the '+' operator is a `String` and the ones that come after are not, everything that comes after the `String` will be changed to be a `String`, and the '+' operator will behave as concatenation, not addition.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100398"}},"updated_at":{"$date":{"$numberLong":"1537612100398"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"TNysraJFHprp_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a30933ba"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Let's discuss what the concept of \"index\" means in Java. Index numbering starts with zero and totals up characters. The method `indexOf()` returns the index of the first occurrence of a `String` or `char` in a targeted `String`. Take a look below to see how this method is used.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22jIZRUEFiDaYx%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22IndexOfMethodExample.java%22%3A%7B%22name%22%3A%22IndexOfMethodExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+IndexOfMethodExample+%7B%5Cn%5Cn++public+static+String+exampleVariableOne+%3D+%5C%22Hello+World%21%5C%22%3B%5Cn++%2F%2F+returns+the+index+of+the+given+String+%28case+sensitive%29%5Cn++%2F%2F+and+assigns+it+to+integer+variables%5Cn++public+static+int+exampleVariableTwo+%3D+exampleVariableOne.indexOf%28%5C%22World%5C%22%29%3B%5Cn++public+static+int+exampleVariableThree+%3D+exampleVariableOne.indexOf%28%5C%22world%5C%22%29%3B%5Cn++public+static+int+exampleVariableFour+%3D+exampleVariableOne.indexOf%28%5C%22world%5C%22%2C+7%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++++System.out.println%28exampleVariableFour%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nIndexing starts with zero, which is why the program above will print 6, not 7. Therefore, if you had a `String` \"Java\":<br>\n\n Index: 0 1 2 3<br>\n\n String: J a v a\n\nAnother way to use the `indexOf()` method is by putting an valid index after the target `String`. This tells the method where you want to start searching for the target `String`. As we see in the example above, the index of \"World\" is 6, meaning if we start searching from index 7, we will not find the `String` \"World\", thus returning -1.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100406"}},"updated_at":{"$date":{"$numberLong":"1537612100406"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"ZAhQDYVXRsgH_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a30933c0"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Now that we have explored the concept of index in Java, let's see the index related functions that exist in the `String` class. The `charAt` method returns a single character from a specified index. The syntax is as follows, `stringname.charAt(any integer)` and the return value is a single character `char`, not a `String`. In a case where the index is negative or greater than `stringname.length()-1`, you will receive a runtime error. Let's see a few examples of the `charAt` method.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22HGhssAzzbeMr%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22CharAtMethodExample.java%22%3A%7B%22name%22%3A%22CharAtMethodExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+CharAtMethodExample+%7B%5Cn%5Cn++public+static+String+exampleVariableOne+%3D+%5C%22Hello+World%21%5C%22%3B%5Cn++%2F%2F+returns+the+character+at+a+specific+index%5Cn++%2F%2F+and+assigns+it+to+char+variables%5Cn++public+static+char+exampleVariableTwo+%3D+exampleVariableOne.charAt%280%29%3B%5Cn++public+static+char+exampleVariableThree+%3D+exampleVariableOne.charAt%2811%29%3B%5Cn++public+static+char+exampleVariableFour+%3D+exampleVariableOne.charAt%286%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++++System.out.println%28exampleVariableFour%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe index for the first character of a `String` has an index of zero, meaning 'H' is printed when the statement `exampleVariableOne.charAt(0);` is called. If you point at an index where there is a space, the `charAt()` method will return a character containing ' '. This method, along with `indexOf()` method are extremely useful when working with strings.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100414"}},"updated_at":{"$date":{"$numberLong":"1537612100414"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"trrhCBRxEMiJ_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a30933c2"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"In Java, a \"Substring\" is a string that is comprised from another string, and there are two methods by which one is made. Take a look at the example below that shows us both `substring(int startIndex)` and `substring(int startIndex, int endIndex)`.\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22GXzUziKIDOJa%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22SubStringExample.java%22%3A%7B%22name%22%3A%22SubStringExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+SubStringExample+%7B%5Cn%5Cn++public+static+String+exampleVariableOne+%3D+%5C%22Hello+World%21%5C%22%3B%5Cn++%2F%2F+returns+a+String+between+the+given+indices+and+assigns%5Cn++%2F%2F+it+to+String+variables%5Cn++public+static+String+exampleVariableTwo+%3D+exampleVariableOne.substring%280%2C+5%29%3B%5Cn++public+static+String+exampleVariableThree+%3D+exampleVariableOne.substring%286%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe first method, `substring(int startIndex)` returns a new `String` containing the characters between \"startIndex\" and the final index of the called `String`, so the statement `exampleVariableOne.substring(6)` returns the entire string \"World!\". If the \"startIndex\" is equal to the total length of the string, an empty string is created.\n\nThe second method, `substring(int startIndex, int endIndex)` returns a new `String` made up of the characters beginning at the \"startIndex\" and ending at the \"endIndex - 1\". This method includes the first character and excludes the last character of the parameters entered. As long as both inputs are valid indexes of the `String` you won't throw a runtime error.\n\nAs discussed before, strings are immutable, so a new `String` is created every time you call either of the `substring()` methods.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100417"}},"updated_at":{"$date":{"$numberLong":"1537612100417"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"KizVYxoqODvs_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a30933c7"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The `trim()` method trims off any leading or ending black spaces, but leaves the spaces in the middle. Take a look below to see an example of this method's function.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22ofWOCvwYWlCJ%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22TrimmingStringExample.java%22%3A%7B%22name%22%3A%22TrimmingStringExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+TrimmingStringExample+%7B%5Cn%5Cn++public+static+String+exampleVariableOne+%3D+%5C%22++++++Hello+World%21++++++%5C%22%3B%5Cn++%2F%2F+returns+a+String+with+leading+and+trailing+whitespace+omitted%5Cn++%2F%2F+and+assigns+it+to+a+String+variable%5Cn++public+static+String+exampleVariableTwo+%3D+exampleVariableOne.trim%28%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe original text has extra spaces before and after, making it inefficient and odd-looking when printed. This method creates a new `String` without added spaces at the beginning or the end while leaving the space in between.\n\nThe trim method is extremely useful when the programmer deals with user input data within the application. Extraneous spaces on either end of user input is a common problem, and those issues are easily solved using the trim method.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100427"}},"updated_at":{"$date":{"$numberLong":"1537612100427"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"qEkBqVKBZtLX_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a30933cd"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The `compareTo()` method compares the first letter of one `String` object to the first letter of another `String` object and returns a number that states which `String` comes first in lexicographic order (A,B,C etc.). If the first two letters of the strings are the same, the method will go on to compare the next letters, and the next until it finds the first instance of a difference. Let's take a look at how this method works.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22ywQQqkARkSBY%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22CompareToMethodExample.java%22%3A%7B%22name%22%3A%22CompareToMethodExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+CompareToMethodExample+%7B%5Cn%5Cn++public+static+String+exampleVariableOne+%3D+%5C%22Ant%5C%22%3B%5Cn++public+static+String+exampleVariableTwo+%3D+%5C%22ant%5C%22%3B%5Cn++public+static+String+exampleVariableThree+%3D+%5C%22Butterfly%5C%22%3B%5Cn++public+static+String+exampleVariableFour+%3D+%5C%22Zebra%5C%22%3B%5Cn++%2F%2F+compares+the+two+Strings+lexicographically+and%5Cn++%2F%2F+assigns+the+difference+to+integer+variables%5Cn++public+static+int+exampleVariableFive+%3D+exampleVariableOne.compareTo%28exampleVariableTwo%29%3B%5Cn++public+static+int+exampleVariableSix+%3D+exampleVariableTwo.compareTo%28exampleVariableOne%29%3B%5Cn++public+static+int+exampleVariableSeven+%3D+exampleVariableThree.compareTo%28exampleVariableOne%29%3B%5Cn++public+static+int+exampleVariableEight+%3D+exampleVariableFour.compareTo%28exampleVariableOne%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableFive%29%3B%5Cn++++System.out.println%28exampleVariableSix%29%3B%5Cn++++System.out.println%28exampleVariableSeven%29%3B%5Cn++++System.out.println%28exampleVariableEight%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe `compareTo()` method returns 0 if the two strings are equal, a number less than 0 if the first `String` is larger, and a number greater than 0 if the second `String` is larger. Uppercase letters come before lowercase letters when the method compares strings. As you work through learning this method's function, test our example program and use the ascii table to see how far apart the characters are from each other.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100435"}},"updated_at":{"$date":{"$numberLong":"1537612100435"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"sSWOoGimgJiC_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a30933d3"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"One of the most useful methods when working with `String` is the `equals()` method. Previously, we explained how to compare `int` and other data types by using the \"==\" operator. However, every `String` is an object, which means the \"==\" operator checks whether or not the reference (not value) for the `String` objects are the same. Because of this distinction, we need the equals method to check whether or not they hold the same `String` value (basically the text). The syntax for the equals method is `stringname.equals(stringname)`. Take a look at the difference between the equals method and the \"==\" operator when working with strings below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22SBimNwQcvYWF%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22EqualsMethodExample.java%22%3A%7B%22name%22%3A%22EqualsMethodExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+EqualsMethodExample+%7B%5Cn%5Cn++public+static+String+exampleVariableOne+%3D+%5C%22Ant%5C%22%3B%5Cn++public+static+String+exampleVariableTwo+%3D+new+String%28%5C%22Ant%5C%22%29%3B%5Cn++%2F%2F+tests+to+see+if+the+value+for+both+Strings+are+equal%5Cn++%2F%2F+and+assigns+it+to+boolean+variables%5Cn++public+static+boolean+exampleVariableThree+%3D+exampleVariableOne.equals%28exampleVariableTwo%29%3B%5Cn++public+static+boolean+exampleVariableFour+%3D+exampleVariableOne+%3D%3D+exampleVariableTwo%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++++System.out.println%28exampleVariableFour%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nWhen using the \"==\" operator to compare the strings, we receive a result of \"false\" because the strings reference two different objects that are held in different memory spaces. However, if a statement like `String varTwo = varOne;` is called after `String varOne = \"Java\";`, the reference for the variable `varTwo` is the same as the reference of `varOne`, meaning that the \"==\" operator has a result of \"true\". This only works if the first `String` is directly assigned to the value of the second `String`.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100446"}},"updated_at":{"$date":{"$numberLong":"1537612100446"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"SgsmzWIbAKuG_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a30933d9"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The following two methods are similar to the `trim()` method and are built-in procedures used for making style changes to a `String`. Let's take a look at the results of calling one method that makes the `String` all lower case, and another that makes it all uppercase. The syntax for these two methods are as follows : `toLowerCase()` and `toUpperCase()`.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22WNNZhxlkhDmR%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22UpperAndLowerCaseExample.java%22%3A%7B%22name%22%3A%22UpperAndLowerCaseExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+UpperAndLowerCaseExample+%7B%5Cn%5Cn++public+static+String+exampleVariableOne+%3D+%5C%22Hello+World%21%5C%22%3B%5Cn++%2F%2F+returns+String+with+%5C%22Hello+World%21%5C%22+either+fully+upper+case%5Cn++%2F%2F+or+fully+lower+case+and+assigns+it+to+String+variables%5Cn++public+static+String+exampleVariableTwo+%3D+exampleVariableOne.toUpperCase%28%29%3B%5Cn++public+static+String+exampleVariableThree+%3D+exampleVariableOne.toLowerCase%28%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThese two methods may be useful when you want to change the `String` so that it will print in a particular way. On the other hand, you can use the method for personal preference or when you want to compare two strings while ignoring the differences in uppercase or lowercase. (Although `compareToIgnoreCase()` and `equalsIgnoreCase()` does exist)\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100455"}},"updated_at":{"$date":{"$numberLong":"1537612100455"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"jjJRidqJONwv_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a30933df"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"In Java, the `Integer` class is part of the `java.lang` package and is automatically imported just like the `String` class. The `parseInt()` method is part of the `Integer` class. This method converts a `String` that only consists of numbers into an integer value while simultaneously assigning it to the primitive data type `int`. The syntax for this method is as follows, `Integer.parseInt(stringname)`. Let's see how this method works in the code below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22aTNlWhkSeDls%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ParseIntExample.java%22%3A%7B%22name%22%3A%22ParseIntExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ParseIntExample+%7B%5Cn%5Cn++public+static+String+exampleVariableOne+%3D+%5C%225666%5C%22%3B%5Cn++public+static+String+exampleVariableTwo+%3D+%5C%22423%5C%22%3B%5Cn++public+static+int+exampleVariableThree+%3D+Integer.parseInt%28exampleVariableOne%29%3B%5Cn++public+static+int+exampleVariableFour+%3D+Integer.parseInt%28exampleVariableTwo%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28%5C%22Integer+exampleVariable+of+exampleVariableOne+is+%5C%22+%2B+exampleVariableThree%29%3B%5Cn++++System.out.println%28%5C%22Integer+exampleVariable+of+exampleVariableTwo+is+%5C%22+%2B+exampleVariableFour%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe `parseInt()` method returns an `int`, not an object from the `Integer` class. This method only works if the `String` consists solely of numbers and no characters. If that is not the case, an error will be thrown and an integer will not be created.\n\nThe `parseInt()` function is extremely useful when dealing with user input or calculating numbers from text files. With this method, Java is saving the programmer time from creating long methods to convert strings into integers, by having an included `parseInt()` method.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100467"}},"updated_at":{"$date":{"$numberLong":"1537612100467"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"qRexDCXYHymr_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a30933e1"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Another string conversion method that will prove useful to you in the future is the `toString()` method, which takes almost any object in Java and converts it to a `String`. Let's take a look at this example.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22eQkglijQYugC%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ToStringExample.java%22%3A%7B%22name%22%3A%22ToStringExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ToStringExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+11%3B%5Cn++public+static+double+exampleVariableTwo+%3D+Math.PI%3B%5Cn++public+static+String+exampleVariableThree+%3D+Integer.toString%28exampleVariableOne%29%3B%5Cn++public+static+String+exampleVariableFour+%3D+Double.toString%28exampleVariableTwo%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28exampleVariableThree%29%3B%5Cn++++System.out.println%28exampleVariableFour%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThis method is useful when you want to print certain expressions. Although primitive data types that we have covered up to this point would print without needing to be converted into a `String`, there will be other objects we will master, such as arrays, that cannot be print directly, so keep the `toString` method in mind as we move forward and learn about arrays.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100470"}},"updated_at":{"$date":{"$numberLong":"1537612100470"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"cPbVYaSvrGDP_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a3093400"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Let's start exploring the structure of an `if` statement in Java by relating it to a real life scenario. Suppose you are walking down the street with an umbrella. We ask one question in order to get a true or false response: \"is it raining?\". If we answer yes, or \"true\", then one course of action takes places, we open and use the umbrella. If the answer is no, or \"false\", another course of action takes place, the umbrella stays closed. This is the basis for an `if` statement in Java; one of two different courses of action take place based on a \"true\" or \"false\" answer. These types of statements involve a binary (two-way) decision. Play with the example below, which uses our umbrella scenario, by changing the `boolean` \"rain\" to \"false\".\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22LHxcNaIJdZVR%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22IfElseStatementExample.java%22%3A%7B%22name%22%3A%22IfElseStatementExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+IfElseStatementExample+%7B%5Cn%5Cn++public+static+boolean+rain+%3D+true%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+%5C%22%3D%3D+true%5C%22+can+be+omitted+simplify+code%5Cn++++if+%28rain+%3D%3D+true+%2F%2A+expression+%2A%2F%29+%7B%5Cn++++++%2F%2F+%5C%22true+branch%5C%22%5Cn++++++System.out.println%28%5C%22Use+your+umbrella%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++%2F%2F+%5C%22false+branch%5C%22%5Cn++++++System.out.println%28%5C%22Don%27t+use+your+umbrella%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe `if` statement above tests to see if the `boolean` value of \"rain\" is true. If it is, the \"true branch\" statement is executed. If not, the \"false branch\" statement is executed. Notice how we separate the \"true branch\" and the \"false branch\" by the reserved word `else`. The expression that goes inside the `if` statement must evaluate to true or false for the statement to execute, and anything that evaluates to a `boolean` value can be placed inside brackets.\n\n\"If you're tired, go to sleep. Otherwise, stay awake.\"\n\n\"If you're hungry, eat. Otherwise, don't eat.\"\n\nThe `if` statement allows the programmer to structure results using the same logic we use in our everyday lives.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100532"}},"updated_at":{"$date":{"$numberLong":"1537612100532"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"XCzQNMEGiyHN_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a3093402"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The `else if` statement takes the `if` statement functionality one step further. Instead of having two outcomes, the programmer can create as many outcomes as they like, each one with its own expression. Take a look at the use of the `else if` statement below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22xRULJNiYJFbj%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ElseIfStatementExample.java%22%3A%7B%22name%22%3A%22ElseIfStatementExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ElseIfStatementExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+37%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+else+if+statements+have+to+include+boolean+expressions%5Cn++++if+%28exampleVariableOne+%5Cu003c+10+%2F%2A+expression+%2A%2F%29+%7B%5Cn++++++System.out.println%28%5C%22The+number+is+smaller+than+10%5C%22%29%3B%5Cn++++%7D+else+if+%28exampleVariableOne+%5Cu003c+20+%2F%2A+expression+%2A%2F%29+%7B%5Cn++++++System.out.println%28%5C%22The+number+is+between+10+and+20%5C%22%29%3B%5Cn++++%7D+else+if+%28exampleVariableOne+%5Cu003c+30+%2F%2A+expression+%2A%2F%29+%7B%5Cn++++++System.out.println%28%5C%22The+number+is+between+20+and+30%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22The+number+is+larger+than+30%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nEach `else if` statement has its own expression that returns true or false. Only the FIRST expression that evaluates to \"true\" is executed. As we see above, if the expression `exampleVariableOne &lt; 10` returns a value of \"true\", only the statements within the curly brackets of the `if` statement are executed, and all the statements that follow are ignored. If none of the expressions evaluate to \"true\", the statement inside the curly braces of the `else` statement are executed. Remember these vital rules when working with `if` statements:\n\n1. The `if` statement may contain zero or one `else` statement that must come after any `else if` expressions.\n2. The `if` statement may have zero or more `else if` expressions that must come before the `else` statement.\n3. Once the expression in an `else if` statement evaluates to true, all the remaining `else if` and `else` expressions are ignored.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100538"}},"updated_at":{"$date":{"$numberLong":"1537612100538"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"ZlQlmWuFUIKN_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a3093408"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"A \"boolean expression\" refers to the statement contained inside the brackets of the `if` statement or the `else if` statements and only evaluates to either \"true\" or \"false\". Remember that an \"expression\" always consists of literals, operators, variable names, and parentheses used to calculate a value such as true or false. Explore the two boolean expressions below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22oBLWjaaNpiXf%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22BooleanExpressionsExample.java%22%3A%7B%22name%22%3A%22BooleanExpressionsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+BooleanExpressionsExample+%7B%5Cn%5Cn++public+static+boolean+exampleVariableOne+%3D+true%3B%5Cn++public+static+boolean+exampleVariableTwo+%3D+false%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++if+%28exampleVariableOne+%3D%3D+exampleVariableTwo%29+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+true%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+false%5C%22%29%3B%5Cn++++%7D%5Cn++++%2F%2F+%5C%22%21%3D%5C%22+is+the+opposite+of+equals%5Cn++++if+%28exampleVariableOne+%21%3D+exampleVariableTwo%29+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+true%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+false%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nBoolean expressions are used to compare numbers, `boolean` values, `String` values, other objects and data types that you will learn about later in the course. Remember the importance of using double equals signs when you're comparing numbers. Please review the sections on \"operators\" when you need a refresher on the functionality of each one.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100552"}},"updated_at":{"$date":{"$numberLong":"1537612100552"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"WRkZaMqPrWeI_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a309340e"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The `switch` statement compares different primitive data types, `String` values and other objects to tests whether or not they are equal to a certain value. Play with the example of a switch statement below by changing the value of `exampleVariableOne` to see the different results.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22zuRkGQytkUsc%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22SwitchStatementExample.java%22%3A%7B%22name%22%3A%22SwitchStatementExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+SwitchStatementExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+37%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+checks+to+see+which+number+exampleVariableOne+is%5Cn++++%2F%2F+between+35-40%5Cn++++switch+%28exampleVariableOne+%2F%2A+expression+%2A%2F%29%7B%5Cn++++++case+35%3A+%2F%2F+35+is+a+label%5Cn++++++++System.out.println%28%5C%22exampleVariableOne+is+35%5C%22%29%3B%5Cn++++++++break%3B%5Cn++++++case+36%3A+%2F%2F+36+is+a+label%5Cn++++++++System.out.println%28%5C%22exampleVariableOne+is+36%5C%22%29%3B%5Cn++++++++break%3B%5Cn++++++case+37%3A+%2F%2F+37+is+a+label%5Cn++++++++System.out.println%28%5C%22exampleVariableOne+is+37%5C%22%29%3B%5Cn++++++++break%3B%5Cn++++++case+38%3A%5Cn++++++++System.out.println%28%5C%22exampleVariableOne+is+38%5C%22%29%3B%5Cn++++++++break%3B%5Cn++++++case+39%3A%5Cn++++++++System.out.println%28%5C%22exampleVariableOne+is+39%5C%22%29%3B%5Cn++++++++break%3B%5Cn++++++case+40%3A%5Cn++++++++System.out.println%28%5C%22exampleVariableOne+is+40%5C%22%29%3B%5Cn++++++++break%3B%5Cn++++++default%3A%5Cn++++++++System.out.println%28%5C%22exampleVariableOne+has+to+be+between+35+and+40%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe switch statement tests to see whether or not `exampleVariableOne` is between 35 and 40. Each \"case\" within the switch statement checks to see if `exampleVariableOne` is a certain number, and prints different statements depending on the value `exampleVariableOne` holds. Keep in mind, just one of these cases is selected per execution of the switch statement, and the data type of the expression has to match the datatype of the label. If none of the case labels matches the value of the expression, the default case is used, and its statements are executed.\n\nA programmer can write many statements after each case, usually followed by a `break` statement which stops anything after the case from being executed. Let's return to the example above and remove the `break` statement to see the result and the importance of having a `break` statement.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100564"}},"updated_at":{"$date":{"$numberLong":"1537612100564"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"AUsYHwZSDCUc_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a3093410"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Let's explore the conditional \"AND\" operator, which allows you to check whether or not two values are both true or both false before executing a statement. If you have experience with a truth table, you will see similarities here. The \"AND\" operator is a logical operator that turns two true/false values into a single true or false value. Look below to see how this operator functions.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22psiwAMPXPfZm%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ConditionalAndExample.java%22%3A%7B%22name%22%3A%22ConditionalAndExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ConditionalAndExample+%7B%5Cn%5Cn++public+static+boolean+exampleVariableOne+%3D+true%3B%5Cn++public+static+boolean+exampleVariableTwo+%3D+true%3B%5Cn++public+static+boolean+exampleVariableThree+%3D+false%3B%5Cn++public+static+boolean+exampleVariableFour+%3D+false%3B%5Cn%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+only+the+boolean+expression+%5C%22true+%5Cu0026%5Cu0026+true%5C%22+returns+true%5Cn++++if+%28exampleVariableOne+%5Cu0026%5Cu0026+exampleVariableTwo%29+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+true%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+false%5C%22%29%3B%5Cn++++%7D%5Cn++++if+%28exampleVariableOne+%5Cu0026%5Cu0026+exampleVariableThree%29+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+true%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+false%5C%22%29%3B%5Cn++++%7D%5Cn++++if+%28exampleVariableThree+%5Cu0026%5Cu0026+exampleVariableFour%29+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+true%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+false%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nOnly the expressions with `true` on both sides of the \"AND\" evaluate as `true`. Here are the different possibilities and their outcomes:\n\n1. true && true = true\n2. false && true = false\n3. true && false = false\n4. false && false = false\n\nThe AND operator evaluates both operands, the expressions on each side, before determining the final value. This is useful when you want two or more expression to be true before executing a statement. Using them in an `if` statement will simplify your code structure and reduce your time spent on coding.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100567"}},"updated_at":{"$date":{"$numberLong":"1537612100567"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"uGTfVguxrdsT_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a3093416"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Contrary to the \"AND\" operator, the \"OR\" operator is used in a boolean expression to check if at least one of expressions are true.The \"OR\" operator is also a logical operator because it combines two true/false values into a single true/false value. Let's take a look at the functionality of the \"OR\" operator.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22fNjqdSKIvBLR%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ConditionalOrExample.java%22%3A%7B%22name%22%3A%22ConditionalOrExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ConditionalOrExample+%7B%5Cn%5Cn++public+static+boolean+exampleVariableOne+%3D+true%3B%5Cn++public+static+boolean+exampleVariableTwo+%3D+true%3B%5Cn++public+static+boolean+exampleVariableThree+%3D+false%3B%5Cn++public+static+boolean+exampleVariableFour+%3D+false%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+returns+true+if+either+one+of+the+boolean+values+are+true%5Cn++++if+%28exampleVariableOne+%7C%7C+exampleVariableTwo%29+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+true%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+false%5C%22%29%3B%5Cn++++%7D%5Cn++++if+%28exampleVariableOne+%7C%7C+exampleVariableThree%29+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+true%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+false%5C%22%29%3B%5Cn++++%7D%5Cn++++if+%28exampleVariableThree+%7C%7C+exampleVariableFour%29+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+true%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+false%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe \"OR\" operator only checks to see if one the `boolean` values are true. Here are the possibilities and the results for each case.\n\n1. true \\|\\| true = true\n2. true \\|\\| false = true\n3. false \\|\\| true = true\n4. false \\|\\| false = false\n\nThe \"OR\" operator functions similarly to how the word \"or\" is used in English. If one of the options you mention when using \"or\" is met, the other one doesn't matter. For example, if you are looking for a muffin or a donut, your needs are satisfied when you find a muffin, a donut, or both.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100580"}},"updated_at":{"$date":{"$numberLong":"1537612100580"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"WukmAYvDxGax_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a3093418"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"A \"short circuit\" occurs when the operators don't evaluate all of the operands. Please look for those cases in the example below and notice how the short-circuit evaluation is necessary and useful when working with \"AND\" and \"OR\" operators.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22AIqfZZnnltZY%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ShortCircuitEvaluationExample.java%22%3A%7B%22name%22%3A%22ShortCircuitEvaluationExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ShortCircuitEvaluationExample+%7B%5Cn%5Cn++public+static+boolean+exampleVariableOne+%3D+true%3B%5Cn++public+static+boolean+exampleVariableTwo+%3D+false%3B%5Cn++public+static+int+exampleVariableThree+%3D+5%3B%5Cn++public+static+int+exampleVariableFour+%3D+0%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+does+not+evaluate+%5C%220+%3D%3D+5%2F0%5C%22+because+the+result+will+always+be+true%5Cn++++%2F%2F+as+long+as+exampleVariableOne+is+true%5Cn++++if+%28exampleVariableOne+%7C%7C+0+%3D%3D+exampleVariableThree%2FexampleVariableFour%29+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+true%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+false%5C%22%29%3B%5Cn++++%7D%5Cn++++%2F%2F+does+not+evaluate+%5C%220+%3D%3D+5%2F0%5C%22+because+the+result+will+always+be+false%5Cn++++%2F%2F+as+long+as+exampleVariableTwo+is+false%5Cn++++if+%28exampleVariableTwo+%5Cu0026%5Cu0026+0+%3D%3D+exampleVariableThree%2FexampleVariableFour%29+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+true%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+false%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe code above shows an example of short-circuit evaluation. Did you wonder why \"5/0\" did not cause an error when you ran the program? This is because \"5/0\" was not evaluated and ignored by the program. When working with the \"OR\" operator, if the first operand evaluates to \"true\", no matter what the second operand evaluates to, the result will always be \"true\". The program therefore doesn't even look at the second operand if the first operand evaluates to \"true\".\n\nSimilarly, when using the \"AND\" operator, if the first operand evaluates to \"false\", no matter what the second operand evaluates to, the result will always be \"false\", so the second operand is ignored.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100583"}},"updated_at":{"$date":{"$numberLong":"1537612100583"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"VvnphQZZtJxK_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a309341e"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"De Morgan's Law is helpful to remember for the AP exam because it will be useful with questions regarding boolean expressions. De Morgan's Law show how the NOT operator (!) can be distributed when it exists outside a set of parenthesis. Look below for a few examples of how De Morgan's Law works.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22GhxwgQFXLTNB%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22DeMorgansLawExample.java%22%3A%7B%22name%22%3A%22DeMorgansLawExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+DeMorgansLawExample+%7B%5Cn++%5Cn++public+static+boolean+exampleVariableOne+%3D+true%3B%5Cn++public+static+boolean+exampleVariableTwo+%3D+false%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+The+two+boolean+expressions+below+are+equal%5Cn++++if+%28%21%28exampleVariableOne+%5Cu0026%5Cu0026+exampleVariableTwo%29%29+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+true%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+false%5C%22%29%3B%5Cn++++%7D%5Cn++++if+%28%21exampleVariableOne+%7C%7C+%21exampleVariableTwo%29+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+true%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22The+boolean+expression+is+false%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nSome of the more common iterations for De Morgan's Law:\n\n1. !(A && B) is the same as !A \\|\\| !B\n2. !(A \\|\\| B) is the same as !A && !B\n3. !(C > D) is the same as C <= D\n4. !(C < D) is the same as C >= D\n5. !(C >= D) is the same as C < D\n6. !(C <= D) is the same as C > D\n7. !(E == F) is the same as E != F\n8. !(E != F) is the same as E == F\n\nRemember, you do not have to limit yourself to two operands when you work with the \"AND\" operator and the \"OR\" operator. `!(A && B && C)` is the same as `!A||!B||!C`. For the iterations shown above, A and B have to be `boolean` values, C and D have to be numbers and E and F may be a variety of data types.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100596"}},"updated_at":{"$date":{"$numberLong":"1537612100596"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"caDCQRTznKXb_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a3093437"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Let's dive into the function of loops as time-savers that will immediately take your coding to the next level. The `for` statement is a loop control statement that allows you to run one or many statements several times in succession. For example, let's say we wanted to print out numbers 1-50. Instead of writing fifty `System.out.println();` statements, we use a loop. Start exploring loops by looking through the code below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22wZtcabubezgP%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ForLoopExample.java%22%3A%7B%22name%22%3A%22ForLoopExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ForLoopExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+10%3B%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28%5C%22Counting+forward+from+0-10%3A%5C%22%29%3B%5Cn++++%2F%2F+increments+countOne+by+1+and+runs+until+the+boolean+expression+is+false%5Cn++++for+%28int+countOne+%3D+0%3B+countOne+%5Cu003c%3D+exampleVariableOne%3B+countOne%2B%2B%29+%7B%5Cn++++++System.out.print%28countOne+%2B+%5C%22+%5C%22%29%3B%5Cn++++%7D%5Cn++++System.out.println%28%5C%22%5C%5CnCounting+backward+from+0-10%3A%5C%22%29%3B%5Cn++++%2F%2F+decrements+countTwo+by+1+and+runs+until+the+boolean+expression+is+false%5Cn++++for+%28int+countTwo+%3D+exampleVariableOne%3B+countTwo+%5Cu003e%3D+0%3B+countTwo--%29+%7B%5Cn++++++System.out.print%28countTwo+%2B+%5C%22+%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nLet's learn and remember the loop syntax. The statements inside the parenthesis of a `for` loop can be split into three sections:\n\n1. Initializing - initializes a new variable and assigns it a value\n2. Control - the condition that is tested every time the loop executes. If the condition is \"true\", the loop continues to run. If the condition result is \"false\", the loop terminates.\n3. Step - where you change the value of the initialized value by whatever is necessary. You may use assignment statements such as \"+=\" and \"-=\" or use increment/decrement. Feel free to go back and review those sections at any point.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100659"}},"updated_at":{"$date":{"$numberLong":"1537612100659"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"nxgsHxOGLefZ_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a309343d"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"In addition to the `for` loop, the `while` loop achieves similar results. Examine the code below, which tackles the same printing problem as our example from the `for` loop. Note down any similarities or differences between the two.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22GAcmPnwcfZvQ%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22WhileLoopExample.java%22%3A%7B%22name%22%3A%22WhileLoopExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+WhileLoopExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+0%3B%5Cn++public+static+int+exampleVariableTwo+%3D+10%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+while+loop+does+not+end+until+the+boolean+expression%5Cn++++%2F%2F+is+false%5Cn++++System.out.println%28%5C%22Counting+forward+from+0-10%3A%5C%22%29%3B%5Cn++++while+%28exampleVariableOne+%5Cu003c%3D+10%29+%7B%5Cn++++++System.out.print%28exampleVariableOne+%2B+%5C%22+%5C%22%29%3B%5Cn++++++exampleVariableOne%2B%2B%3B%5Cn++++%7D%5Cn++++System.out.println%28%5C%22%5C%5CnCounting+backward+from+0-10%3A%5C%22%29%3B%5Cn++++while+%28exampleVariableTwo+%5Cu003e%3D+0%29+%7B%5Cn++++++System.out.print%28exampleVariableTwo+%2B+%5C%22+%5C%22%29%3B%5Cn++++++exampleVariableTwo--%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe code above contains two `while` statements, both followed by a block of code. A block is a group of statements enclosed within curly braces.\n\nLet's examine the first `while` loop to see how the statement works. The expression inside the parenthesis is evaluated each time the loop is executed. If the result is \"true\", the `while` loop executes the statements. If the result is \"false\" the `while` loop terminates. So, if we were to explain the `while` loop in words: \"while `exampleVariableOne` is less than or equal to 10, print the number and increment `exampleVariableOne` by one.\n\nMake sure your `while` loop has a termination point after a certain amount of executions. Otherwise, the program will not run as intended and may crash.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100685"}},"updated_at":{"$date":{"$numberLong":"1537612100685"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"ZFztOhARAIln_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a3093443"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Now that we are working with loops, let's explore \"loop control variables\". Loop control variables are ordinary `int` variables that are used to dictate elements such as how many times a loop will execute. Not all loops will necessarily have loop control variables, but it is important to recognize if one is present. Look at the program below to see what a \"loop control variable\" is.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22UdZBbhJfAiQe%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22LoopVariableExample.java%22%3A%7B%22name%22%3A%22LoopVariableExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+LoopVariableExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+10%3B%5Cn++public+static+int+counterOne+%3D+0%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28%5C%22Counting+forward+from+0-10%3A%5C%22%29%3B%5Cn++++%2F%2F+counterOne+is+the+loop+variable%5Cn++++while+%28exampleVariableOne+%5Cu003e%3D+counterOne%29+%7B%5Cn++++++System.out.print%28counterOne+%2B+%5C%22+%5C%22%29%3B%5Cn++++++counterOne%2B%2B%3B%5Cn++++%7D%5Cn++++System.out.println%28%5C%22%5C%5CnCounting+backward+from+0-10%3A%5C%22%29%3B%5Cn++++%2F%2F++%5C%22counterTwo%5C%22+is+the+loop+variable%5Cn++++for+%28int+counterTwo+%3D+exampleVariableOne%3B+counterTwo+%5Cu003e%3D+0%3B+counterTwo--%29+%7B%5Cn++++++System.out.print%28counterTwo+%2B+%5C%22+%5C%22%29%3B%5Cn++++%7D%5Cn++++%2F%2F+The+following+statement+will+cause+a+runtime+error%3A%5Cn++++%2F%2F+System.out.println%28counterTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\n`counterOne` and `counterTwo` are both loop control variables that control when the loop will terminate as well as the number of times the loop will execute before it terminates. In both examples above, the loop control value is incremented or decremented by a certain value every time the loop is executed. This step is required in the program because the loop will run forever if the condition always evaluates true.\n\nLet's think back to Access Control and remember to consider the scope of the variables inside the loop. Any variable declared inside the `for` or `while` loop or inside the parenthesis of a `for` statement can only be used in the body of the loop. They cannot be printed or accessed in any way after the loop is terminated. If you look at the code above, there is a print statement in comments. If you uncomment the statement and run the program, it will cause an error because `counterTwo` cannot be referenced outside the `for` loop.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100699"}},"updated_at":{"$date":{"$numberLong":"1537612100699"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"nasVgTeTwmhi_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a3093449"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"In Java, there are branching statements, for example the `break` statement, which breaks the loop in the program and continues running the statements after the loop. If you have a `for` or `while` loop and you want it to stop after a certain condition is true, you can have a `break` statement inside the `if` statement. How is it implemented in code? Take a look below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22hWiBTmnxFpiV%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22BreakStatementExample.java%22%3A%7B%22name%22%3A%22BreakStatementExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+BreakStatementExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+10%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28%5C%22Counting+forward+from+0-10%3A%5C%22%29%3B%5Cn++++for+%28int+count+%3D+0%3B+count+%5Cu003c%3D+exampleVariableOne%3B+count%2B%2B%29+%7B%5Cn++++++System.out.print%28count+%2B+%5C%22+%5C%22%29%3B%5Cn++++++%2F%2F+once+count+is+equal+to+5%2C+the+break+statement+will%5Cn++++++%2F%2F+terminate+the+for+loop%5Cn++++++if+%28count+%3D%3D+5%29+%7B%5Cn++++++++break%3B%5Cn++++++%7D%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe `if` statement has the expression \"count == 5\", so when `count` has a value of 5 the statements inside the `if` statement will be executed, including the `break;` statement, which will terminate the `for` loop so any number after 5 will not be printed. `break;` does not affect the `if` statement, it terminates the whole loop. When the `break;` statement is used appropriately, it saves time when running the program because you wouldn't have to loop through the same statements over and over again.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100722"}},"updated_at":{"$date":{"$numberLong":"1537612100722"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"kWKivrRNnAOC_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a309344f"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Another important branching statement in Java is the `return` statement, which we have already seen before when we covered methods. At any time in a method, the `return` statement is used to cause the whole method to return a certain value and ignore all the statements underneath it. The program belows shows an example of the `count()` method and a `return` statement inside a `while` loop.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22HFZVxKQiExHx%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ReturnStatementExample.java%22%3A%7B%22name%22%3A%22ReturnStatementExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ReturnStatementExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+100%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28count%28%29%29%3B%5Cn++%7D%5Cn%5Cn++public+static+String+count%28%29+%7B%5Cn++++while+%28exampleVariableOne+%5Cu003e+0%29+%7B%5Cn++++++if+%28exampleVariableOne+%3D%3D+25%29+%7B%5Cn++++++++return+%5C%22exampleVariableOne+is+25%5C%22%3B%5Cn++++++%7D%5Cn++++++exampleVariableOne--%3B%5Cn++++%7D%5Cn++++%2F%2F+returns+the+statement+below+if+exampleVariableOne%5Cn++++%2F%2F+is+never+equal+to+25%5Cn++++return+%5C%22exampleVariableOne+is+never+equal+to+25%5C%22%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nAs you can see after running the code above, `return` breaks the loop and exits the method immediately after it is called. The statement `return \"exampleVariableOne is never equal to 25\";` is never called because `exampleVariableOne` will eventually reach 25 as it decreases from 100 to 0.\n\nThe `return` statement is useful because it saves time and makes the program run faster by returning the output of method without executing unnecessary code and loops. It is good practice to always have a `return` statement after the for/while loop in case the return statement inside the for/while loop is never executed. Otherwise, a compile-time error will occur because the method cannot return nothing (unless it has the Java reserved word \"void\" in the method header).\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100735"}},"updated_at":{"$date":{"$numberLong":"1537612100735"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"aHzXYHhUixfi_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a3093455"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"As discussed previously, it is essential to make sure each loop you write has a distinct end. For example, if the condition inside the `for` or `while` loop is always true, the loop will run forever, creating an infinite loop. It is possible to accidentally create a loop that never ends. Look below to see how the `if` statement prevents the infinite loop from executing over 10 times.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22rxzWbphlRmYv%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22InfiniteLoopExample.java%22%3A%7B%22name%22%3A%22InfiniteLoopExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+InfiniteLoopExample+%7B%5Cn%5Cn++public+static+boolean+exampleVariableOne+%3D+true%3B%5Cn++public+static+int+exampleVariableTwo+%3D+0%3B%5Cn++public+static+int+counter+%3D+0%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+without+the+if+statement%2C+the+loop+will+be+executed+infinitely%5Cn++++%2F%2F+because+exampleVariableOne+is+always+true%5Cn++++while+%28exampleVariableOne%29+%7B%5Cn++++++System.out.print%28exampleVariableTwo+%2B+%5C%22+%5C%22%29%3B%5Cn++++++exampleVariableTwo%2B%2B%3B%5Cn++++++%2F%2F+the+if+statement+ensures+that+the+infinite+loop%5Cn++++++%2F%2F+is+terminated+after+it+runs+10+times%5Cn++++++if+%28exampleVariableTwo+%5Cu003e+10%29+%7B%5Cn++++++++exampleVariableOne+%3D+false%3B%5Cn++++++%7D%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nIf the `if` statement was not in the code, the `while` loop would run indefinitely. This is because the boolean expression inside the parenthesis always return \"true\". For this reason, we must ensure that our boolean expressions have an end by making sure they return as \"false\" in order to end the loop.\n\nInfinite loops can cause your computer/browser/application to pause due to the continuous executions of the program, or even crash. One way to debug infinite loops is to print out the loop control variable after running the statements inside the loop to check what the cause of the infinite loop is.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100753"}},"updated_at":{"$date":{"$numberLong":"1537612100753"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"QsjbPGkCQaWy_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a309345d"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"In the real world, programmers examine, use, test, and manipulate gigantic amounts of data. Arrays are used to systematically organize and process this data efficiently and effectively. When data is standardized and formulated into arrays, a simple and small Java program can handle an enormous amount of data. Take a look at the three different arrays below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22YLkqLLIxUhBl%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22OneDimensionalArraysExample.java%22%3A%7B%22name%22%3A%22OneDimensionalArraysExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+OneDimensionalArraysExample+%7B%5Cn%5Cn++%2F%2F+exampleVariableOne+is+declared+but+not+initialised%5Cn++public+static+int%5B%5D+exampleVariableOne%3B%5Cn++public+static+int%5B%5D+exampleVariableTwo+%3D+%7B0%2C+1%2C+2%2C+3%2C+4%2C+5%2C+6%2C+7%2C+8%7D%3B%5Cn++public+static+boolean%5B%5D+exampleVariableThree+%3D+%7Btrue%2C+false%2C+false%2C+true%7D%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+the+default+value+for+int%5B%5D+elements+is+0%5Cn++++exampleVariableTwo%5B0%5D+%3D+10%3B%5Cn++++System.out.println%28exampleVariableTwo%5B3%5D%29%3B%5Cn++++System.out.println%28exampleVariableThree%5B1%5D%29%3B%5Cn%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nAn array is made up of a cells that are used to store a value. Each array can hold a list of values. All the values in an array need to have same data type. Like `String` variables, the index of an array starts with 0. There are two ways to initialize an array:\n\n1. `datatype[] arrayname = {valueOne, valueTwo, valueThree};`<br>\n\n The simplest way to create an array is enclosing its values in curly braces separated by commas. \n\n2. `datatype[] arrayname = new datatype[arraylength];`<br>\n\n We give an array a certain length and adhere to it throughout the whole program. The length cannot be altered once given.\n\nYou can access the elements in the array using: `arrayname[index]`. This indicates a specific element inside the array using the index. You can then manipulate the value it holds.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100791"}},"updated_at":{"$date":{"$numberLong":"1537612100791"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"BlXGSZVhhaDw_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a309345f"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"As we stated previously, the way index works with arrays is similar to how index works with `String` values. Arrays also have a way of returning their own length, but in place of a method like with strings, the array's length is a variable, meaning the parenthesis are not needed. Look below to see how we can access the length of an array.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22MrvYuIEbgnyR%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ArrayLength1DExample.java%22%3A%7B%22name%22%3A%22ArrayLength1DExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ArrayLength1DExample+%7B%5Cn%5Cn++public+static+int%5B%5D+exampleVariableOne+%3D+new+int%5B5%5D%3B%5Cn++public+static+int%5B%5D+exampleVariableTwo+%3D+%7B0%2C+1%2C+2%2C+3%2C+4%2C+5%2C+6%2C+7%2C+8%7D%3B%5Cn++%2F%2F+returns+the+length+of+the+array+and+assigns%5Cn++%2F%2F+it+to+integer+variables%5Cn++public+static+int+lengthOne+%3D+exampleVariableOne.length%3B%5Cn++public+static+int+lengthTwo+%3D+exampleVariableTwo.length%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28lengthOne%29%3B%5Cn++++System.out.println%28lengthTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe length of an array equals the number of elements it can hold. The last index of an array is `array.length-1`. Remember that the `length()` method in the `String` class works differently than `array.length()`.\n\nThe length of an array cannot be altered after it is initialized. Please remember this quality when you loop through arrays with for/while statements.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100795"}},"updated_at":{"$date":{"$numberLong":"1537612100795"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"WnoesXXWxLUZ_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a3093461"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Now that we know what an array is and what it contains, let's see how we can apply loops to help us accomplish tasks with arrays. For example, you want to know the sum of all the elements in an array. Instead of summing each element together in your head, you can write a `for` loop to do the work for you. Check out the code below for an example.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22sihQZGDtfuXQ%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22Iteration1DExample.java%22%3A%7B%22name%22%3A%22Iteration1DExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+Iteration1DExample+%7B%5Cn%5Cn++public+static+int%5B%5D+exampleVariableOne+%3D+%7B0%2C+1%2C+2%2C+3%2C+4%2C+5%2C+6%2C+7%2C+8%7D%3B%5Cn++public+static+int+sum+%3D+0%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+for+loops+are+the+most+common+method+when%5Cn++++%2F%2F+iterating+through+an+1D+array%5Cn++++for+%28int+count+%3D+0%3B+count+%5Cu003c+exampleVariableOne.length%3B+count%2B%2B%29+%7B%5Cn++++++%2F%2F+add+each+element+to+sum%5Cn++++++sum+%2B%3D+exampleVariableOne%5Bcount%5D%3B%5Cn++++%7D%5Cn++++%2F%2F+print+the+total+sum+of+all+the+elements+in+the+array%5Cn++++System.out.println%28sum%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe `for` statement has the condition `count<exampleVariableOne.length`, which makes sure that every element in the array is added to sum before the `for` loop is terminated. Why do we use '<'? Because the last index of the array is always `array.length-1`, so `count` cannot be equal to or greater than `exampleVariableOne.length`. If we do not specify this, a runtime error may occur.\n\nThe `for` loop above is a prime example of the loops used when dealing with one-dimensional arrays. As you master using a `for` loop and accessing the elements in an array, you will start writing more complicated programs that deal with large amounts of data. Being able to iterate through arrays using loops is important because arrays cannot be directly printed to the console. `System.out.println(arrayname)` won't work.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100798"}},"updated_at":{"$date":{"$numberLong":"1537612100798"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"cdQNfBXrZzyL_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a3093463"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Let's examine another type of loop. The \"enhanced for\" statement, or the \"for-each\" loop, looks at each element of an array in order, which allows the loop to automatically avoids errors such as going past the last index of an array. Let's revisit the same goal as in the example on previous page, but try it now with the for-each loop.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22lEhrQLRlqwVP%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22EnhancedForLoopExample.java%22%3A%7B%22name%22%3A%22EnhancedForLoopExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+EnhancedForLoopExample+%7B%5Cn%5Cn++public+static+int%5B%5D+exampleVariableOne+%3D+%7B0%2C+1%2C+2%2C+3%2C+4%2C+5%2C+6%2C+7%2C+8%7D%3B%5Cn++public+static+int+sum+%3D+0%3B%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+simplifies+the+for+loop+and+creates+simple+code%5Cn++++%2F%2F+1D+array%5Cn++++for+%28int+count+%3A+exampleVariableOne%29+%7B%5Cn++++++sum+%2B%3D+exampleVariableOne%5Bcount%5D%3B%5Cn++++%7D%5Cn++++System.out.println%28sum%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe syntax for an \"enhanced for statement\" is as follows, `for(datatype variablename : arrayname)`. The \"datatype\" and \"variablename\" is what you would put in the first section of a `for` loop, the loop control variable. This creates a new variable that only exists within the \"for-each\" loop. It is used as the index when accessing the elements of the array.\n\nThe \"for-each\" loop is used when you want to loop through each and every element of the array without missing out an index or accidentally exceeding the last index of the array. When you code a program that only accesses certain elements inside an array, you can still use the \"for-each\" loop. However, as it requires an extra `if` statement to do so, you may choose to use a regular `for` loop with incrementing/decrementing variables as shown in past topics.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100800"}},"updated_at":{"$date":{"$numberLong":"1537612100800"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"gVUaELGVmAEE_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a3093469"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Let's expand our array conversation to two-dimensional arrays. Spreadsheets, web browser screens, images, and many other types of data are in a 2D format, which is why we need arrays that can handle this type of data. A 2D array is laid out in a grid like graph paper, meaning each element is still housed in its own cell like in a 1D array. However, that element is now represented by two different indexes that are both needed in order to specify that cell. Take a look at the 2D arrays below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22DJGEdFNocdKX%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22TwoDimensionalArraysExample.java%22%3A%7B%22name%22%3A%22TwoDimensionalArraysExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+TwoDimensionalArraysExample+%7B%5Cn%5Cn++public+static+int%5B%5D%5B%5D+exampleVariableOne+%3D+new+int%5B3%5D%5B4%5D%3B%5Cn++public+static+int%5B%5D%5B%5D+exampleVariableTwo+%3D+%7B%7B0%2C+1%2C+2%2C+3%2C+4%7D%2C+%7B4%2C+5%2C+6%2C+7%2C+8%7D%7D%3B%5Cn++public+static+boolean%5B%5D%5B%5D+exampleVariableThree+%3D+%7B%7Btrue%2C+false%2C+false%2C+true%7D%2C+%7Bfalse%2C+false%2C+true%2C+true%7D%7D%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++exampleVariableOne%5B1%5D%5B2%5D+%3D+10000%3B%5Cn++++%2F%2F+the+default+value+for+int%5B%5D%5B%5D+elements+when+declared+is+also+0%5Cn++++System.out.println%28exampleVariableOne%5B1%5D%5B1%5D%29%3B%5Cn++++System.out.println%28exampleVariableTwo%5B1%5D%5B3%5D%29%3B%5Cn++++System.out.println%28exampleVariableThree%5B0%5D%5B2%5D%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nSimilar to 1D arrays, the index of both row and column start at 0. The first square bracket after the array name specifies the row while the second one dictates the column. All indexes start at 0, so `varOne[0][0]` specifies the first row and the first column. If you have `varOne[3][1]`, you are indicating the element that exists in the fourth row and the second column. Like 1D arrays, all the elements must have the same datatype. Initializing a 2D array is also very similar to initializing a 1D array.\n\n1. `datatype[][] arrayname = new datatype[3][1];`<br>\n\nCreates a 2D array with three rows and one column. \n\n2. `datatype[] arrayname = {{varOne, varTwo}, {varThree, varFour}};`<br>\n\nCreates a 2D array with two rows and two columns. The rows are separated by commas and enclosed in individual curly braces.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100811"}},"updated_at":{"$date":{"$numberLong":"1537612100811"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"aSBrCWzMvNfy_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a309346f"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Now we will take a look at the properties of the rows and columns that make up 2D arrays. Most of the time, each row in a 2D array will have the same number of columns, but that may not always be the case. If you were to initialize a 2D array by listing out the elements individually, it may lead to a row with a different number of columns. In situations like this, and others, you will need to know how to access the length of the row or the column of a 2D array. Let's see how it's done below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22KeJQTgNxSEUk%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ArrayLength2DExample.java%22%3A%7B%22name%22%3A%22ArrayLength2DExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ArrayLength2DExample+%7B%5Cn%5Cn++public+static+int%5B%5D%5B%5D+exampleVariableOne+%3D+new+int%5B10%5D%5B5%5D%3B%5Cn++%2F%2F+returns+the+length+of+the+rows+in+the+array%5Cn++public+static+int+lengthOne+%3D+exampleVariableOne.length%3B%5Cn++%2F%2F+returns+the+length+of+the+columns+in+the+array%5Cn++public+static+int+lengthTwo+%3D+exampleVariableOne%5B0%5D.length%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28lengthOne%29%3B%5Cn++++System.out.println%28lengthTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nWe use `arrayname.length` to determine the number of rows in a 2D array because the length of a 2D array is equal to the number of rows it has. The number of columns may vary row to row, which is why the number of rows is used as the length of the 2D array.\n\nWhen calling the length of a column, we pinpoint the row before using `.length`. The program above checks to see how many columns the first row of the 2D array contains by calling `exampleVariableOne[0].length`. Adjust the '0' to another number to change the row specified.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100820"}},"updated_at":{"$date":{"$numberLong":"1537612100820"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"WgUjolaycFWX_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a3093475"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"We explored using `for` loops with one-dimensional arrays. Now let's jump into nested `for` loops as a method for iterating through 2D arrays. A nested `for` loop is one `for` loop inside another. Take a look below to see what this means.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22ajMFBeSwRKbN%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22Iteration2DExample.java%22%3A%7B%22name%22%3A%22Iteration2DExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn+%5Cnpublic+class+Iteration2DExample+%7B%5Cn%5Cn++public+static+int%5B%5D%5B%5D+exampleVariableOne+%3D+%7B%7B0%2C+1%2C+2%2C+3%2C+4%7D%2C+%7B4%2C+5%2C+6%2C+7%2C+8%7D%7D%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+nested+for+loops+are+necessary+for%5Cn++++%2F%2F+iterating+through+a+2D+array%5Cn++++for+%28int+countOne+%3D+0%3B+countOne+%5Cu003c+exampleVariableOne.length%3B+countOne%2B%2B%29+%7B%5Cn++++++for+%28int+countTwo+%3D+0%3B+countTwo+%5Cu003c+exampleVariableOne%5BcountOne%5D.length%3B+countTwo%2B%2B%29+%7B%5Cn++++++++System.out.print%28%5C%22Index+%5B%5C%22+%2B+countOne+%2B+%5C%22%5D%5B%5C%22+%2B+countTwo+%2B+%5C%22%5D%3A+%5C%22%29%3B%5Cn++++++++System.out.println%28exampleVariableOne%5BcountOne%5D%5BcountTwo%5D%29%3B%5Cn++++++%7D%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe first `for` loop loops through each row of the 2D array one by one. As the first loop runs through each row, the second (nested) `for` loop inside the first loop loops through the columns one by one. The nested for loops runs row by row, checking each column within the row before moving on to the next row.\n\nBecause each row could have different numbers of columns, we need to access the specific column length of the specified row. That is why you see `exampleVariableOne[countOne].length` used within the second nested `for` loop.\n\nThe concept of using loops when working with 2D arrays is an essential tool in every programmer's toolkit. Look meticulously through the code above and become comfortable with how each loop fits into the big picture. When you become comfortable with the `for` loop, try using “for-each” loops with 2D arrays.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100833"}},"updated_at":{"$date":{"$numberLong":"1537612100833"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"ChFmdkoHJPKP_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a309347b"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Now that we have entered the world of arrays, let's talk about the `ArrayList` class in Java and what it offers in addition to the known capabilities of arrays. An `ArrayList` object contains an array of object references as well as methods for managing the array. The elements of an `ArrayList` must be object references, not primitive data such as `int` or `double`. Take a look at the `ArrayList` of `String` values as an example. The `ArrayList` class has to be imported from the `java.util` package in order for the program to compile without error.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22mpLwTyxtbxog%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ArrayListsExample.java%22%3A%7B%22name%22%3A%22ArrayListsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnimport+java.util.ArrayList%3B%5Cn%5Cnpublic+class+ArrayListsExample+%7B%5Cn%5Cn++public+static+ArrayList%5Cu003cString%5Cu003e+exampleVariableOne+%3D+new+ArrayList%5Cu003cString%5Cu003e%28%29%3B%5Cn++public+static+ArrayList%5Cu003cString%5Cu003e+exampleVariableTwo+%3D+new+ArrayList%5Cu003cString%5Cu003e%285%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+%5C%22add%5C%22+will+be+explained+later+this+unit%5Cn++++exampleVariableOne.add%28%5C%22Hello%5C%22%29%3B%5Cn++++exampleVariableOne.add%28%5C%22World%5C%22%29%3B%5Cn++++%2F%2F+ArrayLists+can+be+printed+directly+to+the+console%2C+unlike+arrays%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe syntax for declaring an `ArrayList` is: <br>\n\n `ArrayList<objectType> name = new ArrayList<objectType>();`. <br>\n\nBy default, an `ArrayList` will start out with 10 empty cells. If you want to start with an initial capacity, put a number in the parentheses. This does not limit the size the `ArrayList` can expand to. A benefit of an `ArrayList` is that elements may continue to be added regardless of the original size of the `ArrayList`. The size of the `ArrayList` will automatically increase and no information will be lost.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100845"}},"updated_at":{"$date":{"$numberLong":"1537612100845"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"hWQHmCTUHoxE_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a3093481"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The index of an `ArrayList` starts at 0 and it cannot equal the size of the `ArrayList`, just like we mentioned with strings and arrays. `ArrayList` is a class, which means it has its own methods like the `String` class does. Take a look at the commonly used methods in the `ArrayList` class and their functions.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22vtydXDqkiuUz%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ArrayListMethodExample.java%22%3A%7B%22name%22%3A%22ArrayListMethodExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnimport+java.util.ArrayList%3B%5Cn%5Cnpublic+class+ArrayListMethodExample+%7B%5Cn%5Cn++public+static+ArrayList%5Cu003cString%5Cu003e+exampleVariableOne+%3D+new+ArrayList%5Cu003cString%5Cu003e%28%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+adds+%5C%22Hello%5C%22+to+the+ArrayList%5Cn++++exampleVariableOne.add%28%5C%22Hello%5C%22%29%3B%5Cn++++%2F%2F+adds+%5C%22World%5C%22+to+the+0th+index+of+the+ArrayList%5Cn++++exampleVariableOne.add%280%2C+%5C%22World%5C%22%29%3B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++%2F%2F+removes+%5C%22Hello%5C%22+from+the+ArrayList%5Cn++++exampleVariableOne.remove%280%29%3B%5Cn++++%2F%2F+changes+%5C%22World%5C%22+to+%5C%22Java%5C%22%5Cn++++exampleVariableOne.set%280%2C+%5C%22Java%5C%22%29%3B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++%2F%2F+access+the+first+element+of+the+ArrayList%5Cn++++System.out.println%28exampleVariableOne.get%280%29%29%3B%5Cn++++%2F%2F+prints+the+size+of+the+ArrayList%5Cn++++System.out.println%28exampleVariableOne.size%28%29%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThese are the important methods to learn for an `ArrayList`:\n\n1. `add(value)` or `add(index,value)`<br>\n\n Adds an element to the end of an `ArrayList`. The method returns \"true\" if it is treated as a `boolean` value. When you add a specific index as a parameter, it will add the value at the specified index and move everything else after it up by one index.\n \n2. `remove(index)`<br>\n\n Removes an element from the `ArrayList`. It can return a reference to the deleted element if it is called. The method will shift the other elements down an index to account for the deleted element. \n\n3. `set(index, value)`<br>\n\n Combines `add()` and `remove()` by replacing the value at \"index\" with the new \"value\"\n\n4. `get(index)`<br>\n\n Accesses the element at a particular index. \n \n5. `size()`<br>\n\n Returns the current length of the `ArrayList`. This method is important as the size may change when using the methods above.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100862"}},"updated_at":{"$date":{"$numberLong":"1537612100862"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"PwNaTlSxNzPk_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a3093487"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"\"Autoboxing\" is a way to work with primitive data types within `ArrayLists` to make your coding easier. If we wanted to create an `ArrayList` of integers, we use `ArrayList<Integer>` because `int` is not an object. However, when we call methods such as `add()` and `set()`, instead of creating a new object `add(new Integer(11));`, we can just write `add(11)` as Java automatically converts `int` into `Integer` for us. Look below for an example of autoboxing.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22RCkIzLbOHVuQ%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22AutoBoxingExample.java%22%3A%7B%22name%22%3A%22AutoBoxingExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnimport+java.util.ArrayList%3B%5Cn%5Cnpublic+class+AutoBoxingExample+%7B%5Cn%5Cn++public+static+ArrayList%5Cu003cInteger%5Cu003e+exampleVariableOne+%3D+new+ArrayList%5Cu003cInteger%5Cu003e%28%29%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++exampleVariableOne.add%28new+Integer%285%29%29%3B%5Cn++++%2F%2F+autoboxing+leads+to+simple+code+without+unnecessary+boxing%5Cn++++exampleVariableOne.add%2880%29%3B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nAutoboxing automatically converts `int` values to type `Integer` when the program is run. Therefore, regardless of what primitive data type we want to use, as long as we initialize the `ArrayList` with the right object, we can add primitive data types without creating new objects.\n\nUse autoboxing when creating an `ArrayList` of objects that have corresponding primitive data types. It makes coding a lot more simple when debugging the code.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100877"}},"updated_at":{"$date":{"$numberLong":"1537612100877"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"YeFmQgAlEAmd_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a30934a7"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"We have already worked with objects in previous chapters; they are some of the building blocks in Java. Let's go back to the basics and explore objects from their foundation. There are three properties that each object has. First, each object has a unique \"identity\" that makes it distinct from any other. Second, each object has a current \"state\", meaning it currently contains a value that has the ability to change. And third, an object has a \"behavior\" which enables it to call and run methods. Let's create an object below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22EVvxnhTEAXez%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ObjectTest.java%22%3A%7B%22name%22%3A%22ObjectTest.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ObjectTest+%7B%5Cn%5Cn++private+String+exampleVariableOne%3B%5Cn%5Cn++%2F%2F+constructor+of+the+class%5Cn++public+ObjectTest%28String+exampleVariableOne%29+%7B%5Cn++++this.exampleVariableOne+%3D+exampleVariableOne%3B%5Cn++%7D%5Cn%5Cn++public+void+print%28%29%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++%7D%5Cn%7D%22%7D%2C%22ObjectsExample.java%22%3A%7B%22name%22%3A%22ObjectsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ObjectsExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+creates+a+new+object+of+the+test+class%5Cn++++%2F%2F+since+the+constructor+of+the+ObjectTest+class+takes+in%5Cn++++%2F%2F+one+String+parameter%2C+%5C%22Hello+World%21%5C%22+is+inside+the+parentheses%5Cn++++ObjectTest+objectTest+%3D+new+ObjectTest%28%5C%22Hello+World%21%5C%22%29%3B%5Cn++++objectTest.print%28%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nObjects refer to a particular instance of a class. In Java, this allows us to create particular instances of classes and store them in variables called objects. The syntax for creating most objects is as follows:\n\n`ClassName variableName = new ConstructorName(parameters);`\n\nAs you have seen previously, the constructor name is the same as the class name. Objects can have parameters inside the parenthesis, depending on the constructor of the other class.\n\nWhen you create a new `ArrayList` and use the reserved word `new`, it makes an object from the original `ArrayList` class and stores it inside the name of your `ArrayList`. This is why you can use dot notation (.) and directly call methods and variables that exist in the original `ArrayList` class as they also exist in the instance you created. However, you still need a \"main class\" containing a functioning main method in order for your program to compile and run. Have you tried creating an object of the class itself in the main method? We will see these later in the course!\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100958"}},"updated_at":{"$date":{"$numberLong":"1537612100958"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"sBSwxCZcPYjA_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a30934ad"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"When we looked at object equality in an earlier section with the `equals()` method for `String`, we discovered how it was different in functionality than the default equals method for other objects. Take a look at the two different equality functions below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22dGAuemINANvh%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ObjectEqualityExample.java%22%3A%7B%22name%22%3A%22ObjectEqualityExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ObjectEqualityExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++ObjectEqualityTest+objectEqualityTest+%3D+new+ObjectEqualityTest%28%5C%22Java%5C%22%29%3B%5Cn++++ObjectEqualityTest+objectEqualityTestOne+%3D+new+ObjectEqualityTest%28%5C%22Java%5C%22%29%3B%5Cn++++ObjectEqualityTest+objectEqualityTestTwo+%3D+objectEqualityTestOne%3B%5Cn++++%2F%2F+checks+to+see+if+the+reference+for+the+objects+are+the+same%5Cn++++boolean+exampleVariableOne+%3D+objectEqualityTest.equals%28objectEqualityTestOne%29%3B%5Cn++++boolean+exampleVariableTwo+%3D+objectEqualityTestOne.equals%28objectEqualityTestTwo%29%3B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%2C%22ObjectEqualityTest.java%22%3A%7B%22name%22%3A%22ObjectEqualityTest.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ObjectEqualityTest+%7B%5Cn%5Cn++private+String+exampleVariableThree%3B%5Cn%5Cn++public+ObjectEqualityTest%28String+exampleVaraibleThree%29+%7B%5Cn++++this.exampleVaraibleThree+%3D+exampleVaraibleThree%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe default method for objects only checks whether two objects have the same reference. It does not look at the values of the objects inside the reference to see if those are the same. Therefore, it will work exactly the same as the \"==\" operator. That is why `exampleVariableTwo` returns \"true\" as the reference of the two variables is the same. Even though `objectEqualityTest` and `objectEqualityTestOne` have the exact same statement with the same parameters, it returns \"false\" because they are two individual objects.\n\nThe way to handle this issue in your own work is to create your own `equals()` method in your class and override the default one. We will learn how to override methods later in the course.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100969"}},"updated_at":{"$date":{"$numberLong":"1537612100969"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"dxfsDWgGDEcx_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a30934b3"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"\"Dot notation\" is an important concept in Java and something that must be paid attention to when creating objects. The members of the class, including variables and methods, are accessed using dot notation. Let's look at a few examples of dot notation.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22AJxZKnQXAoTZ%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22DotNotationExample.java%22%3A%7B%22name%22%3A%22DotNotationExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+DotNotationExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++DotNotationTest+dotNotationTest+%3D+new+DotNotationTest%28%29%3B%5Cn++++%2F%2F+any+public+variable+or+method+in+DotNotationTest+can+be%5Cn++++%2F%2F+accessed+through+dot+notation%5Cn++++System.out.println%28dotNotationTest.exampleVariableOne%29%3B%5Cn++++System.out.println%28dotNotationTest.exampleVariableTwo%29%3B%5Cn++++dotNotationTest.print%28%29%3B%5Cn++%7D%5Cn%7D%22%7D%2C%22DotNotationTest.java%22%3A%7B%22name%22%3A%22DotNotationTest.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+DotNotationTest+%7B%5Cn%5Cn++public+String+exampleVariableOne+%3D+%5C%22Objects%5C%22%3B%5Cn++public+int+exampleVariableTwo+%3D+20%3B%5Cn++private+int+exampleVariableThree+%3D+10%3B%5Cn%5Cn++public+void+print%28%29+%7B%5Cn++++System.out.println%28%5C%22Hello+World%21%5C%22%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nIf you recollect from the section on Access Control, only the `public` methods and variables can be accessed through the object. Private methods are not accessible. For classes that are included in Java packages, you can find the documentation online to see what the available public method and variables are. And you can make sure the variables in your classes are either set as `public` or `private` depending on whether or not you want to allow the object to access it and change its data if needed. When you attempt to access a private member of a class, you will throw a runtime error.\n\nAlso, when you see Java reserved word `this` like `this.variablename`, it is a reference to a current object whose method or constructor is being invoked. It's usually unnecessary to use this reserved word but make sure you know how it works.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100982"}},"updated_at":{"$date":{"$numberLong":"1537612100982"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"JCTiOhVRtfeV_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194478038318a30934b9"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Encapsulation is the idea of withholding the details of an object from other parts of the program while allowing its use. The object is only used through its access methods, which are carefully written to keep the object consistent and secure. We use the Java reserved word `private` to guarantee other classes have no access to the member of a certain class. Let's see how a `private` variable has access methods that allow it to be viewed.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22WkMIyPMmTZGD%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22EncapsulationExample.java%22%3A%7B%22name%22%3A%22EncapsulationExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+EncapsulationExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++EncapsulationTest+encapsulationTest+%3D+new+EncapsulationTest%28%29%3B%5Cn++++System.out.println%28encapsulationTest.getVariableOne%28%29%29%3B%5Cn++%7D%5Cn%7D%22%7D%2C%22EncapsulationTest.java%22%3A%7B%22name%22%3A%22EncapsulationTest.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+EncapsulationTest+%7B%5Cn%5Cn++private+String+exampleVariableOne+%3D+%5C%22Hello+World%21%5C%22%3B%5Cn%5Cn++%2F%2F+private+variables+can+be+accessible+through%5Cn++%2F%2F+public+methods%5Cn++public+String+getVariableOne%28%29+%7B%5Cn++++return+exampleVariableOne%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe `EncapsulationTest` class consists of two main members, the `private` variable `exampleVariableOne` and the method `getVariableOne()`. This is a \"getter\" method, which returns the value of a `private` member of the class. This method ensures `exampleVariableOne` will never be in danger of being changed or manipulated even though it is visible through the getter method. This is one example of how encapsulation works. It's a concept that will help you avoid unwanted errors when writing big programs.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612100992"}},"updated_at":{"$date":{"$numberLong":"1537612100992"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"vTdnTmhjfmPY_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194578038318a30934be"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Do you remember casting `int` and `double` data types? \"Type Casts\" are similar to casting but for objects. <br>\n\nThe syntax for type casts is as follows, `(requiredType)(expression/variable)`. <br>\n\nSomething to remember when type casting objects is whether or not the class is a \"descendant\" of another one class (has a parent class). If so, we can create objects that incorporate two different classes. We will look at the concept of inheritance later in the course. For now, keep in mind that every single class is a \"descendant\" of a class called `Object` that exists in the package `java.lang` (automatically-imported), so you can create objects like the one below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22aQuHzzTedQGT%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22TypeCastExample.java%22%3A%7B%22name%22%3A%22TypeCastExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+TypeCastExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++Object+exampleVariableOne+%3D+new+TypeCastTest%28%29%3B%5Cn++++%2F%2F+exampleVariableOne+has+to+be+casted+to+a+TypeCastTest+object%5Cn++++%2F%2F+before+accessing+language%5Cn++++System.out.println%28%28%28TypeCastTest%29exampleVariableOne%29.language%29%3B%5Cn++%7D%5Cn%7D%22%7D%2C%22TypeCastTest.java%22%3A%7B%22name%22%3A%22TypeCastTest.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+TypeCastTest+%7B%5Cn%5Cn++public+String+language+%3D+%5C%22Java%5C%22%3B%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nWhen we call `Object exampleVariableOne = new TypeCastTest()`, `exampleVariableOne` becomes an instance of both `Object` and `TypeCastTest`. Even though this is allowed in Java, you can't actually call a method or access a variable from the `TypeCastTest` class because you have to specify which instance you are referring to when attempting to access any members of a class. The solution is to cast `exampleVariableOne` to a `TypeCastTest` so that the program sees which class you are referring to and accesses the members from the right class.\n\nThis is one of the more complex ideas in object-oriented programming, but will be crucial when we dive into inheritance and interface later in the course.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612101002"}},"updated_at":{"$date":{"$numberLong":"1537612101002"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"QRGGmqAzWiOl_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194578038318a30934c4"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"A \"static\" object is unique; it belongs to the class rather than the instance of the class. In other words, a static variable is only allocated to the memory once: when the class loads. No matter how many instances you create from a class, the static variable is only allocated to the memory once, making your program memory efficient. When a program is running and there's only one instance of something, it is \"static\". Take a look at the program below for examples of `static` methods and variables, and how we can call them without the use of an object.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22hpAPzyCQFYji%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22StaticFieldsExample.java%22%3A%7B%22name%22%3A%22StaticFieldsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+StaticFieldsExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+static+variables+and+methods+can+be+accessed%5Cn++++%2F%2F+without+creating+an+object%5Cn++++System.out.println%28StaticFieldsTest.exampleVariableOne%29%3B%5Cn++++StaticFieldsTest.print%28%29%3B%5Cn++%7D%5Cn%7D%22%7D%2C%22StaticFieldsTest.java%22%3A%7B%22name%22%3A%22StaticFieldsTest.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+StaticFieldsTest+%7B%5Cn%5Cn++public+static+String+exampleVariableOne+%3D+%5C%22Java%5C%22%3B%5Cn++private+static+String+exampleVariableTwo%3D+%5C%22Hello+World%21%5C%22%3B%5Cn%5Cn++public+static+void+print%28%29+%7B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nWe don't need to create a new object to access \"static\" members of a class. We call the class name and use \"dot notation\" to specify the member we want to access. Static members are attached to a class rather than an object or an instance of the class.\n\nAs a programmer, it is important to note that since there is only one version of the \"static\" members, when the variable's value is changed, the value of that variable is changed for every object in the class.\n\nAlso, keep in mind that the main method of each class is `static` because there are no objects that exist for the class when the JVM calls the main method. Objects are usually created inside the main method, which is why the method itself has to be `static`.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612101010"}},"updated_at":{"$date":{"$numberLong":"1537612101010"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"cMTGJiSGBzsu_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194578038318a30934ca"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Object oriented languages like Java have a feature called \"inheritance\" which allow programmers to define new classes based on an existing class. Instead of starting from nothing, we can build upon a previously existing class, or a \"superclass\", and add more variables and methods to the superclass. The program below shows a simple implementation of inheritance.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22xoAVvQahCFXW%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22EnglishGreeting.java%22%3A%7B%22name%22%3A%22EnglishGreeting.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+EnglishGreeting+extends+Greeting+%7B%5Cn%5Cn++public+void+print%28%29+%7B%5Cn++++%2F%2F+the+InheritanceTestTwo+class+inherits+variables%5Cn++++%2F%2F+and+methods+from+InheritanceTestOne%5Cn++++System.out.println%28exampleVariableOne+%2B+%5C%22+subclass%5C%22%29%3B%5Cn++++printer%28%29%3B%5Cn++%7D%5Cn%7D%22%7D%2C%22Greeting.java%22%3A%7B%22name%22%3A%22Greeting.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+Greeting+%7B%5Cn%5Cn++public+String+exampleVariableOne+%3D+%5C%22Hello+World%21%5C%22%3B%5Cn%5Cn++public+void+printer%28%29+%7B%5Cn++++System.out.println%28exampleVariableOne+%2B+%5C%22+superclass%5C%22%29%3B%5Cn++%7D%5Cn%7D%22%7D%2C%22InheritanceExample.java%22%3A%7B%22name%22%3A%22InheritanceExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+InheritanceExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++EnglishGreeting+englishGreeting+%3D+new+EnglishGreeting%28%29%3B%5Cn++++englishGreeting.print%28%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nWe classify the classes into \"superclass\" and \"subclass\". Let's use the \"is-a\" relational comparison to show the relationship between the super and the sub class like this; for the program above, `EnglishGreeting` is-a `Greeting`.\n\nThe subclass is used to construct objects that look like the superclass's objects, but with added features such as extra variables and methods. In order for the subclass to use the public methods and variables, Java reserved word `extends` is used when implementing inheritance code.\n\nBy having a superclass with general methods and variables that apply to all the subclasses, you can save a lot of coding time at the individual subclass level.\n\nYou can create objects using the syntax `SuperClass objectname = new SubClass();` because the subclass extends from a superclass and \"is-a\" superclass. Switching the position of the superclass and the subclass here will throw an error.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612101029"}},"updated_at":{"$date":{"$numberLong":"1537612101029"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"zNNkGofdcjgw_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194578038318a30934d0"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"When implementing inheritance, use the Java reserved word `super` to call a method in the superclass or to invoke the constructor of the superclass. Remember that `private` methods cannot be accessed by the subclass. Take a look below to see how `super` is used.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22adSWldpYksWg%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22SuperExample.java%22%3A%7B%22name%22%3A%22SuperExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+SuperExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++SuperTestTwo+superTestTwo+%3D+new+SuperTestTwo%2810%2C20%29%3B%5Cn++%7D%5Cn%7D%22%7D%2C%22SuperTestOne.java%22%3A%7B%22name%22%3A%22SuperTestOne.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+SuperTestOne+%7B%5Cn%5Cn++public+int+exampleVariableOne+%3D+10%3B%5Cn%5Cn++public+SuperTestOne%28int+parameterOne%29+%7B%5Cn++++this.exampleVariableOne+%3D+parameterOne%3B%5Cn++%7D%5Cn%5Cn++public+void+print%28%29%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++%7D%5Cn%7D%22%7D%2C%22SuperTestTwo.java%22%3A%7B%22name%22%3A%22SuperTestTwo.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+SuperTestTwo+extends+SuperTestOne+%7B%5Cn%5Cn++public+SuperTestTwo%28int+parameterOne%2C+int+parameterTwo%29+%7B%5Cn++++super%28parameterOne%29%3B%5Cn++++super.print%28%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe word `super` is usually used to call the constructor, but could also be used to call methods. When you start using inheritance in the future, you will most likely be using `super` more for invoking constructors of the superclass. In the code above, `SuperTestTwo` invokes the constructor of its superclass `SuperTestOne` and sets `parameterOne` directly from the superclass. Therefore, when the `print()` method is called in the `SuperTestTwo` class, it prints 10.\n\nRemember that `super();` has to be the first statement in the subclass' constructor. Otherwise, you will get a compile-time error. Also, if you extend a class without a zero-argument constructor, like `SuperTestTwo` above, make sure to use one of the superclass' constructors and have the same parameters. Another data type in the parameter would cause an error. But, if the constructor in the superclass has no arguments(parameters), Java will automatically call one for you in the subclass, so `super();` will not be necessary in that case.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612101041"}},"updated_at":{"$date":{"$numberLong":"1537612101041"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"CwOYVZLaidgo_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194578038318a30934d6"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Overriding is an important concept when dealing with inheritance. A subclass' method overrides a superclass' method when it has the same signature, meaning it has the same name and the same parameters. See an example of how you can override a superclass' method below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22cNdDwlWpzyvn%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22OverrideMethodTestOne.java%22%3A%7B%22name%22%3A%22OverrideMethodTestOne.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+OverrideMethodTestOne+%7B%5Cn%5Cn++public+String+exampleVariableOne+%3D+%5C%22Java%5C%22%3B%5Cn%5Cn++public+void+print%28%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++%7D%5Cn%7D%22%7D%2C%22OverrideMethodTestTwo.java%22%3A%7B%22name%22%3A%22OverrideMethodTestTwo.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+OverrideMethodTestTwo+extends+OverrideMethodTestOne+%7B%5Cn%5Cn++public+String+exampleVariableTwo+%3D+%5C%22World%5C%22%3B%5Cn%5Cn++%2F%2F+overrides+the+print+method+from+OverrideMethodTestOne%5Cn++public+void+print%28%29+%7B%5Cn++++%2F%2F+calls+the+print+method+from+the+OverrideMethodTestOne%5Cn++++super.print%28%29%3B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%2C%22OverridingMethodsExample.java%22%3A%7B%22name%22%3A%22OverridingMethodsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+OverridingMethodsExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++OverrideMethodTestOne+objectOne+%3D+new+OverrideMethodTestTwo%28%29%3B%5Cn++++objectOne.print%28%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe method `print()` exists in the subclass and superclass with the same signature, and is overridden by the subclass as shown above. The reason why the subclass `OverrideMethodTwo` overrides the method `print()` is because it wants to print the extra `String` \"World\" on the console. When the statements `OverrideMethodTestOne objectOne = new OverrideMethodTestTwo();` and `objectOne.print()` are called, the program first searches for the `print()` method in the class `OverrideMethodTestTwo` before it looks for the `print()` method in the superclass, which is why the `print()` method in the subclass is used. If the `print()` method was not overridden in the subclass, only \"Java\" would end up being printed to the console.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612101050"}},"updated_at":{"$date":{"$numberLong":"1537612101050"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"VgoVDchxXhrE_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194578038318a30934dc"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"In Java an \"abstract\" class is a class that cannot be instanced but is a superclass for several other related subclasses. The abstract class contains abstract and non-abstract methods, variables, and even constructors that the subclass inherits. The Java reserved word `abstract` can only be used in an abstract class and will cause an error if used in a regular class. This is how an abstract class can be utilized.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22FRuKzwWMAVvn%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22AbstractClassTest.java%22%3A%7B%22name%22%3A%22AbstractClassTest.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+abstract+class+AbstractClassTest+%7B%5Cn%5Cn++%2F%2F+abstract+methods+only+have+to+be+declared%5Cn++abstract+void+print%28%29%3B%5Cn%5Cn++abstract+void+printGreeting%28%29%3B%5Cn%7D%22%7D%2C%22AbstractClassesExample.java%22%3A%7B%22name%22%3A%22AbstractClassesExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+AbstractClassesExample+extends+AbstractClassTest+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++AbstractClassesExample+abstractClassesExample+%3D+new+AbstractClassesExample%28%29%3B%5Cn++++abstractClassesExample.print%28%29%3B%5Cn++++abstractClassesExample.printGreeting%28%29%3B%5Cn++%7D%5Cn%5Cn++%2F%2F+implements+the+abstract+method+print%28%29%5Cn++public+void+print%28%29+%7B%5Cn++++System.out.println%28%5C%22Java+World%5C%22%29%3B%5Cn++%7D%5Cn%5Cn++%2F%2F+implements+the+abstract+method+printGreeting%28%29%5Cn++public+void+printGreeting%28%29+%7B%5Cn++++System.out.println%28%5C%22Hello+World%21%5C%22%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe class `AbstractClassesExample` inherits the two abstract methods `print()` and `printGreeting()` from the abstract class `AbstractClassTest`. When extending from an abstract class, we first define a method with the same name as an abstract method before overriding them with the proper method in a regular class. If `print()` or `printGreeting()` did not exist in the `AbstractClassesExample` class, it would cause an error. In a rare situation where necessary, an abstract class can also extend and implement another abstract class.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612101058"}},"updated_at":{"$date":{"$numberLong":"1537612101058"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"bSqsvmnOhkHU_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194578038318a30934e1"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Java functions with \"single inheritance\", meaning that a subclass can only inherit from one superclass. The reserved word `extends` can only be used to extend from one class. However, Java has interfaces, a class that allows multiple inheritance. An interface is a set of requirements that a class must implement. An interface is a list of constants and method headers with no method bodies. All methods and constants must be implemented by the class. Let's see how an interface can be used.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22hzTPkGQISQfP%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22InterfaceTestOne.java%22%3A%7B%22name%22%3A%22InterfaceTestOne.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+interface+InterfaceTestOne+%7B%5Cn%5Cn++int+exampleVariableOne+%3D+-5%3B%5Cn++void+print%28%29%3B%5Cn%7D%22%7D%2C%22InterfaceTestThree.java%22%3A%7B%22name%22%3A%22InterfaceTestThree.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+InterfaceTestThree+implements+InterfaceTestOne%2C+InterfaceTestTwo+%7B%5Cn%5Cn++%2F%2F+implements+the+method+print%28%29+from+InterfaceTestOne%5Cn++public+void+print%28%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++%7D%5Cn%5Cn++%2F%2F+implements+the+method+printGreeting%28%29+from+InterfaceTestOne%5Cn++public+void+printGreeting%28%29+%7B%5Cn++++System.out.println%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%7D%22%7D%2C%22InterfaceTestTwo.java%22%3A%7B%22name%22%3A%22InterfaceTestTwo.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+interface+InterfaceTestTwo+%7B%5Cn%5Cn++String+exampleVariableTwo+%3D+%5C%22Hello+World%21%5C%22%3B%5Cn++void+printGreeting%28%29%3B%5Cn%7D%22%7D%2C%22InterfacesExample.java%22%3A%7B%22name%22%3A%22InterfacesExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+InterfacesExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++InterfaceTestThree+interfaceTestThree+%3D+new+InterfaceTestThree%28%29%3B%5Cn++++interfaceTestThree.print%28%29%3B%5Cn++++interfaceTestThree.printGreeting%28%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe Java reserved word `implements` is used instead of `extends` for interfaces. You are able to implement multiple interfaces by separating them with a comma. The class that implements an interface inherits the methods and the instance variables of the interface. However, similar to abstract classes, the methods have to be declared inside the class with a proper method body. The variables implemented in the interface do not necessarily have to be used in the class. In addition, methods from the interface must be declared `public`. All variables in an interface are `public`, `static`, and `final` by default.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612101066"}},"updated_at":{"$date":{"$numberLong":"1537612101066"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"ZLKyLhBBeQmo_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194578038318a30934e7"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"All Java objects are polymorphic. \"Polymorphism\" is the ability of an object to take on different forms. The most common use of polymorphism occurs when the superclass reference is used to refer to a subclass object. We touched on this concept in the chapter on inheritance. Superclasses can be used to create objects such as `Superclass objectName = new SubClass();`. The program below is an example of using both an abstract class and an interface.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22GCrnFDmvXnZs%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22PolymorphismExample.java%22%3A%7B%22name%22%3A%22PolymorphismExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+PolymorphismExample+extends+PolymorphismTestOne+implements+PolymorphismTestTwo+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++Object+polymorphismExample+%3D+new+PolymorphismExample%28%29%3B%5Cn++++%28%28PolymorphismExample%29polymorphismExample%29.print%28%29%3B%5Cn++++%28%28PolymorphismExample%29polymorphismExample%29.printGreeting%28%29%3B%5Cn++++%28%28PolymorphismExample%29polymorphismExample%29.printNumber%28%29%3B%5Cn++%7D%5Cn%5Cn++%2F%2F+implements+print+method+from+abstract+class%5Cn++public+void+print%28%29+%7B%5Cn++++System.out.println%28%5C%22Java%5C%22%29%3B%5Cn++%7D%5Cn%5Cn++%2F%2F+implements+printGreeting+method+from+abstract+class%5Cn++public+void+printGreeting%28%29+%7B%5Cn++++System.out.println%28%5C%22Hello+World%21%5C%22%29%3B%5Cn++%7D%5Cn%5Cn++%2F%2F+implements+printNumber+method+from+interface%5Cn++public+void+printNumber%28%29+%7B%5Cn++++System.out.println%28exampleVariableOne%29%3B%5Cn++%7D%5Cn%7D%22%7D%2C%22PolymorphismTestOne.java%22%3A%7B%22name%22%3A%22PolymorphismTestOne.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+abstract+class+PolymorphismTestOne+%7B%5Cn%5Cn++abstract+void+print%28%29%3B%5Cn%5Cn++abstract+void+printGreeting%28%29%3B%5Cn%7D%22%7D%2C%22PolymorphismTestTwo.java%22%3A%7B%22name%22%3A%22PolymorphismTestTwo.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+interface+PolymorphismTestTwo+%7B%5Cn%5Cn++int+exampleVariableOne+%3D+150%3B%5Cn%5Cn++void+printNumber%28%29%3B%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nWe utilized type casts and the idea of polymorphism by creating the object `polymorphismExample` using `Object` and `PolymorphismExample`. We have to cast the object so that the program knows which methods we are calling. Because the `PolymorphismExample` class is not overriding methods from the `Object` class, casting is required.\n\nFor a programmer, it is essential to know about objects and when to use each type of class as we progress to higher level coding, programing, and idea developing. Look back at the topics covered thus far to ensure a strong grasp of all concepts before moving forward. It is imperative to have a strong foundation in order to build tall.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612101078"}},"updated_at":{"$date":{"$numberLong":"1537612101078"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"ldWJxIuCmEGy_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194578038318a30934fd"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"In Java, recursion is a programming technique in which a method calls itself to calculate a result. This method is an efficient way to solve problems with only a few lines of code. Take a look at the example of recursion below and figure out what it does.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22NIAdGcbMeFRP%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22RecursiveMethodsExample.java%22%3A%7B%22name%22%3A%22RecursiveMethodsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+RecursiveMethodsExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+prints+1-10+in+descending+order%5Cn++++print%2810%29%3B%5Cn++%7D%5Cn%5Cn++public+static+void+print%28int+parameterOne%29+%7B%5Cn++++if+%28parameterOne+%5Cu003e+0%29+%7B%5Cn++++++System.out.print%28parameterOne+%2B+%5C%22+%5C%22%29%3B%5Cn++++++parameterOne--%3B%5Cn++++++%2F%2F+recursive+call%5Cn++++++print%28parameterOne%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nRecursion means that within the course of the method body, there is a statement that calls the same method as the method it belongs in. To prevent a repeating loop from occurring, every recursive method has a \"base case\" which exits the method when the method is complete.\n\nIn the method above, the base case is the `if` statement because the method will stop when `parameterOne` is less than 0. Let's track what happens when the method is called.\n\n1. `print(10);`\n2. `System.out.println(10 + \" \");`\n3. `parameterOne--;`\n4. `print(9);`\n5. `System.out.println(9 + \" \");`\n6. `print(8);`\n\n and so on until the boolean expression in the `if` statement evaluates to false.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612101165"}},"updated_at":{"$date":{"$numberLong":"1537612101165"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"jtJsuMChLZZu_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194578038318a3093503"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"In Java, the concept of \"overloading\" is when two or more methods of a class have the same name but different \"parameter lists\". In this special case, when a method is called, the program calls the correct method by checking the parameters. To understand this concept further, let's think back to when we were working with the `Math` class. When we used the method `Math.abs()`, we experienced the concept of overloading as the method had four different choices for the parameter; the data types `int`, `double`, `float`, and `long`. Let's dive into how we can overload a method.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22oqPBczKpkPNf%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22OverloadingMethodsExample.java%22%3A%7B%22name%22%3A%22OverloadingMethodsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+OverloadingMethodsExample+%7B%5Cn%5Cn++public+static+float+exampleVariableOne+%3D+3.14f%3B%5Cn++public+static+double+exampleVariableTwo+%3D+Math.PI%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++print%28exampleVariableOne%29%3B%5Cn++++print%28exampleVariableTwo%29%3B%5Cn++%7D%5Cn%5Cn++%2F%2F+two+identical+methods+with+different+parameters%5Cn++%2F%2F+takes+in+float+value+as+a+parameter%5Cn++public+static+void+print%28float+parameterOne%29+%7B%5Cn++++System.out.println%28%5C%22float%3A+%5C%22+%2B+parameterOne%29%3B%5Cn++%7D%5Cn++%2F%2F+takes+in+a+double+value+as+a+parameter%5Cn++public+static+void+print%28double+parameterOne%29+%7B%5Cn++++System.out.println%28%5C%22double%3A+%5C%22+%2B+parameterOne%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe method named `print()` is overloaded when we create two methods with the same name containing different parameters. One takes in `double` values while the other takes `float` values. The only difference between the methods has to be the parameters in order for it to be considered \"overloading\". One rule to keep in mind when working with overloaded methods is that return types for the methods cannot be the only thing that separates one method from the other. For example, creating two methods with the headers `public int methodA()` and `public double methodA()` will result in an error.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612101178"}},"updated_at":{"$date":{"$numberLong":"1537612101178"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"eghyqTPDyRxw_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194578038318a3093509"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Let's examine the function of a \"base case\". It returns a value and does not make any more recurring calls. The values for which the base case stops recurring calls are particular specific inputs. For base cases that are factorial-based, the base case happens when the parameter becomes equal to one. Take a look at the code below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22iERTroPxDwiO%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22IdentifyingBaseCaseExample.java%22%3A%7B%22name%22%3A%22IdentifyingBaseCaseExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+IdentifyingBaseCaseExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+10%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++System.out.println%28factorial%283%29%29%3B%5Cn++%7D%5Cn%5Cn++public+static+int+factorial%28int+parameterOne%29+%7B%5Cn++++int+result%3B%5Cn++++%2F%2F+base+case%5Cn++++%2F%2F+returns+1+when+exampleVariableTwo+%3D+1%5Cn++++if+%28parameterOne+%3D%3D+1%29+%7B%5Cn++++++return+1%3B%5Cn++++%7D%5Cn++++%2F%2F+calls+factorial+with+exampleVariableTwo+-+1%5Cn++++%2F%2F+and+multiplies+the+current+value+of+exampleVariableTwo%5Cn++++%2F%2F+with+the+result+of+the+factorial%28exampleVariableTwo+-+1%29%5Cn++++result+%3D+factorial%28parameterOne+-+1%29+%2A+parameterOne%3B%5Cn++++return+result%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nDid you receive an output of six? The program is working as intended because three factorial is equal to six. If we take a look at what happens in the method step by step, we see that the `if` statement is the \"base case\".\n\n1. `factorial(3)`\n2. `result = factorial(2) * 3;`\n3. `factorial(2)`\n4. `result = factorial(1) * 2;`\n5. `factorial(1)`\n6. `return 1;`\n7. `result = 1 * 2;`\n8. `return result;` (result is 2)\n9. `result = 2 * 3;`\n10. `return result;` (result is 6)\n\nLine four and seven, two and nine are referring to the same line of code. This is because the `return` statement can't be called until `factorial(2)` and `factorial(1)` returned a number.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612101192"}},"updated_at":{"$date":{"$numberLong":"1537612101192"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"DWMVnJXrorjz_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194578038318a309351a"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"From the start of our course we have pointed out scenarios in coding that may cause runtime errors, which are almost always caused by \"exceptions\". An exception is something that happens while the program is executing. Whatever this exception may be, it interrupts or breaks the normal flow of the program's executable directions. Let's dive deeper into what exception errors are and how we can detect and resolve them!\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22vKJWDhkbGWox%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22CatchingExceptionExample.java%22%3A%7B%22name%22%3A%22CatchingExceptionExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+CatchingExceptionExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++try+%7B%5Cn++++++%2F%2F+NumberFormatException+will+be+thrown+because+a+String%5Cn++++++%2F%2F++with+characters+cannot+be+converted+into+an+integer+value%5Cn++++++String+exampleVariableOne+%3D+%5C%22Hello+World%21%5C%22%3B%5Cn++++++int+exampleVariableTwo+%3D+Integer.parseInt%28exampleVariableOne%29%3B%5Cn++++%7D+catch+%28NumberFormatException+e%29+%7B+%2F%2F+the+character+%27e%27+is+commonly+used%2C+but+you+are+free+to+name+it+whatever%5Cn++++++%2F%2F+If+a+NumberFormatException+is+thrown%2C+the+program%5Cn++++++%2F%2F+will+print+%5C%22Number+Format+Exception%5C%22%5Cn++++++System.out.println%28%5C%22Number+Format+Exception%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nIn the scenario above, an error is supposed to occur because we try to convert characters into integers. Instead of the error, the program caught the exception \"NumberFormatException\" itself, and printed out a different result specified by us beforehand.\n\nHow do we catch an exception? Set the code that might throw the error inside a `try{}` block. Then, set the code that catches and handles the exception inside a `catch{}` block. Then, when the program runs, if there is a statement inside the `try{}` block that throws a \"NumberFormatException\", it causes the `catch{}` block to execute, causing the leftover statements in the `try{}` block to remain unexecuted. Remember that the `catch{}` block is executed only if the exception thrown in the `try{}` block matches the exception inside the parentheses of the `catch{}` block.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612101264"}},"updated_at":{"$date":{"$numberLong":"1537612101264"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"sOvWsXrejyPz_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194578038318a3093520"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"We examined scenarios where our own code throws errors and are familiar with the exceptions that are generally defined in Java. But have you thought about possible reasons you would want to create your own exceptions? Why, you ask?\n\nFor example, when users are utilizing your program and entering data into it, for instance their name, if they enter numbers or symbols into a name field, would you want that user to get an error specifically for that field in your program letting them know they must use characters? This is why programmers in Java are able to throw exceptions with error messages that are specific to their individual programs. Let's see an example below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22QvMsrFGoLkTE%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ThrowingExceptionsExample.java%22%3A%7B%22name%22%3A%22ThrowingExceptionsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ThrowingExceptionsExample+%7B%5Cn%5Cn++public+static+int+exampleVariableOne+%3D+1%3B%5Cn++public+static+int+exampleVariableTwo+%3D+12%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29%7B%5Cn++++add%28exampleVariableOne%2C+exampleVariableTwo%29%3B%5Cn++%7D%5Cn%5Cn++public+static+void+add%28int+exampleVariableOne%2C+int+exampleVariableTwo%29+throws+ArithmeticException%2C+NumberFormatException+%7B%5Cn++++%2F%2F+creates+a+new+ArithmeticException+condition+where%5Cn++++%2F%2F+exampleVariableOne+and+exampleVariableTwo+cannot+be+0%5Cn++++if+%28exampleVariableOne+%3D%3D+0+%7C%7C+exampleVariableTwo+%3D%3D+0%29+%7B%5Cn++++++throw+new+ArithmeticException%28%5C%22One+of+the+exampleVariables+are+0%5C%22%29%3B%5Cn++++%7D+else+%7B%5Cn++++++System.out.println%28%5C%22The+sum+of+the+two+numbers%3A+%5C%22+%2B+%28exampleVariableOne+%2B+exampleVariableTwo%29%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe program above throws the \"ArithmeticException\" if one of the parameters are zero as adding nothing defeats the purpose of using the `add()` method. The exception can either be handled with a `catch{}` block or thrown to the user as an exception error.\n\nWhen you have one exception you need to throw, use the following syntax, `throw new ExceptionName(description)`, where \"ExceptionName\" has to match one of the exceptions that are already defined in Java. If you are throwing two or more exceptions, you can use the word `throws` in the method header and list out the exception names with commas separating them. The program above is an example of how you can throw exceptions in the method header.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612101275"}},"updated_at":{"$date":{"$numberLong":"1537612101275"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"mvOWSMgIsoEF_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194578038318a3093526"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Let's take time to learn about some of the most common exceptions, what each one means, and how to handle them as you start your writing your own code. In order for you to try and test the exception causing scenarios, use the `try{}` and `catch{}` blocks in each scenario.\n\nHave you experienced the \"ArrayIndexOutOfBoundsException\" before? It is thrown when you try to access an array through an index that doesn't exist in the array. For example, calling an index that is less than 0 or greater than or equal to the length of the array will cause this error. Take a look at the code below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22phBzcNHYXYCL%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ArrayIndexOutOfBoundsExample.java%22%3A%7B%22name%22%3A%22ArrayIndexOutOfBoundsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ArrayIndexOutOfBoundsExample+%7B%5Cn%5Cn++public+static+int%5B%5D+exampleVariableOne+%3D+new+int%5B10%5D%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++try+%7B%5Cn++++++%2F%2F+ArrayIndexOutOfBoundsException+will+be+thrown+because%5Cn++++++%2F%2F+exampleVariableOne+only+has+a+length+of+10%5Cn++++++exampleVariableOne%5B11%5D+%3D+9%3B%5Cn++++++System.out.println%28%5C%22Array+index+is+valid%5C%22%29%3B%5Cn++++%7D+catch+%28ArrayIndexOutOfBoundsException+e%29+%7B%5Cn++++++System.out.println%28%5C%22Array+index+is+out+of+bounds%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe program above tries to access the element in the eleventh index of an array that only has a length of ten and a max index of nine. As expected, the exception is thrown and the program stops executing due to the error. Let's change the number in the program to a number that should not trigger the error to check if our exception statement works as intended.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612101287"}},"updated_at":{"$date":{"$numberLong":"1537612101287"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"mMGOyOABZOLX_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194578038318a309352c"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Let's move on to another common error many programmers have experienced first-hand, the \"NullPointerException\". Remember that a null value can be assigned to any object reference including strings. The NullPointerException is thrown when the program tries to use an object reference that has the null value. Take a look below to see an example.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22UuissUTnZiwb%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22NullPointerExample.java%22%3A%7B%22name%22%3A%22NullPointerExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+NullPointerExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++try+%7B%5Cn++++++%2F%2F+NullPointerException+will+be+thrown+because%5Cn++++++%2F%2F+exampleVariableOne+is+being+compared+to+a+null+value%5Cn++++++Double+exampleVariableOne+%3D+new+Double%28Math.PI%29%3B%5Cn++++++Double+exampleVariableTwo+%3D+null%3B%5Cn++++++exampleVariableOne.compareTo%28exampleVariableTwo%29%3B%5Cn++++++System.out.println%28%5C%22None+of+the+objects+are+null%5C%22%29%3B%5Cn++++%7D+catch+%28NullPointerException+e%29+%7B%5Cn++++++System.out.println%28%5C%22exampleVariableOne+cannot+be+compared+to+a+null+value%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe \"NullPointerException\" is thrown when we compare an object to a null value. As an exercise, change the value above to stop the exception from being thrown.\n\nWorking with null values may not be the best practice because there may be situations where the \"NullPointerException\" is thrown by the program. The most effective way to avoid a \"NullPointerException\" is to check all object references before accessing one of the object's fields or methods. Use the `try{}` and `catch{}` blocks to check if the object is null.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612101299"}},"updated_at":{"$date":{"$numberLong":"1537612101299"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"vdjczWiYuEGS_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194578038318a3093532"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"Now let's examine the \"ArithmeticException\" that you have experienced before when we tried to divide an integer by zero. Anything that a calculator could not process would throw this type of exception. Please see the example below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22UwWYEiKBMQaL%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22ArithmeticExceptionExample.java%22%3A%7B%22name%22%3A%22ArithmeticExceptionExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+ArithmeticExceptionExample+%7B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++try+%7B%5Cn++++++%2F%2F+ArithmeticException+will+be+thrown+because%5Cn++++++%2F%2F+a+number+cannot+be+divided+by+0%5Cn++++++int+exampleVariableOne+%3D+500%2F0%3B%5Cn+++++++System.out.println%28%5C%22You+are+not+dividing+a+number+by+0%5C%22%29%3B%5Cn++++%7D+catch+%28ArithmeticException+e%29+%7B%5Cn++++++System.out.println%28%5C%22Arithmetic+Exception%3A+cannot+divide+by+0%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nIn the scenario above, we divide by zero, which is why the \"ArithmeticException\" is thrown. Play around with the number you are dividing by to get the error to stop. As you can see, these errors are easily avoidable if you pay extreme attention to detail and ensure all of your expressions are mathematically correct when you code. In fact, when dealing with mathematical expressions, a logic error causes a larger problem because you will not receive an exception for it. This means you would have to sift through the code and dig up the mistake in order to resolve it. Always be very careful when writing calculations to ensure the intended result.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612101309"}},"updated_at":{"$date":{"$numberLong":"1537612101309"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"bKpbVasBMeku_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194578038318a3093538"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"The \"StringIndexOutOfBoundsException\" is similar to the \"ArrayIndexOutOfBoundsException\" we already covered. When the index of the targeted value is less than zero or greater than or equal to the length of the `String`, the exception occurs. Take a look at the example below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22yiVUdestKIlO%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22StringIndexOutOfBoundsExample.java%22%3A%7B%22name%22%3A%22StringIndexOutOfBoundsExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+StringIndexOutOfBoundsExample+%7B%5Cn%5Cn++public+static+String+exampleVariableOne+%3D+%5C%22Hello+World%21%5C%22%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++try+%7B%5Cn++++++%2F%2F+StringIndexOutOfBoundsException+will+be+thrown+because%5Cn++++++%2F%2F+exampleVariableOne+only+has+a+length+of+12%5Cn++++++exampleVariableOne.charAt%2813%29%3B%5Cn++++++System.out.println%28%5C%22String+Index+is+valid%5C%22%29%3B%5Cn++++%7D+catch+%28StringIndexOutOfBoundsException+e%29+%7B%5Cn++++++System.out.println%28%5C%22String+Index+is+out+of+bounds%5C%22%29%3B%5Cn++++%7D%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nThe exception occurs when the index of a value does not exist in the `String` we call. The code we examined above attempts to access the character at the thirteenth index of `exampleVariableOne`, which only has a length of twelve and a maximum index of eleven. Play around with the index number to stop the exception from occurring.\n\nA great way to avoid this exception is to use something like `stringname.length()-1` for the last index instead of putting a specific value, which may turn out to be incorrect and cause the error. Keep in mind that the length of a `String` can change if concatenation is used. Only use specific index values if you are completely certain about the number of characters inside the `String`.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612101322"}},"updated_at":{"$date":{"$numberLong":"1537612101322"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
{"_id":"CitzlvSCnrNE_vc","latest_version":{"$numberInt":"1"},"contents":[{"_id":{"$oid":"5ba6194578038318a309353e"},"version":{"$numberInt":"1"},"content":{"intlString":[{"content":"In Java, \"NaN\" stands for \"not a number\" and signifies that a value is not defined. \"NaN\" is not an exception error, but a value that is assigned. For example, imaginary numbers like the square root of negative numbers or zero divided by zero will both print \"NaN\" as the result. Take a look at the example below.\n\n\n\n<iframe src=\"https://exlcode.com/repl?embedded=true&amp;workspace=%7B%22id%22%3A%22uXlOTLCDdVGU%22%2C%22name%22%3A%2201_%22%2C%22environmentKey%22%3A%22java_default_free%22%2C%22files%22%3A%7B%22src%22%3A%7B%22name%22%3A%22src%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22main%22%3A%7B%22name%22%3A%22main%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22java%22%3A%7B%22name%22%3A%22java%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22exlcode%22%3A%7B%22name%22%3A%22exlcode%22%2C%22isDir%22%3Atrue%2C%22isTmplFile%22%3Atrue%2C%22isImmutable%22%3Afalse%2C%22children%22%3A%7B%22NaNExample.java%22%3A%7B%22name%22%3A%22NaNExample.java%22%2C%22isDir%22%3Afalse%2C%22isTmplFile%22%3Afalse%2C%22isImmutable%22%3Afalse%2C%22contents%22%3A%22package+exlcode%3B%5Cn%5Cnpublic+class+NaNExample+%7B%5Cn%5Cn++public+static+double+exampleVariableOne+%3D+-3%3B%5Cn%5Cn++public+static+void+main%28String%5B%5D+args%29+%7B%5Cn++++%2F%2F+this+will+print+NaN+because+square+root+of+-3+is+an+imaginary+number%5Cn++++System.out.println%28Math.sqrt%28-3%29%29%3B%5Cn++%7D%5Cn%7D%22%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D%7D\" width=\"100%\" height=\"500px\"></iframe>\n\nWhen we attempt to find the square root of a negative number, the program returns \"NaN\". Contrary to exceptions, a \"NaN\" result will not cause your program to stop, but may still become an issue if you try to the use the \"NaN\" result in any other calculations in the program. For example, you will likely throw an error when \"NaN\", which is not a number, ends up in an expression with an `int`. Java will throw an error because arithmetic operators cannot be used on two different data types.\n\n\n\n","is_default":true,"locale":"en","created_at":{"$date":{"$numberLong":"1537612101331"}},"updated_at":{"$date":{"$numberLong":"1537612101331"}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}}],"created_at":{"$date":{"$numberLong":"-62135596800000"}},"updated_at":{"$date":{"$numberLong":"-62135596800000"}}}
